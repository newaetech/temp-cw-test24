
simpleserial-trace-CW308_K82F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interrupts   000003c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bootloader_config 00000000  000003c0  000003c0  0002017c  2**0
                  CONTENTS
  2 .flash_config 00000010  00000400  00000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0000421c  00000410  00000410  00010410  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .ARM          00000008  0000462c  0000462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  00004634  00004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  00004638  00004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000017c  1fff0000  0000463c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ncache.init  00000000  1fff017c  1fff017c  0002017c  2**0
                  CONTENTS
  9 .ncache       00000000  1fff017c  1fff017c  0002017c  2**0
                  CONTENTS
 10 .bss          00000384  1fff017c  000047b8  0002017c  2**2
                  ALLOC
 11 .heap         00000400  20000000  20000000  00030000  2**0
                  ALLOC
 12 .stack        00000400  20000400  20000400  00030000  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .comment      00000031  00000000  00000000  000201a6  2**0
                  CONTENTS, READONLY
 15 .debug_line   0000a61b  00000000  00000000  000201d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_info   00042ebe  00000000  00000000  0002a7f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00009abb  00000000  00000000  0006d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001450  00000000  00000000  00077170  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00015d89  00000000  00000000  000785c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00001910  00000000  00000000  0008e349  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0000c66a  00000000  00000000  0008fc59  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00003b18  00000000  00000000  0009c2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stab         00000b04  00000000  00000000  0009fddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      000001e4  00000000  00000000  000a08e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000410 <deregister_tm_clones>:
     410:	4b04      	ldr	r3, [pc, #16]	; (424 <deregister_tm_clones+0x14>)
     412:	4805      	ldr	r0, [pc, #20]	; (428 <deregister_tm_clones+0x18>)
     414:	1a1b      	subs	r3, r3, r0
     416:	2b06      	cmp	r3, #6
     418:	d902      	bls.n	420 <deregister_tm_clones+0x10>
     41a:	4b04      	ldr	r3, [pc, #16]	; (42c <deregister_tm_clones+0x1c>)
     41c:	b103      	cbz	r3, 420 <deregister_tm_clones+0x10>
     41e:	4718      	bx	r3
     420:	4770      	bx	lr
     422:	bf00      	nop
     424:	1fff017f 	.word	0x1fff017f
     428:	1fff017c 	.word	0x1fff017c
     42c:	00000000 	.word	0x00000000

00000430 <register_tm_clones>:
     430:	4905      	ldr	r1, [pc, #20]	; (448 <register_tm_clones+0x18>)
     432:	4806      	ldr	r0, [pc, #24]	; (44c <register_tm_clones+0x1c>)
     434:	1a09      	subs	r1, r1, r0
     436:	1089      	asrs	r1, r1, #2
     438:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
     43c:	1049      	asrs	r1, r1, #1
     43e:	d002      	beq.n	446 <register_tm_clones+0x16>
     440:	4b03      	ldr	r3, [pc, #12]	; (450 <register_tm_clones+0x20>)
     442:	b103      	cbz	r3, 446 <register_tm_clones+0x16>
     444:	4718      	bx	r3
     446:	4770      	bx	lr
     448:	1fff017c 	.word	0x1fff017c
     44c:	1fff017c 	.word	0x1fff017c
     450:	00000000 	.word	0x00000000

00000454 <__do_global_dtors_aux>:
     454:	b510      	push	{r4, lr}
     456:	4c06      	ldr	r4, [pc, #24]	; (470 <__do_global_dtors_aux+0x1c>)
     458:	7823      	ldrb	r3, [r4, #0]
     45a:	b943      	cbnz	r3, 46e <__do_global_dtors_aux+0x1a>
     45c:	f7ff ffd8 	bl	410 <deregister_tm_clones>
     460:	4b04      	ldr	r3, [pc, #16]	; (474 <__do_global_dtors_aux+0x20>)
     462:	b113      	cbz	r3, 46a <__do_global_dtors_aux+0x16>
     464:	4804      	ldr	r0, [pc, #16]	; (478 <__do_global_dtors_aux+0x24>)
     466:	f3af 8000 	nop.w
     46a:	2301      	movs	r3, #1
     46c:	7023      	strb	r3, [r4, #0]
     46e:	bd10      	pop	{r4, pc}
     470:	1fff017c 	.word	0x1fff017c
     474:	00000000 	.word	0x00000000
     478:	00004614 	.word	0x00004614

0000047c <frame_dummy>:
     47c:	b508      	push	{r3, lr}
     47e:	4b08      	ldr	r3, [pc, #32]	; (4a0 <frame_dummy+0x24>)
     480:	b11b      	cbz	r3, 48a <frame_dummy+0xe>
     482:	4908      	ldr	r1, [pc, #32]	; (4a4 <frame_dummy+0x28>)
     484:	4808      	ldr	r0, [pc, #32]	; (4a8 <frame_dummy+0x2c>)
     486:	f3af 8000 	nop.w
     48a:	4808      	ldr	r0, [pc, #32]	; (4ac <frame_dummy+0x30>)
     48c:	6803      	ldr	r3, [r0, #0]
     48e:	b913      	cbnz	r3, 496 <frame_dummy+0x1a>
     490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     494:	e7cc      	b.n	430 <register_tm_clones>
     496:	4b06      	ldr	r3, [pc, #24]	; (4b0 <frame_dummy+0x34>)
     498:	2b00      	cmp	r3, #0
     49a:	d0f9      	beq.n	490 <frame_dummy+0x14>
     49c:	4798      	blx	r3
     49e:	e7f7      	b.n	490 <frame_dummy+0x14>
     4a0:	00000000 	.word	0x00000000
     4a4:	1fff0180 	.word	0x1fff0180
     4a8:	00004614 	.word	0x00004614
     4ac:	1fff0178 	.word	0x1fff0178
     4b0:	00000000 	.word	0x00000000

000004b4 <_mainCRTStartup>:
     4b4:	4b13      	ldr	r3, [pc, #76]	; (504 <_mainCRTStartup+0x50>)
     4b6:	2b00      	cmp	r3, #0
     4b8:	bf08      	it	eq
     4ba:	4b11      	ldreq	r3, [pc, #68]	; (500 <_mainCRTStartup+0x4c>)
     4bc:	469d      	mov	sp, r3
     4be:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
     4c2:	2100      	movs	r1, #0
     4c4:	468b      	mov	fp, r1
     4c6:	460f      	mov	r7, r1
     4c8:	4811      	ldr	r0, [pc, #68]	; (510 <_mainCRTStartup+0x5c>)
     4ca:	4a12      	ldr	r2, [pc, #72]	; (514 <_mainCRTStartup+0x60>)
     4cc:	1a12      	subs	r2, r2, r0
     4ce:	f000 fa3f 	bl	950 <memset>
     4d2:	4b0d      	ldr	r3, [pc, #52]	; (508 <_mainCRTStartup+0x54>)
     4d4:	2b00      	cmp	r3, #0
     4d6:	d000      	beq.n	4da <_mainCRTStartup+0x26>
     4d8:	4798      	blx	r3
     4da:	4b0c      	ldr	r3, [pc, #48]	; (50c <_mainCRTStartup+0x58>)
     4dc:	2b00      	cmp	r3, #0
     4de:	d000      	beq.n	4e2 <_mainCRTStartup+0x2e>
     4e0:	4798      	blx	r3
     4e2:	2000      	movs	r0, #0
     4e4:	2100      	movs	r1, #0
     4e6:	0004      	movs	r4, r0
     4e8:	000d      	movs	r5, r1
     4ea:	480b      	ldr	r0, [pc, #44]	; (518 <_mainCRTStartup+0x64>)
     4ec:	f000 f908 	bl	700 <atexit>
     4f0:	f000 f95c 	bl	7ac <__libc_init_array>
     4f4:	0020      	movs	r0, r4
     4f6:	0029      	movs	r1, r5
     4f8:	f002 f952 	bl	27a0 <main>
     4fc:	f000 f906 	bl	70c <exit>
     500:	00080000 	.word	0x00080000
     504:	20030000 	.word	0x20030000
     508:	00000000 	.word	0x00000000
     50c:	00000000 	.word	0x00000000
     510:	1fff017c 	.word	0x1fff017c
     514:	1fff0500 	.word	0x1fff0500
     518:	00000735 	.word	0x00000735

0000051c <Reset_Handler>:
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
     51c:	b672      	cpsid	i
    .equ    VTOR, 0xE000ED08
    ldr     r0, =VTOR
     51e:	480e      	ldr	r0, [pc, #56]	; (558 <Reset_Handler+0x3c>)
    ldr     r1, =__isr_vector
     520:	490e      	ldr	r1, [pc, #56]	; (55c <Reset_Handler+0x40>)
    str     r1, [r0]
     522:	6001      	str	r1, [r0, #0]
    ldr     r2, [r1]
     524:	680a      	ldr	r2, [r1, #0]
    msr     msp, r2
     526:	f382 8808 	msr	MSP, r2
#ifndef __NO_SYSTEM_INIT
    ldr   r0,=SystemInit
     52a:	480d      	ldr	r0, [pc, #52]	; (560 <Reset_Handler+0x44>)
    blx   r0
     52c:	4780      	blx	r0
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      __noncachedata_start__/__noncachedata_end__ : none cachable region
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     52e:	490d      	ldr	r1, [pc, #52]	; (564 <Reset_Handler+0x48>)
    ldr    r2, =__data_start__
     530:	4a0d      	ldr	r2, [pc, #52]	; (568 <Reset_Handler+0x4c>)
    ldr    r3, =__data_end__
     532:	4b0e      	ldr	r3, [pc, #56]	; (56c <Reset_Handler+0x50>)
#if 1
/* Here are two copies of loop implemenations. First one favors code size
 * and the second one favors performance. Default uses the first one.
 * Change to "#if 0" to use the second one */
.LC0:
    cmp     r2, r3
     534:	429a      	cmp	r2, r3
    ittt    lt
     536:	bfbe      	ittt	lt
    ldrlt   r0, [r1], #4
     538:	f851 0b04 	ldrlt.w	r0, [r1], #4
    strlt   r0, [r2], #4
     53c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .LC0
     540:	e7f8      	blt.n	534 <Reset_Handler+0x18>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     542:	490b      	ldr	r1, [pc, #44]	; (570 <Reset_Handler+0x54>)
    ldr r2, =__bss_end__
     544:	4a0b      	ldr	r2, [pc, #44]	; (574 <Reset_Handler+0x58>)

    movs    r0, 0
     546:	2000      	movs	r0, #0
.LC5:
    cmp     r1, r2
     548:	4291      	cmp	r1, r2
    itt    lt
     54a:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     54c:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC5
     550:	e7fa      	blt.n	548 <Reset_Handler+0x2c>
#endif /* __STARTUP_CLEAR_BSS */

    cpsie   i               /* Unmask interrupts */
     552:	b662      	cpsie	i
#ifndef __START
#define __START _start
#endif
#ifndef __ATOLLIC__
    ldr   r0,=__START
     554:	4808      	ldr	r0, [pc, #32]	; (578 <Reset_Handler+0x5c>)
    blx   r0
     556:	4780      	blx	r0
     558:	e000ed08 	.word	0xe000ed08
     55c:	00000000 	.word	0x00000000
     560:	00003435 	.word	0x00003435
     564:	0000463c 	.word	0x0000463c
     568:	1fff0000 	.word	0x1fff0000
     56c:	1fff017c 	.word	0x1fff017c
     570:	1fff017c 	.word	0x1fff017c
     574:	1fff0500 	.word	0x1fff0500
     578:	000004b5 	.word	0x000004b5

0000057c <ADC0_IRQHandler>:
    .align  1
    .thumb_func
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:
    b DefaultISR
     57c:	f7ff bffe 	b.w	57c <ADC0_IRQHandler>

00000580 <NMI_Handler>:
    .align 1
    .thumb_func
    .weak NMI_Handler
    .type NMI_Handler, %function
NMI_Handler:
    ldr   r0,=NMI_Handler
     580:	4826      	ldr	r0, [pc, #152]	; (61c <QuadSPI0_IRQHandler+0x4>)
    bx    r0
     582:	4700      	bx	r0

00000584 <HardFault_Handler>:
    .align 1
    .thumb_func
    .weak HardFault_Handler
    .type HardFault_Handler, %function
HardFault_Handler:
    ldr   r0,=HardFault_Handler
     584:	4826      	ldr	r0, [pc, #152]	; (620 <QuadSPI0_IRQHandler+0x8>)
    bx    r0
     586:	4700      	bx	r0

00000588 <SVC_Handler>:
    .align 1
    .thumb_func
    .weak SVC_Handler
    .type SVC_Handler, %function
SVC_Handler:
    ldr   r0,=SVC_Handler
     588:	4826      	ldr	r0, [pc, #152]	; (624 <QuadSPI0_IRQHandler+0xc>)
    bx    r0
     58a:	4700      	bx	r0

0000058c <PendSV_Handler>:
    .align 1
    .thumb_func
    .weak PendSV_Handler
    .type PendSV_Handler, %function
PendSV_Handler:
    ldr   r0,=PendSV_Handler
     58c:	4826      	ldr	r0, [pc, #152]	; (628 <QuadSPI0_IRQHandler+0x10>)
    bx    r0
     58e:	4700      	bx	r0

00000590 <SysTick_Handler>:
    .align 1
    .thumb_func
    .weak SysTick_Handler
    .type SysTick_Handler, %function
SysTick_Handler:
    ldr   r0,=SysTick_Handler
     590:	4826      	ldr	r0, [pc, #152]	; (62c <QuadSPI0_IRQHandler+0x14>)
    bx    r0
     592:	4700      	bx	r0

00000594 <DMA0_DMA16_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA0_DMA16_IRQHandler
    .type DMA0_DMA16_IRQHandler, %function
DMA0_DMA16_IRQHandler:
    ldr   r0,=DMA0_DMA16_DriverIRQHandler
     594:	4826      	ldr	r0, [pc, #152]	; (630 <QuadSPI0_IRQHandler+0x18>)
    bx    r0
     596:	4700      	bx	r0

00000598 <DMA1_DMA17_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA1_DMA17_IRQHandler
    .type DMA1_DMA17_IRQHandler, %function
DMA1_DMA17_IRQHandler:
    ldr   r0,=DMA1_DMA17_DriverIRQHandler
     598:	4826      	ldr	r0, [pc, #152]	; (634 <QuadSPI0_IRQHandler+0x1c>)
    bx    r0
     59a:	4700      	bx	r0

0000059c <DMA2_DMA18_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA2_DMA18_IRQHandler
    .type DMA2_DMA18_IRQHandler, %function
DMA2_DMA18_IRQHandler:
    ldr   r0,=DMA2_DMA18_DriverIRQHandler
     59c:	4826      	ldr	r0, [pc, #152]	; (638 <QuadSPI0_IRQHandler+0x20>)
    bx    r0
     59e:	4700      	bx	r0

000005a0 <DMA3_DMA19_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA3_DMA19_IRQHandler
    .type DMA3_DMA19_IRQHandler, %function
DMA3_DMA19_IRQHandler:
    ldr   r0,=DMA3_DMA19_DriverIRQHandler
     5a0:	4826      	ldr	r0, [pc, #152]	; (63c <QuadSPI0_IRQHandler+0x24>)
    bx    r0
     5a2:	4700      	bx	r0

000005a4 <DMA4_DMA20_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA4_DMA20_IRQHandler
    .type DMA4_DMA20_IRQHandler, %function
DMA4_DMA20_IRQHandler:
    ldr   r0,=DMA4_DMA20_DriverIRQHandler
     5a4:	4826      	ldr	r0, [pc, #152]	; (640 <QuadSPI0_IRQHandler+0x28>)
    bx    r0
     5a6:	4700      	bx	r0

000005a8 <DMA5_DMA21_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA5_DMA21_IRQHandler
    .type DMA5_DMA21_IRQHandler, %function
DMA5_DMA21_IRQHandler:
    ldr   r0,=DMA5_DMA21_DriverIRQHandler
     5a8:	4826      	ldr	r0, [pc, #152]	; (644 <QuadSPI0_IRQHandler+0x2c>)
    bx    r0
     5aa:	4700      	bx	r0

000005ac <DMA6_DMA22_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA6_DMA22_IRQHandler
    .type DMA6_DMA22_IRQHandler, %function
DMA6_DMA22_IRQHandler:
    ldr   r0,=DMA6_DMA22_DriverIRQHandler
     5ac:	4826      	ldr	r0, [pc, #152]	; (648 <QuadSPI0_IRQHandler+0x30>)
    bx    r0
     5ae:	4700      	bx	r0

000005b0 <DMA7_DMA23_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA7_DMA23_IRQHandler
    .type DMA7_DMA23_IRQHandler, %function
DMA7_DMA23_IRQHandler:
    ldr   r0,=DMA7_DMA23_DriverIRQHandler
     5b0:	4826      	ldr	r0, [pc, #152]	; (64c <QuadSPI0_IRQHandler+0x34>)
    bx    r0
     5b2:	4700      	bx	r0

000005b4 <DMA8_DMA24_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA8_DMA24_IRQHandler
    .type DMA8_DMA24_IRQHandler, %function
DMA8_DMA24_IRQHandler:
    ldr   r0,=DMA8_DMA24_DriverIRQHandler
     5b4:	4826      	ldr	r0, [pc, #152]	; (650 <QuadSPI0_IRQHandler+0x38>)
    bx    r0
     5b6:	4700      	bx	r0

000005b8 <DMA9_DMA25_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA9_DMA25_IRQHandler
    .type DMA9_DMA25_IRQHandler, %function
DMA9_DMA25_IRQHandler:
    ldr   r0,=DMA9_DMA25_DriverIRQHandler
     5b8:	4826      	ldr	r0, [pc, #152]	; (654 <QuadSPI0_IRQHandler+0x3c>)
    bx    r0
     5ba:	4700      	bx	r0

000005bc <DMA10_DMA26_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA10_DMA26_IRQHandler
    .type DMA10_DMA26_IRQHandler, %function
DMA10_DMA26_IRQHandler:
    ldr   r0,=DMA10_DMA26_DriverIRQHandler
     5bc:	4826      	ldr	r0, [pc, #152]	; (658 <QuadSPI0_IRQHandler+0x40>)
    bx    r0
     5be:	4700      	bx	r0

000005c0 <DMA11_DMA27_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA11_DMA27_IRQHandler
    .type DMA11_DMA27_IRQHandler, %function
DMA11_DMA27_IRQHandler:
    ldr   r0,=DMA11_DMA27_DriverIRQHandler
     5c0:	4826      	ldr	r0, [pc, #152]	; (65c <QuadSPI0_IRQHandler+0x44>)
    bx    r0
     5c2:	4700      	bx	r0

000005c4 <DMA12_DMA28_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA12_DMA28_IRQHandler
    .type DMA12_DMA28_IRQHandler, %function
DMA12_DMA28_IRQHandler:
    ldr   r0,=DMA12_DMA28_DriverIRQHandler
     5c4:	4826      	ldr	r0, [pc, #152]	; (660 <QuadSPI0_IRQHandler+0x48>)
    bx    r0
     5c6:	4700      	bx	r0

000005c8 <DMA13_DMA29_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA13_DMA29_IRQHandler
    .type DMA13_DMA29_IRQHandler, %function
DMA13_DMA29_IRQHandler:
    ldr   r0,=DMA13_DMA29_DriverIRQHandler
     5c8:	4826      	ldr	r0, [pc, #152]	; (664 <QuadSPI0_IRQHandler+0x4c>)
    bx    r0
     5ca:	4700      	bx	r0

000005cc <DMA14_DMA30_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA14_DMA30_IRQHandler
    .type DMA14_DMA30_IRQHandler, %function
DMA14_DMA30_IRQHandler:
    ldr   r0,=DMA14_DMA30_DriverIRQHandler
     5cc:	4826      	ldr	r0, [pc, #152]	; (668 <QuadSPI0_IRQHandler+0x50>)
    bx    r0
     5ce:	4700      	bx	r0

000005d0 <DMA15_DMA31_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA15_DMA31_IRQHandler
    .type DMA15_DMA31_IRQHandler, %function
DMA15_DMA31_IRQHandler:
    ldr   r0,=DMA15_DMA31_DriverIRQHandler
     5d0:	4826      	ldr	r0, [pc, #152]	; (66c <QuadSPI0_IRQHandler+0x54>)
    bx    r0
     5d2:	4700      	bx	r0

000005d4 <DMA_Error_IRQHandler>:
    .align 1
    .thumb_func
    .weak DMA_Error_IRQHandler
    .type DMA_Error_IRQHandler, %function
DMA_Error_IRQHandler:
    ldr   r0,=DMA_Error_DriverIRQHandler
     5d4:	4826      	ldr	r0, [pc, #152]	; (670 <QuadSPI0_IRQHandler+0x58>)
    bx    r0
     5d6:	4700      	bx	r0

000005d8 <I2C0_IRQHandler>:
    .align 1
    .thumb_func
    .weak I2C0_IRQHandler
    .type I2C0_IRQHandler, %function
I2C0_IRQHandler:
    ldr   r0,=I2C0_DriverIRQHandler
     5d8:	4826      	ldr	r0, [pc, #152]	; (674 <QuadSPI0_IRQHandler+0x5c>)
    bx    r0
     5da:	4700      	bx	r0

000005dc <I2C1_IRQHandler>:
    .align 1
    .thumb_func
    .weak I2C1_IRQHandler
    .type I2C1_IRQHandler, %function
I2C1_IRQHandler:
    ldr   r0,=I2C1_DriverIRQHandler
     5dc:	4826      	ldr	r0, [pc, #152]	; (678 <QuadSPI0_IRQHandler+0x60>)
    bx    r0
     5de:	4700      	bx	r0

000005e0 <SPI0_IRQHandler>:
    .align 1
    .thumb_func
    .weak SPI0_IRQHandler
    .type SPI0_IRQHandler, %function
SPI0_IRQHandler:
    ldr   r0,=SPI0_DriverIRQHandler
     5e0:	4826      	ldr	r0, [pc, #152]	; (67c <QuadSPI0_IRQHandler+0x64>)
    bx    r0
     5e2:	4700      	bx	r0

000005e4 <SPI1_IRQHandler>:
    .align 1
    .thumb_func
    .weak SPI1_IRQHandler
    .type SPI1_IRQHandler, %function
SPI1_IRQHandler:
    ldr   r0,=SPI1_DriverIRQHandler
     5e4:	4826      	ldr	r0, [pc, #152]	; (680 <QuadSPI0_IRQHandler+0x68>)
    bx    r0
     5e6:	4700      	bx	r0

000005e8 <I2S0_Tx_IRQHandler>:
    .align 1
    .thumb_func
    .weak I2S0_Tx_IRQHandler
    .type I2S0_Tx_IRQHandler, %function
I2S0_Tx_IRQHandler:
    ldr   r0,=I2S0_Tx_DriverIRQHandler
     5e8:	4826      	ldr	r0, [pc, #152]	; (684 <QuadSPI0_IRQHandler+0x6c>)
    bx    r0
     5ea:	4700      	bx	r0

000005ec <I2S0_Rx_IRQHandler>:
    .align 1
    .thumb_func
    .weak I2S0_Rx_IRQHandler
    .type I2S0_Rx_IRQHandler, %function
I2S0_Rx_IRQHandler:
    ldr   r0,=I2S0_Rx_DriverIRQHandler
     5ec:	4826      	ldr	r0, [pc, #152]	; (688 <QuadSPI0_IRQHandler+0x70>)
    bx    r0
     5ee:	4700      	bx	r0

000005f0 <LPUART0_IRQHandler>:
    .align 1
    .thumb_func
    .weak LPUART0_IRQHandler
    .type LPUART0_IRQHandler, %function
LPUART0_IRQHandler:
    ldr   r0,=LPUART0_DriverIRQHandler
     5f0:	4826      	ldr	r0, [pc, #152]	; (68c <QuadSPI0_IRQHandler+0x74>)
    bx    r0
     5f2:	4700      	bx	r0

000005f4 <LPUART1_IRQHandler>:
    .align 1
    .thumb_func
    .weak LPUART1_IRQHandler
    .type LPUART1_IRQHandler, %function
LPUART1_IRQHandler:
    ldr   r0,=LPUART1_DriverIRQHandler
     5f4:	4826      	ldr	r0, [pc, #152]	; (690 <QuadSPI0_IRQHandler+0x78>)
    bx    r0
     5f6:	4700      	bx	r0

000005f8 <LPUART2_IRQHandler>:
    .align 1
    .thumb_func
    .weak LPUART2_IRQHandler
    .type LPUART2_IRQHandler, %function
LPUART2_IRQHandler:
    ldr   r0,=LPUART2_DriverIRQHandler
     5f8:	4826      	ldr	r0, [pc, #152]	; (694 <QuadSPI0_IRQHandler+0x7c>)
    bx    r0
     5fa:	4700      	bx	r0

000005fc <LPUART3_IRQHandler>:
    .align 1
    .thumb_func
    .weak LPUART3_IRQHandler
    .type LPUART3_IRQHandler, %function
LPUART3_IRQHandler:
    ldr   r0,=LPUART3_DriverIRQHandler
     5fc:	4826      	ldr	r0, [pc, #152]	; (698 <QuadSPI0_IRQHandler+0x80>)
    bx    r0
     5fe:	4700      	bx	r0

00000600 <LPUART4_IRQHandler>:
    .align 1
    .thumb_func
    .weak LPUART4_IRQHandler
    .type LPUART4_IRQHandler, %function
LPUART4_IRQHandler:
    ldr   r0,=LPUART4_DriverIRQHandler
     600:	4826      	ldr	r0, [pc, #152]	; (69c <QuadSPI0_IRQHandler+0x84>)
    bx    r0
     602:	4700      	bx	r0

00000604 <SPI2_IRQHandler>:
    .align 1
    .thumb_func
    .weak SPI2_IRQHandler
    .type SPI2_IRQHandler, %function
SPI2_IRQHandler:
    ldr   r0,=SPI2_DriverIRQHandler
     604:	4826      	ldr	r0, [pc, #152]	; (6a0 <QuadSPI0_IRQHandler+0x88>)
    bx    r0
     606:	4700      	bx	r0

00000608 <FLEXIO0_IRQHandler>:
    .align 1
    .thumb_func
    .weak FLEXIO0_IRQHandler
    .type FLEXIO0_IRQHandler, %function
FLEXIO0_IRQHandler:
    ldr   r0,=FLEXIO0_DriverIRQHandler
     608:	4826      	ldr	r0, [pc, #152]	; (6a4 <QuadSPI0_IRQHandler+0x8c>)
    bx    r0
     60a:	4700      	bx	r0

0000060c <I2C2_IRQHandler>:
    .align 1
    .thumb_func
    .weak I2C2_IRQHandler
    .type I2C2_IRQHandler, %function
I2C2_IRQHandler:
    ldr   r0,=I2C2_DriverIRQHandler
     60c:	4826      	ldr	r0, [pc, #152]	; (6a8 <QuadSPI0_IRQHandler+0x90>)
    bx    r0
     60e:	4700      	bx	r0

00000610 <SDHC_IRQHandler>:
    .align 1
    .thumb_func
    .weak SDHC_IRQHandler
    .type SDHC_IRQHandler, %function
SDHC_IRQHandler:
    ldr   r0,=SDHC_DriverIRQHandler
     610:	4826      	ldr	r0, [pc, #152]	; (6ac <QuadSPI0_IRQHandler+0x94>)
    bx    r0
     612:	4700      	bx	r0

00000614 <I2C3_IRQHandler>:
    .align 1
    .thumb_func
    .weak I2C3_IRQHandler
    .type I2C3_IRQHandler, %function
I2C3_IRQHandler:
    ldr   r0,=I2C3_DriverIRQHandler
     614:	4826      	ldr	r0, [pc, #152]	; (6b0 <QuadSPI0_IRQHandler+0x98>)
    bx    r0
     616:	4700      	bx	r0

00000618 <QuadSPI0_IRQHandler>:
    .align 1
    .thumb_func
    .weak QuadSPI0_IRQHandler
    .type QuadSPI0_IRQHandler, %function
QuadSPI0_IRQHandler:
    ldr   r0,=QuadSPI0_DriverIRQHandler
     618:	4826      	ldr	r0, [pc, #152]	; (6b4 <QuadSPI0_IRQHandler+0x9c>)
    bx    r0
     61a:	4700      	bx	r0
    def_irq_handler    Reserved117_IRQHandler
    def_irq_handler    Reserved118_IRQHandler
    def_irq_handler    Reserved119_IRQHandler
    def_irq_handler    LTC0_IRQHandler
    def_irq_handler    Reserved121_IRQHandler
    def_irq_handler    Reserved122_IRQHandler
     61c:	00000581 	.word	0x00000581
     620:	00000585 	.word	0x00000585
     624:	00000589 	.word	0x00000589
     628:	0000058d 	.word	0x0000058d
     62c:	00000591 	.word	0x00000591
     630:	00003609 	.word	0x00003609
     634:	00003641 	.word	0x00003641
     638:	00003679 	.word	0x00003679
     63c:	000036b1 	.word	0x000036b1
     640:	000036e9 	.word	0x000036e9
     644:	00003721 	.word	0x00003721
     648:	00003759 	.word	0x00003759
     64c:	00003791 	.word	0x00003791
     650:	000037c9 	.word	0x000037c9
     654:	00003801 	.word	0x00003801
     658:	00003839 	.word	0x00003839
     65c:	00003871 	.word	0x00003871
     660:	000038a9 	.word	0x000038a9
     664:	000038e1 	.word	0x000038e1
     668:	00003919 	.word	0x00003919
     66c:	00003951 	.word	0x00003951
     670:	0000057d 	.word	0x0000057d
     674:	000033e1 	.word	0x000033e1
     678:	000033f5 	.word	0x000033f5
     67c:	000030ed 	.word	0x000030ed
     680:	00003121 	.word	0x00003121
     684:	00002b41 	.word	0x00002b41
     688:	00002b7d 	.word	0x00002b7d
     68c:	00003d55 	.word	0x00003d55
     690:	00003d75 	.word	0x00003d75
     694:	00003d95 	.word	0x00003d95
     698:	00003db5 	.word	0x00003db5
     69c:	00003dd5 	.word	0x00003dd5
     6a0:	00003155 	.word	0x00003155
     6a4:	0000350d 	.word	0x0000350d
     6a8:	00003409 	.word	0x00003409
     6ac:	000032f5 	.word	0x000032f5
     6b0:	0000341d 	.word	0x0000341d
     6b4:	0000057d 	.word	0x0000057d

000006b8 <__assert_func>:
     6b8:	b500      	push	{lr}
     6ba:	4c0a      	ldr	r4, [pc, #40]	; (6e4 <__assert_func+0x2c>)
     6bc:	6826      	ldr	r6, [r4, #0]
     6be:	4605      	mov	r5, r0
     6c0:	b085      	sub	sp, #20
     6c2:	461c      	mov	r4, r3
     6c4:	68f0      	ldr	r0, [r6, #12]
     6c6:	b152      	cbz	r2, 6de <__assert_func+0x26>
     6c8:	4b07      	ldr	r3, [pc, #28]	; (6e8 <__assert_func+0x30>)
     6ca:	9202      	str	r2, [sp, #8]
     6cc:	e88d 000a 	stmia.w	sp, {r1, r3}
     6d0:	4622      	mov	r2, r4
     6d2:	462b      	mov	r3, r5
     6d4:	4905      	ldr	r1, [pc, #20]	; (6ec <__assert_func+0x34>)
     6d6:	f000 f855 	bl	784 <fiprintf>
     6da:	f000 ff61 	bl	15a0 <abort>
     6de:	4b04      	ldr	r3, [pc, #16]	; (6f0 <__assert_func+0x38>)
     6e0:	461a      	mov	r2, r3
     6e2:	e7f2      	b.n	6ca <__assert_func+0x12>
     6e4:	1fff0000 	.word	0x1fff0000
     6e8:	00004594 	.word	0x00004594
     6ec:	000045a4 	.word	0x000045a4
     6f0:	000045a0 	.word	0x000045a0

000006f4 <__assert>:
     6f4:	b508      	push	{r3, lr}
     6f6:	4613      	mov	r3, r2
     6f8:	2200      	movs	r2, #0
     6fa:	f7ff ffdd 	bl	6b8 <__assert_func>
     6fe:	bf00      	nop

00000700 <atexit>:
     700:	2300      	movs	r3, #0
     702:	4601      	mov	r1, r0
     704:	461a      	mov	r2, r3
     706:	4618      	mov	r0, r3
     708:	f000 be68 	b.w	13dc <__register_exitproc>

0000070c <exit>:
     70c:	b508      	push	{r3, lr}
     70e:	4b07      	ldr	r3, [pc, #28]	; (72c <exit+0x20>)
     710:	4604      	mov	r4, r0
     712:	b113      	cbz	r3, 71a <exit+0xe>
     714:	2100      	movs	r1, #0
     716:	f000 fec9 	bl	14ac <__call_exitprocs>
     71a:	4b05      	ldr	r3, [pc, #20]	; (730 <exit+0x24>)
     71c:	6818      	ldr	r0, [r3, #0]
     71e:	6a83      	ldr	r3, [r0, #40]	; 0x28
     720:	b103      	cbz	r3, 724 <exit+0x18>
     722:	4798      	blx	r3
     724:	4620      	mov	r0, r4
     726:	f001 fe35 	bl	2394 <_exit>
     72a:	bf00      	nop
     72c:	000014ad 	.word	0x000014ad
     730:	00004060 	.word	0x00004060

00000734 <__libc_fini_array>:
     734:	b538      	push	{r3, r4, r5, lr}
     736:	4c0a      	ldr	r4, [pc, #40]	; (760 <__libc_fini_array+0x2c>)
     738:	4d0a      	ldr	r5, [pc, #40]	; (764 <__libc_fini_array+0x30>)
     73a:	1b64      	subs	r4, r4, r5
     73c:	10a4      	asrs	r4, r4, #2
     73e:	d00a      	beq.n	756 <__libc_fini_array+0x22>
     740:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
     744:	3b01      	subs	r3, #1
     746:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     74a:	3c01      	subs	r4, #1
     74c:	f855 3904 	ldr.w	r3, [r5], #-4
     750:	4798      	blx	r3
     752:	2c00      	cmp	r4, #0
     754:	d1f9      	bne.n	74a <__libc_fini_array+0x16>
     756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     75a:	f003 bf61 	b.w	4620 <_fini>
     75e:	bf00      	nop
     760:	0000463c 	.word	0x0000463c
     764:	00004638 	.word	0x00004638

00000768 <_fiprintf_r>:
     768:	b40c      	push	{r2, r3}
     76a:	b500      	push	{lr}
     76c:	b083      	sub	sp, #12
     76e:	ab04      	add	r3, sp, #16
     770:	f853 2b04 	ldr.w	r2, [r3], #4
     774:	9301      	str	r3, [sp, #4]
     776:	f000 fa1b 	bl	bb0 <_vfiprintf_r>
     77a:	b003      	add	sp, #12
     77c:	f85d eb04 	ldr.w	lr, [sp], #4
     780:	b002      	add	sp, #8
     782:	4770      	bx	lr

00000784 <fiprintf>:
     784:	b40e      	push	{r1, r2, r3}
     786:	b510      	push	{r4, lr}
     788:	b083      	sub	sp, #12
     78a:	ab05      	add	r3, sp, #20
     78c:	4c06      	ldr	r4, [pc, #24]	; (7a8 <fiprintf+0x24>)
     78e:	f853 2b04 	ldr.w	r2, [r3], #4
     792:	9301      	str	r3, [sp, #4]
     794:	4601      	mov	r1, r0
     796:	6820      	ldr	r0, [r4, #0]
     798:	f000 fa0a 	bl	bb0 <_vfiprintf_r>
     79c:	b003      	add	sp, #12
     79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     7a2:	b003      	add	sp, #12
     7a4:	4770      	bx	lr
     7a6:	bf00      	nop
     7a8:	1fff0000 	.word	0x1fff0000

000007ac <__libc_init_array>:
     7ac:	b570      	push	{r4, r5, r6, lr}
     7ae:	4e0f      	ldr	r6, [pc, #60]	; (7ec <__libc_init_array+0x40>)
     7b0:	4d0f      	ldr	r5, [pc, #60]	; (7f0 <__libc_init_array+0x44>)
     7b2:	1b76      	subs	r6, r6, r5
     7b4:	10b6      	asrs	r6, r6, #2
     7b6:	bf18      	it	ne
     7b8:	2400      	movne	r4, #0
     7ba:	d005      	beq.n	7c8 <__libc_init_array+0x1c>
     7bc:	3401      	adds	r4, #1
     7be:	f855 3b04 	ldr.w	r3, [r5], #4
     7c2:	4798      	blx	r3
     7c4:	42a6      	cmp	r6, r4
     7c6:	d1f9      	bne.n	7bc <__libc_init_array+0x10>
     7c8:	4e0a      	ldr	r6, [pc, #40]	; (7f4 <__libc_init_array+0x48>)
     7ca:	4d0b      	ldr	r5, [pc, #44]	; (7f8 <__libc_init_array+0x4c>)
     7cc:	1b76      	subs	r6, r6, r5
     7ce:	f003 ff21 	bl	4614 <_init>
     7d2:	10b6      	asrs	r6, r6, #2
     7d4:	bf18      	it	ne
     7d6:	2400      	movne	r4, #0
     7d8:	d006      	beq.n	7e8 <__libc_init_array+0x3c>
     7da:	3401      	adds	r4, #1
     7dc:	f855 3b04 	ldr.w	r3, [r5], #4
     7e0:	4798      	blx	r3
     7e2:	42a6      	cmp	r6, r4
     7e4:	d1f9      	bne.n	7da <__libc_init_array+0x2e>
     7e6:	bd70      	pop	{r4, r5, r6, pc}
     7e8:	bd70      	pop	{r4, r5, r6, pc}
     7ea:	bf00      	nop
     7ec:	00004634 	.word	0x00004634
     7f0:	00004634 	.word	0x00004634
     7f4:	00004638 	.word	0x00004638
     7f8:	00004634 	.word	0x00004634

000007fc <malloc>:
     7fc:	4b02      	ldr	r3, [pc, #8]	; (808 <malloc+0xc>)
     7fe:	4601      	mov	r1, r0
     800:	6818      	ldr	r0, [r3, #0]
     802:	f000 b93b 	b.w	a7c <_malloc_r>
     806:	bf00      	nop
     808:	1fff0000 	.word	0x1fff0000

0000080c <free>:
     80c:	4b02      	ldr	r3, [pc, #8]	; (818 <free+0xc>)
     80e:	4601      	mov	r1, r0
     810:	6818      	ldr	r0, [r3, #0]
     812:	f000 b8eb 	b.w	9ec <_free_r>
     816:	bf00      	nop
     818:	1fff0000 	.word	0x1fff0000

0000081c <memcpy>:
     81c:	4684      	mov	ip, r0
     81e:	ea41 0300 	orr.w	r3, r1, r0
     822:	f013 0303 	ands.w	r3, r3, #3
     826:	d16d      	bne.n	904 <memcpy+0xe8>
     828:	3a40      	subs	r2, #64	; 0x40
     82a:	d341      	bcc.n	8b0 <memcpy+0x94>
     82c:	f851 3b04 	ldr.w	r3, [r1], #4
     830:	f840 3b04 	str.w	r3, [r0], #4
     834:	f851 3b04 	ldr.w	r3, [r1], #4
     838:	f840 3b04 	str.w	r3, [r0], #4
     83c:	f851 3b04 	ldr.w	r3, [r1], #4
     840:	f840 3b04 	str.w	r3, [r0], #4
     844:	f851 3b04 	ldr.w	r3, [r1], #4
     848:	f840 3b04 	str.w	r3, [r0], #4
     84c:	f851 3b04 	ldr.w	r3, [r1], #4
     850:	f840 3b04 	str.w	r3, [r0], #4
     854:	f851 3b04 	ldr.w	r3, [r1], #4
     858:	f840 3b04 	str.w	r3, [r0], #4
     85c:	f851 3b04 	ldr.w	r3, [r1], #4
     860:	f840 3b04 	str.w	r3, [r0], #4
     864:	f851 3b04 	ldr.w	r3, [r1], #4
     868:	f840 3b04 	str.w	r3, [r0], #4
     86c:	f851 3b04 	ldr.w	r3, [r1], #4
     870:	f840 3b04 	str.w	r3, [r0], #4
     874:	f851 3b04 	ldr.w	r3, [r1], #4
     878:	f840 3b04 	str.w	r3, [r0], #4
     87c:	f851 3b04 	ldr.w	r3, [r1], #4
     880:	f840 3b04 	str.w	r3, [r0], #4
     884:	f851 3b04 	ldr.w	r3, [r1], #4
     888:	f840 3b04 	str.w	r3, [r0], #4
     88c:	f851 3b04 	ldr.w	r3, [r1], #4
     890:	f840 3b04 	str.w	r3, [r0], #4
     894:	f851 3b04 	ldr.w	r3, [r1], #4
     898:	f840 3b04 	str.w	r3, [r0], #4
     89c:	f851 3b04 	ldr.w	r3, [r1], #4
     8a0:	f840 3b04 	str.w	r3, [r0], #4
     8a4:	f851 3b04 	ldr.w	r3, [r1], #4
     8a8:	f840 3b04 	str.w	r3, [r0], #4
     8ac:	3a40      	subs	r2, #64	; 0x40
     8ae:	d2bd      	bcs.n	82c <memcpy+0x10>
     8b0:	3230      	adds	r2, #48	; 0x30
     8b2:	d311      	bcc.n	8d8 <memcpy+0xbc>
     8b4:	f851 3b04 	ldr.w	r3, [r1], #4
     8b8:	f840 3b04 	str.w	r3, [r0], #4
     8bc:	f851 3b04 	ldr.w	r3, [r1], #4
     8c0:	f840 3b04 	str.w	r3, [r0], #4
     8c4:	f851 3b04 	ldr.w	r3, [r1], #4
     8c8:	f840 3b04 	str.w	r3, [r0], #4
     8cc:	f851 3b04 	ldr.w	r3, [r1], #4
     8d0:	f840 3b04 	str.w	r3, [r0], #4
     8d4:	3a10      	subs	r2, #16
     8d6:	d2ed      	bcs.n	8b4 <memcpy+0x98>
     8d8:	320c      	adds	r2, #12
     8da:	d305      	bcc.n	8e8 <memcpy+0xcc>
     8dc:	f851 3b04 	ldr.w	r3, [r1], #4
     8e0:	f840 3b04 	str.w	r3, [r0], #4
     8e4:	3a04      	subs	r2, #4
     8e6:	d2f9      	bcs.n	8dc <memcpy+0xc0>
     8e8:	3204      	adds	r2, #4
     8ea:	d008      	beq.n	8fe <memcpy+0xe2>
     8ec:	07d2      	lsls	r2, r2, #31
     8ee:	bf1c      	itt	ne
     8f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     8f4:	f800 3b01 	strbne.w	r3, [r0], #1
     8f8:	d301      	bcc.n	8fe <memcpy+0xe2>
     8fa:	880b      	ldrh	r3, [r1, #0]
     8fc:	8003      	strh	r3, [r0, #0]
     8fe:	4660      	mov	r0, ip
     900:	4770      	bx	lr
     902:	bf00      	nop
     904:	2a08      	cmp	r2, #8
     906:	d313      	bcc.n	930 <memcpy+0x114>
     908:	078b      	lsls	r3, r1, #30
     90a:	d08d      	beq.n	828 <memcpy+0xc>
     90c:	f010 0303 	ands.w	r3, r0, #3
     910:	d08a      	beq.n	828 <memcpy+0xc>
     912:	f1c3 0304 	rsb	r3, r3, #4
     916:	1ad2      	subs	r2, r2, r3
     918:	07db      	lsls	r3, r3, #31
     91a:	bf1c      	itt	ne
     91c:	f811 3b01 	ldrbne.w	r3, [r1], #1
     920:	f800 3b01 	strbne.w	r3, [r0], #1
     924:	d380      	bcc.n	828 <memcpy+0xc>
     926:	f831 3b02 	ldrh.w	r3, [r1], #2
     92a:	f820 3b02 	strh.w	r3, [r0], #2
     92e:	e77b      	b.n	828 <memcpy+0xc>
     930:	3a04      	subs	r2, #4
     932:	d3d9      	bcc.n	8e8 <memcpy+0xcc>
     934:	3a01      	subs	r2, #1
     936:	f811 3b01 	ldrb.w	r3, [r1], #1
     93a:	f800 3b01 	strb.w	r3, [r0], #1
     93e:	d2f9      	bcs.n	934 <memcpy+0x118>
     940:	780b      	ldrb	r3, [r1, #0]
     942:	7003      	strb	r3, [r0, #0]
     944:	784b      	ldrb	r3, [r1, #1]
     946:	7043      	strb	r3, [r0, #1]
     948:	788b      	ldrb	r3, [r1, #2]
     94a:	7083      	strb	r3, [r0, #2]
     94c:	4660      	mov	r0, ip
     94e:	4770      	bx	lr

00000950 <memset>:
     950:	b470      	push	{r4, r5, r6}
     952:	0786      	lsls	r6, r0, #30
     954:	d046      	beq.n	9e4 <memset+0x94>
     956:	1e54      	subs	r4, r2, #1
     958:	2a00      	cmp	r2, #0
     95a:	d041      	beq.n	9e0 <memset+0x90>
     95c:	b2ca      	uxtb	r2, r1
     95e:	4603      	mov	r3, r0
     960:	e002      	b.n	968 <memset+0x18>
     962:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
     966:	d33b      	bcc.n	9e0 <memset+0x90>
     968:	f803 2b01 	strb.w	r2, [r3], #1
     96c:	079d      	lsls	r5, r3, #30
     96e:	d1f8      	bne.n	962 <memset+0x12>
     970:	2c03      	cmp	r4, #3
     972:	d92e      	bls.n	9d2 <memset+0x82>
     974:	b2cd      	uxtb	r5, r1
     976:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
     97a:	2c0f      	cmp	r4, #15
     97c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
     980:	d919      	bls.n	9b6 <memset+0x66>
     982:	f103 0210 	add.w	r2, r3, #16
     986:	4626      	mov	r6, r4
     988:	3e10      	subs	r6, #16
     98a:	2e0f      	cmp	r6, #15
     98c:	f842 5c10 	str.w	r5, [r2, #-16]
     990:	f842 5c0c 	str.w	r5, [r2, #-12]
     994:	f842 5c08 	str.w	r5, [r2, #-8]
     998:	f842 5c04 	str.w	r5, [r2, #-4]
     99c:	f102 0210 	add.w	r2, r2, #16
     9a0:	d8f2      	bhi.n	988 <memset+0x38>
     9a2:	f1a4 0210 	sub.w	r2, r4, #16
     9a6:	f022 020f 	bic.w	r2, r2, #15
     9aa:	f004 040f 	and.w	r4, r4, #15
     9ae:	3210      	adds	r2, #16
     9b0:	2c03      	cmp	r4, #3
     9b2:	4413      	add	r3, r2
     9b4:	d90d      	bls.n	9d2 <memset+0x82>
     9b6:	461e      	mov	r6, r3
     9b8:	4622      	mov	r2, r4
     9ba:	3a04      	subs	r2, #4
     9bc:	2a03      	cmp	r2, #3
     9be:	f846 5b04 	str.w	r5, [r6], #4
     9c2:	d8fa      	bhi.n	9ba <memset+0x6a>
     9c4:	1f22      	subs	r2, r4, #4
     9c6:	f022 0203 	bic.w	r2, r2, #3
     9ca:	3204      	adds	r2, #4
     9cc:	4413      	add	r3, r2
     9ce:	f004 0403 	and.w	r4, r4, #3
     9d2:	b12c      	cbz	r4, 9e0 <memset+0x90>
     9d4:	b2c9      	uxtb	r1, r1
     9d6:	441c      	add	r4, r3
     9d8:	f803 1b01 	strb.w	r1, [r3], #1
     9dc:	429c      	cmp	r4, r3
     9de:	d1fb      	bne.n	9d8 <memset+0x88>
     9e0:	bc70      	pop	{r4, r5, r6}
     9e2:	4770      	bx	lr
     9e4:	4614      	mov	r4, r2
     9e6:	4603      	mov	r3, r0
     9e8:	e7c2      	b.n	970 <memset+0x20>
     9ea:	bf00      	nop

000009ec <_free_r>:
     9ec:	b191      	cbz	r1, a14 <_free_r+0x28>
     9ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
     9f2:	3904      	subs	r1, #4
     9f4:	2b00      	cmp	r3, #0
     9f6:	bfb8      	it	lt
     9f8:	18c9      	addlt	r1, r1, r3
     9fa:	4b1f      	ldr	r3, [pc, #124]	; (a78 <_free_r+0x8c>)
     9fc:	681a      	ldr	r2, [r3, #0]
     9fe:	b1fa      	cbz	r2, a40 <_free_r+0x54>
     a00:	428a      	cmp	r2, r1
     a02:	b430      	push	{r4, r5}
     a04:	d90a      	bls.n	a1c <_free_r+0x30>
     a06:	6808      	ldr	r0, [r1, #0]
     a08:	180c      	adds	r4, r1, r0
     a0a:	42a2      	cmp	r2, r4
     a0c:	d026      	beq.n	a5c <_free_r+0x70>
     a0e:	604a      	str	r2, [r1, #4]
     a10:	6019      	str	r1, [r3, #0]
     a12:	bc30      	pop	{r4, r5}
     a14:	4770      	bx	lr
     a16:	428b      	cmp	r3, r1
     a18:	d803      	bhi.n	a22 <_free_r+0x36>
     a1a:	461a      	mov	r2, r3
     a1c:	6853      	ldr	r3, [r2, #4]
     a1e:	2b00      	cmp	r3, #0
     a20:	d1f9      	bne.n	a16 <_free_r+0x2a>
     a22:	6814      	ldr	r4, [r2, #0]
     a24:	1915      	adds	r5, r2, r4
     a26:	428d      	cmp	r5, r1
     a28:	d00d      	beq.n	a46 <_free_r+0x5a>
     a2a:	d806      	bhi.n	a3a <_free_r+0x4e>
     a2c:	6808      	ldr	r0, [r1, #0]
     a2e:	180c      	adds	r4, r1, r0
     a30:	429c      	cmp	r4, r3
     a32:	d019      	beq.n	a68 <_free_r+0x7c>
     a34:	604b      	str	r3, [r1, #4]
     a36:	6051      	str	r1, [r2, #4]
     a38:	e7eb      	b.n	a12 <_free_r+0x26>
     a3a:	230c      	movs	r3, #12
     a3c:	6003      	str	r3, [r0, #0]
     a3e:	e7e8      	b.n	a12 <_free_r+0x26>
     a40:	604a      	str	r2, [r1, #4]
     a42:	6019      	str	r1, [r3, #0]
     a44:	4770      	bx	lr
     a46:	6809      	ldr	r1, [r1, #0]
     a48:	440c      	add	r4, r1
     a4a:	1911      	adds	r1, r2, r4
     a4c:	4299      	cmp	r1, r3
     a4e:	6014      	str	r4, [r2, #0]
     a50:	d1df      	bne.n	a12 <_free_r+0x26>
     a52:	cb0a      	ldmia	r3, {r1, r3}
     a54:	440c      	add	r4, r1
     a56:	6053      	str	r3, [r2, #4]
     a58:	6014      	str	r4, [r2, #0]
     a5a:	e7da      	b.n	a12 <_free_r+0x26>
     a5c:	6814      	ldr	r4, [r2, #0]
     a5e:	6852      	ldr	r2, [r2, #4]
     a60:	604a      	str	r2, [r1, #4]
     a62:	4420      	add	r0, r4
     a64:	6008      	str	r0, [r1, #0]
     a66:	e7d3      	b.n	a10 <_free_r+0x24>
     a68:	681c      	ldr	r4, [r3, #0]
     a6a:	685b      	ldr	r3, [r3, #4]
     a6c:	604b      	str	r3, [r1, #4]
     a6e:	4420      	add	r0, r4
     a70:	6008      	str	r0, [r1, #0]
     a72:	6051      	str	r1, [r2, #4]
     a74:	e7cd      	b.n	a12 <_free_r+0x26>
     a76:	bf00      	nop
     a78:	1fff0198 	.word	0x1fff0198

00000a7c <_malloc_r>:
     a7c:	b570      	push	{r4, r5, r6, lr}
     a7e:	1ccc      	adds	r4, r1, #3
     a80:	f024 0403 	bic.w	r4, r4, #3
     a84:	3408      	adds	r4, #8
     a86:	2c0c      	cmp	r4, #12
     a88:	bf38      	it	cc
     a8a:	240c      	movcc	r4, #12
     a8c:	2c00      	cmp	r4, #0
     a8e:	4606      	mov	r6, r0
     a90:	db3b      	blt.n	b0a <_malloc_r+0x8e>
     a92:	42a1      	cmp	r1, r4
     a94:	d839      	bhi.n	b0a <_malloc_r+0x8e>
     a96:	4d27      	ldr	r5, [pc, #156]	; (b34 <_malloc_r+0xb8>)
     a98:	6829      	ldr	r1, [r5, #0]
     a9a:	b151      	cbz	r1, ab2 <_malloc_r+0x36>
     a9c:	680a      	ldr	r2, [r1, #0]
     a9e:	1b12      	subs	r2, r2, r4
     aa0:	d404      	bmi.n	aac <_malloc_r+0x30>
     aa2:	e036      	b.n	b12 <_malloc_r+0x96>
     aa4:	681a      	ldr	r2, [r3, #0]
     aa6:	1b12      	subs	r2, r2, r4
     aa8:	d51a      	bpl.n	ae0 <_malloc_r+0x64>
     aaa:	4619      	mov	r1, r3
     aac:	684b      	ldr	r3, [r1, #4]
     aae:	2b00      	cmp	r3, #0
     ab0:	d1f8      	bne.n	aa4 <_malloc_r+0x28>
     ab2:	6869      	ldr	r1, [r5, #4]
     ab4:	2900      	cmp	r1, #0
     ab6:	d037      	beq.n	b28 <_malloc_r+0xac>
     ab8:	4621      	mov	r1, r4
     aba:	4630      	mov	r0, r6
     abc:	f000 fba0 	bl	1200 <_sbrk_r>
     ac0:	1c43      	adds	r3, r0, #1
     ac2:	d022      	beq.n	b0a <_malloc_r+0x8e>
     ac4:	1cc3      	adds	r3, r0, #3
     ac6:	f023 0503 	bic.w	r5, r3, #3
     aca:	42a8      	cmp	r0, r5
     acc:	d005      	beq.n	ada <_malloc_r+0x5e>
     ace:	1a29      	subs	r1, r5, r0
     ad0:	4630      	mov	r0, r6
     ad2:	f000 fb95 	bl	1200 <_sbrk_r>
     ad6:	3001      	adds	r0, #1
     ad8:	d017      	beq.n	b0a <_malloc_r+0x8e>
     ada:	602c      	str	r4, [r5, #0]
     adc:	462b      	mov	r3, r5
     ade:	e004      	b.n	aea <_malloc_r+0x6e>
     ae0:	2a0b      	cmp	r2, #11
     ae2:	d90d      	bls.n	b00 <_malloc_r+0x84>
     ae4:	601a      	str	r2, [r3, #0]
     ae6:	4413      	add	r3, r2
     ae8:	601c      	str	r4, [r3, #0]
     aea:	f103 000b 	add.w	r0, r3, #11
     aee:	f020 0007 	bic.w	r0, r0, #7
     af2:	1d1a      	adds	r2, r3, #4
     af4:	1a82      	subs	r2, r0, r2
     af6:	d002      	beq.n	afe <_malloc_r+0x82>
     af8:	4251      	negs	r1, r2
     afa:	5099      	str	r1, [r3, r2]
     afc:	bd70      	pop	{r4, r5, r6, pc}
     afe:	bd70      	pop	{r4, r5, r6, pc}
     b00:	428b      	cmp	r3, r1
     b02:	d00e      	beq.n	b22 <_malloc_r+0xa6>
     b04:	685a      	ldr	r2, [r3, #4]
     b06:	604a      	str	r2, [r1, #4]
     b08:	e7ef      	b.n	aea <_malloc_r+0x6e>
     b0a:	230c      	movs	r3, #12
     b0c:	6033      	str	r3, [r6, #0]
     b0e:	2000      	movs	r0, #0
     b10:	bd70      	pop	{r4, r5, r6, pc}
     b12:	2a0b      	cmp	r2, #11
     b14:	d803      	bhi.n	b1e <_malloc_r+0xa2>
     b16:	684a      	ldr	r2, [r1, #4]
     b18:	460b      	mov	r3, r1
     b1a:	602a      	str	r2, [r5, #0]
     b1c:	e7e5      	b.n	aea <_malloc_r+0x6e>
     b1e:	460b      	mov	r3, r1
     b20:	e7e0      	b.n	ae4 <_malloc_r+0x68>
     b22:	460a      	mov	r2, r1
     b24:	460b      	mov	r3, r1
     b26:	e7f8      	b.n	b1a <_malloc_r+0x9e>
     b28:	4630      	mov	r0, r6
     b2a:	f000 fb69 	bl	1200 <_sbrk_r>
     b2e:	6068      	str	r0, [r5, #4]
     b30:	e7c2      	b.n	ab8 <_malloc_r+0x3c>
     b32:	bf00      	nop
     b34:	1fff0198 	.word	0x1fff0198

00000b38 <__sfputc_r>:
     b38:	6893      	ldr	r3, [r2, #8]
     b3a:	3b01      	subs	r3, #1
     b3c:	2b00      	cmp	r3, #0
     b3e:	b410      	push	{r4}
     b40:	6093      	str	r3, [r2, #8]
     b42:	db07      	blt.n	b54 <__sfputc_r+0x1c>
     b44:	b2cc      	uxtb	r4, r1
     b46:	6813      	ldr	r3, [r2, #0]
     b48:	1c58      	adds	r0, r3, #1
     b4a:	6010      	str	r0, [r2, #0]
     b4c:	7019      	strb	r1, [r3, #0]
     b4e:	4620      	mov	r0, r4
     b50:	bc10      	pop	{r4}
     b52:	4770      	bx	lr
     b54:	6994      	ldr	r4, [r2, #24]
     b56:	42a3      	cmp	r3, r4
     b58:	db02      	blt.n	b60 <__sfputc_r+0x28>
     b5a:	b2cc      	uxtb	r4, r1
     b5c:	2c0a      	cmp	r4, #10
     b5e:	d1f2      	bne.n	b46 <__sfputc_r+0xe>
     b60:	bc10      	pop	{r4}
     b62:	f000 bb5f 	b.w	1224 <__swbuf_r>
     b66:	bf00      	nop

00000b68 <__sfputs_r>:
     b68:	b193      	cbz	r3, b90 <__sfputs_r+0x28>
     b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b6c:	4614      	mov	r4, r2
     b6e:	460f      	mov	r7, r1
     b70:	4606      	mov	r6, r0
     b72:	18d5      	adds	r5, r2, r3
     b74:	e001      	b.n	b7a <__sfputs_r+0x12>
     b76:	42ac      	cmp	r4, r5
     b78:	d008      	beq.n	b8c <__sfputs_r+0x24>
     b7a:	463a      	mov	r2, r7
     b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
     b80:	4630      	mov	r0, r6
     b82:	f7ff ffd9 	bl	b38 <__sfputc_r>
     b86:	1c43      	adds	r3, r0, #1
     b88:	d1f5      	bne.n	b76 <__sfputs_r+0xe>
     b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b8c:	2000      	movs	r0, #0
     b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b90:	2000      	movs	r0, #0
     b92:	4770      	bx	lr

00000b94 <__sprint_r>:
     b94:	6893      	ldr	r3, [r2, #8]
     b96:	b510      	push	{r4, lr}
     b98:	4614      	mov	r4, r2
     b9a:	b913      	cbnz	r3, ba2 <__sprint_r+0xe>
     b9c:	6053      	str	r3, [r2, #4]
     b9e:	4618      	mov	r0, r3
     ba0:	bd10      	pop	{r4, pc}
     ba2:	f000 fef5 	bl	1990 <__sfvwrite_r>
     ba6:	2300      	movs	r3, #0
     ba8:	60a3      	str	r3, [r4, #8]
     baa:	6063      	str	r3, [r4, #4]
     bac:	bd10      	pop	{r4, pc}
     bae:	bf00      	nop

00000bb0 <_vfiprintf_r>:
     bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bb4:	b09d      	sub	sp, #116	; 0x74
     bb6:	4689      	mov	r9, r1
     bb8:	4614      	mov	r4, r2
     bba:	9303      	str	r3, [sp, #12]
     bbc:	4682      	mov	sl, r0
     bbe:	b118      	cbz	r0, bc8 <_vfiprintf_r+0x18>
     bc0:	6983      	ldr	r3, [r0, #24]
     bc2:	2b00      	cmp	r3, #0
     bc4:	f000 810a 	beq.w	ddc <_vfiprintf_r+0x22c>
     bc8:	4b8a      	ldr	r3, [pc, #552]	; (df4 <_vfiprintf_r+0x244>)
     bca:	4599      	cmp	r9, r3
     bcc:	f000 810c 	beq.w	de8 <_vfiprintf_r+0x238>
     bd0:	4b89      	ldr	r3, [pc, #548]	; (df8 <_vfiprintf_r+0x248>)
     bd2:	4599      	cmp	r9, r3
     bd4:	f000 810b 	beq.w	dee <_vfiprintf_r+0x23e>
     bd8:	4b88      	ldr	r3, [pc, #544]	; (dfc <_vfiprintf_r+0x24c>)
     bda:	4599      	cmp	r9, r3
     bdc:	bf08      	it	eq
     bde:	f8da 900c 	ldreq.w	r9, [sl, #12]
     be2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
     be6:	0718      	lsls	r0, r3, #28
     be8:	f140 80ee 	bpl.w	dc8 <_vfiprintf_r+0x218>
     bec:	f8d9 3010 	ldr.w	r3, [r9, #16]
     bf0:	2b00      	cmp	r3, #0
     bf2:	f000 80e9 	beq.w	dc8 <_vfiprintf_r+0x218>
     bf6:	2330      	movs	r3, #48	; 0x30
     bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
     bfc:	7823      	ldrb	r3, [r4, #0]
     bfe:	4e80      	ldr	r6, [pc, #512]	; (e00 <_vfiprintf_r+0x250>)
     c00:	2100      	movs	r1, #0
     c02:	2220      	movs	r2, #32
     c04:	9109      	str	r1, [sp, #36]	; 0x24
     c06:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
     c0a:	2701      	movs	r7, #1
     c0c:	2b00      	cmp	r3, #0
     c0e:	f000 8084 	beq.w	d1a <_vfiprintf_r+0x16a>
     c12:	2b25      	cmp	r3, #37	; 0x25
     c14:	4625      	mov	r5, r4
     c16:	d103      	bne.n	c20 <_vfiprintf_r+0x70>
     c18:	e017      	b.n	c4a <_vfiprintf_r+0x9a>
     c1a:	2b25      	cmp	r3, #37	; 0x25
     c1c:	f000 8085 	beq.w	d2a <_vfiprintf_r+0x17a>
     c20:	f815 3f01 	ldrb.w	r3, [r5, #1]!
     c24:	2b00      	cmp	r3, #0
     c26:	d1f8      	bne.n	c1a <_vfiprintf_r+0x6a>
     c28:	ebb5 0b04 	subs.w	fp, r5, r4
     c2c:	d075      	beq.n	d1a <_vfiprintf_r+0x16a>
     c2e:	4622      	mov	r2, r4
     c30:	465b      	mov	r3, fp
     c32:	4649      	mov	r1, r9
     c34:	4650      	mov	r0, sl
     c36:	f7ff ff97 	bl	b68 <__sfputs_r>
     c3a:	3001      	adds	r0, #1
     c3c:	d06d      	beq.n	d1a <_vfiprintf_r+0x16a>
     c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c40:	782a      	ldrb	r2, [r5, #0]
     c42:	445b      	add	r3, fp
     c44:	9309      	str	r3, [sp, #36]	; 0x24
     c46:	2a00      	cmp	r2, #0
     c48:	d067      	beq.n	d1a <_vfiprintf_r+0x16a>
     c4a:	2300      	movs	r3, #0
     c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     c50:	3501      	adds	r5, #1
     c52:	9304      	str	r3, [sp, #16]
     c54:	9307      	str	r3, [sp, #28]
     c56:	9306      	str	r3, [sp, #24]
     c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
     c5c:	931a      	str	r3, [sp, #104]	; 0x68
     c5e:	9205      	str	r2, [sp, #20]
     c60:	e004      	b.n	c6c <_vfiprintf_r+0xbc>
     c62:	9a04      	ldr	r2, [sp, #16]
     c64:	fa07 f303 	lsl.w	r3, r7, r3
     c68:	4313      	orrs	r3, r2
     c6a:	9304      	str	r3, [sp, #16]
     c6c:	7829      	ldrb	r1, [r5, #0]
     c6e:	2205      	movs	r2, #5
     c70:	4630      	mov	r0, r6
     c72:	f001 f8cd 	bl	1e10 <memchr>
     c76:	462c      	mov	r4, r5
     c78:	1b83      	subs	r3, r0, r6
     c7a:	3501      	adds	r5, #1
     c7c:	2800      	cmp	r0, #0
     c7e:	d1f0      	bne.n	c62 <_vfiprintf_r+0xb2>
     c80:	9b04      	ldr	r3, [sp, #16]
     c82:	06d9      	lsls	r1, r3, #27
     c84:	bf44      	itt	mi
     c86:	2220      	movmi	r2, #32
     c88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     c8c:	7821      	ldrb	r1, [r4, #0]
     c8e:	071a      	lsls	r2, r3, #28
     c90:	bf44      	itt	mi
     c92:	222b      	movmi	r2, #43	; 0x2b
     c94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     c98:	292a      	cmp	r1, #42	; 0x2a
     c9a:	d069      	beq.n	d70 <_vfiprintf_r+0x1c0>
     c9c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
     ca0:	2a09      	cmp	r2, #9
     ca2:	d80b      	bhi.n	cbc <_vfiprintf_r+0x10c>
     ca4:	9b07      	ldr	r3, [sp, #28]
     ca6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     caa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     cae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     cb2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
     cb6:	2a09      	cmp	r2, #9
     cb8:	d9f5      	bls.n	ca6 <_vfiprintf_r+0xf6>
     cba:	9307      	str	r3, [sp, #28]
     cbc:	292e      	cmp	r1, #46	; 0x2e
     cbe:	d03f      	beq.n	d40 <_vfiprintf_r+0x190>
     cc0:	4d50      	ldr	r5, [pc, #320]	; (e04 <_vfiprintf_r+0x254>)
     cc2:	2203      	movs	r2, #3
     cc4:	4628      	mov	r0, r5
     cc6:	f001 f8a3 	bl	1e10 <memchr>
     cca:	b138      	cbz	r0, cdc <_vfiprintf_r+0x12c>
     ccc:	9b04      	ldr	r3, [sp, #16]
     cce:	1b40      	subs	r0, r0, r5
     cd0:	2240      	movs	r2, #64	; 0x40
     cd2:	fa02 f000 	lsl.w	r0, r2, r0
     cd6:	4303      	orrs	r3, r0
     cd8:	3401      	adds	r4, #1
     cda:	9304      	str	r3, [sp, #16]
     cdc:	7821      	ldrb	r1, [r4, #0]
     cde:	484a      	ldr	r0, [pc, #296]	; (e08 <_vfiprintf_r+0x258>)
     ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
     ce4:	2206      	movs	r2, #6
     ce6:	3401      	adds	r4, #1
     ce8:	f001 f892 	bl	1e10 <memchr>
     cec:	2800      	cmp	r0, #0
     cee:	d049      	beq.n	d84 <_vfiprintf_r+0x1d4>
     cf0:	4b46      	ldr	r3, [pc, #280]	; (e0c <_vfiprintf_r+0x25c>)
     cf2:	b1f3      	cbz	r3, d32 <_vfiprintf_r+0x182>
     cf4:	ab03      	add	r3, sp, #12
     cf6:	9300      	str	r3, [sp, #0]
     cf8:	464a      	mov	r2, r9
     cfa:	4b45      	ldr	r3, [pc, #276]	; (e10 <_vfiprintf_r+0x260>)
     cfc:	a904      	add	r1, sp, #16
     cfe:	4650      	mov	r0, sl
     d00:	f3af 8000 	nop.w
     d04:	4680      	mov	r8, r0
     d06:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
     d0a:	d006      	beq.n	d1a <_vfiprintf_r+0x16a>
     d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d0e:	4443      	add	r3, r8
     d10:	9309      	str	r3, [sp, #36]	; 0x24
     d12:	7823      	ldrb	r3, [r4, #0]
     d14:	2b00      	cmp	r3, #0
     d16:	f47f af7c 	bne.w	c12 <_vfiprintf_r+0x62>
     d1a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
     d1e:	065b      	lsls	r3, r3, #25
     d20:	d459      	bmi.n	dd6 <_vfiprintf_r+0x226>
     d22:	9809      	ldr	r0, [sp, #36]	; 0x24
     d24:	b01d      	add	sp, #116	; 0x74
     d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d2a:	ebb5 0b04 	subs.w	fp, r5, r4
     d2e:	d08c      	beq.n	c4a <_vfiprintf_r+0x9a>
     d30:	e77d      	b.n	c2e <_vfiprintf_r+0x7e>
     d32:	9b03      	ldr	r3, [sp, #12]
     d34:	3307      	adds	r3, #7
     d36:	f023 0307 	bic.w	r3, r3, #7
     d3a:	3308      	adds	r3, #8
     d3c:	9303      	str	r3, [sp, #12]
     d3e:	e7e5      	b.n	d0c <_vfiprintf_r+0x15c>
     d40:	7861      	ldrb	r1, [r4, #1]
     d42:	292a      	cmp	r1, #42	; 0x2a
     d44:	f104 0001 	add.w	r0, r4, #1
     d48:	d026      	beq.n	d98 <_vfiprintf_r+0x1e8>
     d4a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
     d4e:	2300      	movs	r3, #0
     d50:	2a09      	cmp	r2, #9
     d52:	9305      	str	r3, [sp, #20]
     d54:	4604      	mov	r4, r0
     d56:	d8b3      	bhi.n	cc0 <_vfiprintf_r+0x110>
     d58:	f814 1f01 	ldrb.w	r1, [r4, #1]!
     d5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     d60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     d64:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
     d68:	2a09      	cmp	r2, #9
     d6a:	d9f5      	bls.n	d58 <_vfiprintf_r+0x1a8>
     d6c:	9305      	str	r3, [sp, #20]
     d6e:	e7a7      	b.n	cc0 <_vfiprintf_r+0x110>
     d70:	9a03      	ldr	r2, [sp, #12]
     d72:	6811      	ldr	r1, [r2, #0]
     d74:	3204      	adds	r2, #4
     d76:	2900      	cmp	r1, #0
     d78:	9203      	str	r2, [sp, #12]
     d7a:	db1f      	blt.n	dbc <_vfiprintf_r+0x20c>
     d7c:	9107      	str	r1, [sp, #28]
     d7e:	7861      	ldrb	r1, [r4, #1]
     d80:	3401      	adds	r4, #1
     d82:	e79b      	b.n	cbc <_vfiprintf_r+0x10c>
     d84:	ab03      	add	r3, sp, #12
     d86:	9300      	str	r3, [sp, #0]
     d88:	464a      	mov	r2, r9
     d8a:	4b21      	ldr	r3, [pc, #132]	; (e10 <_vfiprintf_r+0x260>)
     d8c:	a904      	add	r1, sp, #16
     d8e:	4650      	mov	r0, sl
     d90:	f000 f8e6 	bl	f60 <_printf_i>
     d94:	4680      	mov	r8, r0
     d96:	e7b6      	b.n	d06 <_vfiprintf_r+0x156>
     d98:	9b03      	ldr	r3, [sp, #12]
     d9a:	681a      	ldr	r2, [r3, #0]
     d9c:	9205      	str	r2, [sp, #20]
     d9e:	2a00      	cmp	r2, #0
     da0:	f103 0304 	add.w	r3, r3, #4
     da4:	9303      	str	r3, [sp, #12]
     da6:	bfb8      	it	lt
     da8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
     dac:	f104 0302 	add.w	r3, r4, #2
     db0:	bfae      	itee	ge
     db2:	78a1      	ldrbge	r1, [r4, #2]
     db4:	78a1      	ldrblt	r1, [r4, #2]
     db6:	9205      	strlt	r2, [sp, #20]
     db8:	461c      	mov	r4, r3
     dba:	e781      	b.n	cc0 <_vfiprintf_r+0x110>
     dbc:	4249      	negs	r1, r1
     dbe:	f043 0302 	orr.w	r3, r3, #2
     dc2:	9107      	str	r1, [sp, #28]
     dc4:	9304      	str	r3, [sp, #16]
     dc6:	e7da      	b.n	d7e <_vfiprintf_r+0x1ce>
     dc8:	4649      	mov	r1, r9
     dca:	4650      	mov	r0, sl
     dcc:	f000 fa8c 	bl	12e8 <__swsetup_r>
     dd0:	2800      	cmp	r0, #0
     dd2:	f43f af10 	beq.w	bf6 <_vfiprintf_r+0x46>
     dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     dda:	e7a3      	b.n	d24 <_vfiprintf_r+0x174>
     ddc:	f000 fdb8 	bl	1950 <__sinit>
     de0:	4b04      	ldr	r3, [pc, #16]	; (df4 <_vfiprintf_r+0x244>)
     de2:	4599      	cmp	r9, r3
     de4:	f47f aef4 	bne.w	bd0 <_vfiprintf_r+0x20>
     de8:	f8da 9004 	ldr.w	r9, [sl, #4]
     dec:	e6f9      	b.n	be2 <_vfiprintf_r+0x32>
     dee:	f8da 9008 	ldr.w	r9, [sl, #8]
     df2:	e6f6      	b.n	be2 <_vfiprintf_r+0x32>
     df4:	000040a4 	.word	0x000040a4
     df8:	00004084 	.word	0x00004084
     dfc:	00004064 	.word	0x00004064
     e00:	000045d8 	.word	0x000045d8
     e04:	000045e0 	.word	0x000045e0
     e08:	000045e4 	.word	0x000045e4
     e0c:	00000000 	.word	0x00000000
     e10:	00000b69 	.word	0x00000b69

00000e14 <vfiprintf>:
     e14:	b410      	push	{r4}
     e16:	4c04      	ldr	r4, [pc, #16]	; (e28 <vfiprintf+0x14>)
     e18:	4613      	mov	r3, r2
     e1a:	460a      	mov	r2, r1
     e1c:	4601      	mov	r1, r0
     e1e:	6820      	ldr	r0, [r4, #0]
     e20:	bc10      	pop	{r4}
     e22:	f7ff bec5 	b.w	bb0 <_vfiprintf_r>
     e26:	bf00      	nop
     e28:	1fff0000 	.word	0x1fff0000

00000e2c <_printf_common>:
     e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e30:	460c      	mov	r4, r1
     e32:	4691      	mov	r9, r2
     e34:	690a      	ldr	r2, [r1, #16]
     e36:	6889      	ldr	r1, [r1, #8]
     e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
     e3c:	428a      	cmp	r2, r1
     e3e:	bfb8      	it	lt
     e40:	460a      	movlt	r2, r1
     e42:	f8c9 2000 	str.w	r2, [r9]
     e46:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
     e4a:	4606      	mov	r6, r0
     e4c:	461f      	mov	r7, r3
     e4e:	b111      	cbz	r1, e56 <_printf_common+0x2a>
     e50:	3201      	adds	r2, #1
     e52:	f8c9 2000 	str.w	r2, [r9]
     e56:	6823      	ldr	r3, [r4, #0]
     e58:	0699      	lsls	r1, r3, #26
     e5a:	d55d      	bpl.n	f18 <_printf_common+0xec>
     e5c:	f8d9 2000 	ldr.w	r2, [r9]
     e60:	3202      	adds	r2, #2
     e62:	f8c9 2000 	str.w	r2, [r9]
     e66:	6823      	ldr	r3, [r4, #0]
     e68:	f013 0f06 	tst.w	r3, #6
     e6c:	4619      	mov	r1, r3
     e6e:	d11d      	bne.n	eac <_printf_common+0x80>
     e70:	68e1      	ldr	r1, [r4, #12]
     e72:	1a8a      	subs	r2, r1, r2
     e74:	2a00      	cmp	r2, #0
     e76:	bfd8      	it	le
     e78:	4619      	movle	r1, r3
     e7a:	dd17      	ble.n	eac <_printf_common+0x80>
     e7c:	f104 0a19 	add.w	sl, r4, #25
     e80:	2500      	movs	r5, #0
     e82:	e005      	b.n	e90 <_printf_common+0x64>
     e84:	68e3      	ldr	r3, [r4, #12]
     e86:	f8d9 2000 	ldr.w	r2, [r9]
     e8a:	1a9b      	subs	r3, r3, r2
     e8c:	42ab      	cmp	r3, r5
     e8e:	dd0c      	ble.n	eaa <_printf_common+0x7e>
     e90:	2301      	movs	r3, #1
     e92:	4652      	mov	r2, sl
     e94:	4639      	mov	r1, r7
     e96:	4630      	mov	r0, r6
     e98:	47c0      	blx	r8
     e9a:	3001      	adds	r0, #1
     e9c:	f105 0501 	add.w	r5, r5, #1
     ea0:	d1f0      	bne.n	e84 <_printf_common+0x58>
     ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     eaa:	6821      	ldr	r1, [r4, #0]
     eac:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
     eb0:	3300      	adds	r3, #0
     eb2:	bf18      	it	ne
     eb4:	2301      	movne	r3, #1
     eb6:	068a      	lsls	r2, r1, #26
     eb8:	d50a      	bpl.n	ed0 <_printf_common+0xa4>
     eba:	18e1      	adds	r1, r4, r3
     ebc:	1c5a      	adds	r2, r3, #1
     ebe:	2030      	movs	r0, #48	; 0x30
     ec0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
     ec4:	4422      	add	r2, r4
     ec6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
     eca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
     ece:	3302      	adds	r3, #2
     ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
     ed4:	4639      	mov	r1, r7
     ed6:	4630      	mov	r0, r6
     ed8:	47c0      	blx	r8
     eda:	3001      	adds	r0, #1
     edc:	d0e1      	beq.n	ea2 <_printf_common+0x76>
     ede:	6823      	ldr	r3, [r4, #0]
     ee0:	f003 0306 	and.w	r3, r3, #6
     ee4:	2b04      	cmp	r3, #4
     ee6:	d029      	beq.n	f3c <_printf_common+0x110>
     ee8:	68a3      	ldr	r3, [r4, #8]
     eea:	6922      	ldr	r2, [r4, #16]
     eec:	4293      	cmp	r3, r2
     eee:	bfc8      	it	gt
     ef0:	f04f 0900 	movgt.w	r9, #0
     ef4:	dd30      	ble.n	f58 <_printf_common+0x12c>
     ef6:	1a9b      	subs	r3, r3, r2
     ef8:	4499      	add	r9, r3
     efa:	341a      	adds	r4, #26
     efc:	2500      	movs	r5, #0
     efe:	e001      	b.n	f04 <_printf_common+0xd8>
     f00:	454d      	cmp	r5, r9
     f02:	d029      	beq.n	f58 <_printf_common+0x12c>
     f04:	2301      	movs	r3, #1
     f06:	4622      	mov	r2, r4
     f08:	4639      	mov	r1, r7
     f0a:	4630      	mov	r0, r6
     f0c:	47c0      	blx	r8
     f0e:	3001      	adds	r0, #1
     f10:	f105 0501 	add.w	r5, r5, #1
     f14:	d1f4      	bne.n	f00 <_printf_common+0xd4>
     f16:	e7c4      	b.n	ea2 <_printf_common+0x76>
     f18:	f013 0f06 	tst.w	r3, #6
     f1c:	d108      	bne.n	f30 <_printf_common+0x104>
     f1e:	68e1      	ldr	r1, [r4, #12]
     f20:	f8d9 2000 	ldr.w	r2, [r9]
     f24:	1a8a      	subs	r2, r1, r2
     f26:	2a00      	cmp	r2, #0
     f28:	bfd8      	it	le
     f2a:	4619      	movle	r1, r3
     f2c:	dca6      	bgt.n	e7c <_printf_common+0x50>
     f2e:	e7bd      	b.n	eac <_printf_common+0x80>
     f30:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
     f34:	3300      	adds	r3, #0
     f36:	bf18      	it	ne
     f38:	2301      	movne	r3, #1
     f3a:	e7c9      	b.n	ed0 <_printf_common+0xa4>
     f3c:	f8d9 1000 	ldr.w	r1, [r9]
     f40:	68e0      	ldr	r0, [r4, #12]
     f42:	68a3      	ldr	r3, [r4, #8]
     f44:	6922      	ldr	r2, [r4, #16]
     f46:	eba0 0901 	sub.w	r9, r0, r1
     f4a:	4293      	cmp	r3, r2
     f4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
     f50:	dcd1      	bgt.n	ef6 <_printf_common+0xca>
     f52:	f1b9 0f00 	cmp.w	r9, #0
     f56:	d1d0      	bne.n	efa <_printf_common+0xce>
     f58:	2000      	movs	r0, #0
     f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f5e:	bf00      	nop

00000f60 <_printf_i>:
     f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f64:	460c      	mov	r4, r1
     f66:	7e09      	ldrb	r1, [r1, #24]
     f68:	b085      	sub	sp, #20
     f6a:	296e      	cmp	r1, #110	; 0x6e
     f6c:	4606      	mov	r6, r0
     f6e:	4617      	mov	r7, r2
     f70:	980c      	ldr	r0, [sp, #48]	; 0x30
     f72:	4698      	mov	r8, r3
     f74:	f104 0c43 	add.w	ip, r4, #67	; 0x43
     f78:	d055      	beq.n	1026 <_printf_i+0xc6>
     f7a:	d80f      	bhi.n	f9c <_printf_i+0x3c>
     f7c:	2963      	cmp	r1, #99	; 0x63
     f7e:	f000 811b 	beq.w	11b8 <_printf_i+0x258>
     f82:	f200 80d6 	bhi.w	1132 <_printf_i+0x1d2>
     f86:	2900      	cmp	r1, #0
     f88:	d05c      	beq.n	1044 <_printf_i+0xe4>
     f8a:	2958      	cmp	r1, #88	; 0x58
     f8c:	f040 80e8 	bne.w	1160 <_printf_i+0x200>
     f90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
     f94:	6822      	ldr	r2, [r4, #0]
     f96:	f8df e260 	ldr.w	lr, [pc, #608]	; 11f8 <_printf_i+0x298>
     f9a:	e013      	b.n	fc4 <_printf_i+0x64>
     f9c:	2973      	cmp	r1, #115	; 0x73
     f9e:	f000 80fd 	beq.w	119c <_printf_i+0x23c>
     fa2:	f200 8089 	bhi.w	10b8 <_printf_i+0x158>
     fa6:	296f      	cmp	r1, #111	; 0x6f
     fa8:	f000 80e4 	beq.w	1174 <_printf_i+0x214>
     fac:	2970      	cmp	r1, #112	; 0x70
     fae:	f040 80d7 	bne.w	1160 <_printf_i+0x200>
     fb2:	6822      	ldr	r2, [r4, #0]
     fb4:	f042 0220 	orr.w	r2, r2, #32
     fb8:	6022      	str	r2, [r4, #0]
     fba:	2378      	movs	r3, #120	; 0x78
     fbc:	f8df e23c 	ldr.w	lr, [pc, #572]	; 11fc <_printf_i+0x29c>
     fc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
     fc4:	6803      	ldr	r3, [r0, #0]
     fc6:	0615      	lsls	r5, r2, #24
     fc8:	f103 0104 	add.w	r1, r3, #4
     fcc:	f100 80ff 	bmi.w	11ce <_printf_i+0x26e>
     fd0:	0655      	lsls	r5, r2, #25
     fd2:	bf4b      	itete	mi
     fd4:	881b      	ldrhmi	r3, [r3, #0]
     fd6:	681b      	ldrpl	r3, [r3, #0]
     fd8:	6001      	strmi	r1, [r0, #0]
     fda:	6001      	strpl	r1, [r0, #0]
     fdc:	07d0      	lsls	r0, r2, #31
     fde:	bf44      	itt	mi
     fe0:	f042 0220 	orrmi.w	r2, r2, #32
     fe4:	6022      	strmi	r2, [r4, #0]
     fe6:	2b00      	cmp	r3, #0
     fe8:	f040 8095 	bne.w	1116 <_printf_i+0x1b6>
     fec:	6822      	ldr	r2, [r4, #0]
     fee:	f022 0220 	bic.w	r2, r2, #32
     ff2:	6022      	str	r2, [r4, #0]
     ff4:	2110      	movs	r1, #16
     ff6:	2200      	movs	r2, #0
     ff8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
     ffc:	6860      	ldr	r0, [r4, #4]
     ffe:	60a0      	str	r0, [r4, #8]
    1000:	2800      	cmp	r0, #0
    1002:	f2c0 808d 	blt.w	1120 <_printf_i+0x1c0>
    1006:	6822      	ldr	r2, [r4, #0]
    1008:	f022 0204 	bic.w	r2, r2, #4
    100c:	6022      	str	r2, [r4, #0]
    100e:	2b00      	cmp	r3, #0
    1010:	d167      	bne.n	10e2 <_printf_i+0x182>
    1012:	2800      	cmp	r0, #0
    1014:	f040 8086 	bne.w	1124 <_printf_i+0x1c4>
    1018:	4665      	mov	r5, ip
    101a:	2908      	cmp	r1, #8
    101c:	d06f      	beq.n	10fe <_printf_i+0x19e>
    101e:	ebac 0305 	sub.w	r3, ip, r5
    1022:	6123      	str	r3, [r4, #16]
    1024:	e011      	b.n	104a <_printf_i+0xea>
    1026:	6823      	ldr	r3, [r4, #0]
    1028:	061a      	lsls	r2, r3, #24
    102a:	f100 80d3 	bmi.w	11d4 <_printf_i+0x274>
    102e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1032:	6803      	ldr	r3, [r0, #0]
    1034:	6962      	ldr	r2, [r4, #20]
    1036:	f103 0104 	add.w	r1, r3, #4
    103a:	6001      	str	r1, [r0, #0]
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	bf14      	ite	ne
    1040:	801a      	strhne	r2, [r3, #0]
    1042:	601a      	streq	r2, [r3, #0]
    1044:	2300      	movs	r3, #0
    1046:	4665      	mov	r5, ip
    1048:	6123      	str	r3, [r4, #16]
    104a:	f8cd 8000 	str.w	r8, [sp]
    104e:	463b      	mov	r3, r7
    1050:	aa03      	add	r2, sp, #12
    1052:	4621      	mov	r1, r4
    1054:	4630      	mov	r0, r6
    1056:	f7ff fee9 	bl	e2c <_printf_common>
    105a:	3001      	adds	r0, #1
    105c:	d021      	beq.n	10a2 <_printf_i+0x142>
    105e:	462a      	mov	r2, r5
    1060:	6923      	ldr	r3, [r4, #16]
    1062:	4639      	mov	r1, r7
    1064:	4630      	mov	r0, r6
    1066:	47c0      	blx	r8
    1068:	3001      	adds	r0, #1
    106a:	d01a      	beq.n	10a2 <_printf_i+0x142>
    106c:	6823      	ldr	r3, [r4, #0]
    106e:	68e0      	ldr	r0, [r4, #12]
    1070:	f013 0f02 	tst.w	r3, #2
    1074:	9b03      	ldr	r3, [sp, #12]
    1076:	d019      	beq.n	10ac <_printf_i+0x14c>
    1078:	1ac2      	subs	r2, r0, r3
    107a:	2a00      	cmp	r2, #0
    107c:	dd16      	ble.n	10ac <_printf_i+0x14c>
    107e:	f104 0919 	add.w	r9, r4, #25
    1082:	2500      	movs	r5, #0
    1084:	e004      	b.n	1090 <_printf_i+0x130>
    1086:	68e0      	ldr	r0, [r4, #12]
    1088:	9b03      	ldr	r3, [sp, #12]
    108a:	1ac2      	subs	r2, r0, r3
    108c:	42aa      	cmp	r2, r5
    108e:	dd0d      	ble.n	10ac <_printf_i+0x14c>
    1090:	2301      	movs	r3, #1
    1092:	464a      	mov	r2, r9
    1094:	4639      	mov	r1, r7
    1096:	4630      	mov	r0, r6
    1098:	47c0      	blx	r8
    109a:	3001      	adds	r0, #1
    109c:	f105 0501 	add.w	r5, r5, #1
    10a0:	d1f1      	bne.n	1086 <_printf_i+0x126>
    10a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10a6:	b005      	add	sp, #20
    10a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    10ac:	4298      	cmp	r0, r3
    10ae:	bfb8      	it	lt
    10b0:	4618      	movlt	r0, r3
    10b2:	b005      	add	sp, #20
    10b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    10b8:	2975      	cmp	r1, #117	; 0x75
    10ba:	d05b      	beq.n	1174 <_printf_i+0x214>
    10bc:	2978      	cmp	r1, #120	; 0x78
    10be:	d14f      	bne.n	1160 <_printf_i+0x200>
    10c0:	6822      	ldr	r2, [r4, #0]
    10c2:	e77a      	b.n	fba <_printf_i+0x5a>
    10c4:	6861      	ldr	r1, [r4, #4]
    10c6:	60a1      	str	r1, [r4, #8]
    10c8:	202d      	movs	r0, #45	; 0x2d
    10ca:	2900      	cmp	r1, #0
    10cc:	f1c3 0300 	rsb	r3, r3, #0
    10d0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    10d4:	db21      	blt.n	111a <_printf_i+0x1ba>
    10d6:	f022 0204 	bic.w	r2, r2, #4
    10da:	f8df e11c 	ldr.w	lr, [pc, #284]	; 11f8 <_printf_i+0x298>
    10de:	6022      	str	r2, [r4, #0]
    10e0:	210a      	movs	r1, #10
    10e2:	4665      	mov	r5, ip
    10e4:	fbb3 f2f1 	udiv	r2, r3, r1
    10e8:	fb01 3012 	mls	r0, r1, r2, r3
    10ec:	4613      	mov	r3, r2
    10ee:	f81e 2000 	ldrb.w	r2, [lr, r0]
    10f2:	f805 2d01 	strb.w	r2, [r5, #-1]!
    10f6:	2b00      	cmp	r3, #0
    10f8:	d1f4      	bne.n	10e4 <_printf_i+0x184>
    10fa:	2908      	cmp	r1, #8
    10fc:	d18f      	bne.n	101e <_printf_i+0xbe>
    10fe:	6823      	ldr	r3, [r4, #0]
    1100:	07d9      	lsls	r1, r3, #31
    1102:	d58c      	bpl.n	101e <_printf_i+0xbe>
    1104:	6862      	ldr	r2, [r4, #4]
    1106:	6923      	ldr	r3, [r4, #16]
    1108:	429a      	cmp	r2, r3
    110a:	dc88      	bgt.n	101e <_printf_i+0xbe>
    110c:	2330      	movs	r3, #48	; 0x30
    110e:	f805 3c01 	strb.w	r3, [r5, #-1]
    1112:	3d01      	subs	r5, #1
    1114:	e783      	b.n	101e <_printf_i+0xbe>
    1116:	2110      	movs	r1, #16
    1118:	e76d      	b.n	ff6 <_printf_i+0x96>
    111a:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 11f8 <_printf_i+0x298>
    111e:	210a      	movs	r1, #10
    1120:	2b00      	cmp	r3, #0
    1122:	d1de      	bne.n	10e2 <_printf_i+0x182>
    1124:	f89e 3000 	ldrb.w	r3, [lr]
    1128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    112c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1130:	e773      	b.n	101a <_printf_i+0xba>
    1132:	2964      	cmp	r1, #100	; 0x64
    1134:	d001      	beq.n	113a <_printf_i+0x1da>
    1136:	2969      	cmp	r1, #105	; 0x69
    1138:	d112      	bne.n	1160 <_printf_i+0x200>
    113a:	6822      	ldr	r2, [r4, #0]
    113c:	6803      	ldr	r3, [r0, #0]
    113e:	0615      	lsls	r5, r2, #24
    1140:	f103 0104 	add.w	r1, r3, #4
    1144:	d452      	bmi.n	11ec <_printf_i+0x28c>
    1146:	0655      	lsls	r5, r2, #25
    1148:	bf4b      	itete	mi
    114a:	f9b3 3000 	ldrshmi.w	r3, [r3]
    114e:	681b      	ldrpl	r3, [r3, #0]
    1150:	6001      	strmi	r1, [r0, #0]
    1152:	6001      	strpl	r1, [r0, #0]
    1154:	2b00      	cmp	r3, #0
    1156:	dbb5      	blt.n	10c4 <_printf_i+0x164>
    1158:	f8df e09c 	ldr.w	lr, [pc, #156]	; 11f8 <_printf_i+0x298>
    115c:	210a      	movs	r1, #10
    115e:	e74d      	b.n	ffc <_printf_i+0x9c>
    1160:	2301      	movs	r3, #1
    1162:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    1166:	6123      	str	r3, [r4, #16]
    1168:	f104 0542 	add.w	r5, r4, #66	; 0x42
    116c:	2300      	movs	r3, #0
    116e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    1172:	e76a      	b.n	104a <_printf_i+0xea>
    1174:	6823      	ldr	r3, [r4, #0]
    1176:	061a      	lsls	r2, r3, #24
    1178:	d433      	bmi.n	11e2 <_printf_i+0x282>
    117a:	f013 0f40 	tst.w	r3, #64	; 0x40
    117e:	6803      	ldr	r3, [r0, #0]
    1180:	f103 0204 	add.w	r2, r3, #4
    1184:	bf15      	itete	ne
    1186:	881b      	ldrhne	r3, [r3, #0]
    1188:	681b      	ldreq	r3, [r3, #0]
    118a:	6002      	strne	r2, [r0, #0]
    118c:	6002      	streq	r2, [r0, #0]
    118e:	296f      	cmp	r1, #111	; 0x6f
    1190:	bf14      	ite	ne
    1192:	210a      	movne	r1, #10
    1194:	2108      	moveq	r1, #8
    1196:	f8df e060 	ldr.w	lr, [pc, #96]	; 11f8 <_printf_i+0x298>
    119a:	e72c      	b.n	ff6 <_printf_i+0x96>
    119c:	6803      	ldr	r3, [r0, #0]
    119e:	6862      	ldr	r2, [r4, #4]
    11a0:	1d19      	adds	r1, r3, #4
    11a2:	6001      	str	r1, [r0, #0]
    11a4:	681d      	ldr	r5, [r3, #0]
    11a6:	2100      	movs	r1, #0
    11a8:	4628      	mov	r0, r5
    11aa:	f000 fe31 	bl	1e10 <memchr>
    11ae:	b300      	cbz	r0, 11f2 <_printf_i+0x292>
    11b0:	1b40      	subs	r0, r0, r5
    11b2:	6060      	str	r0, [r4, #4]
    11b4:	6120      	str	r0, [r4, #16]
    11b6:	e7d9      	b.n	116c <_printf_i+0x20c>
    11b8:	6803      	ldr	r3, [r0, #0]
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	1d19      	adds	r1, r3, #4
    11be:	2301      	movs	r3, #1
    11c0:	6001      	str	r1, [r0, #0]
    11c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    11c6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    11ca:	6123      	str	r3, [r4, #16]
    11cc:	e7ce      	b.n	116c <_printf_i+0x20c>
    11ce:	6001      	str	r1, [r0, #0]
    11d0:	681b      	ldr	r3, [r3, #0]
    11d2:	e703      	b.n	fdc <_printf_i+0x7c>
    11d4:	6803      	ldr	r3, [r0, #0]
    11d6:	6962      	ldr	r2, [r4, #20]
    11d8:	1d19      	adds	r1, r3, #4
    11da:	6001      	str	r1, [r0, #0]
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	601a      	str	r2, [r3, #0]
    11e0:	e730      	b.n	1044 <_printf_i+0xe4>
    11e2:	6803      	ldr	r3, [r0, #0]
    11e4:	1d1a      	adds	r2, r3, #4
    11e6:	6002      	str	r2, [r0, #0]
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	e7d0      	b.n	118e <_printf_i+0x22e>
    11ec:	6001      	str	r1, [r0, #0]
    11ee:	681b      	ldr	r3, [r3, #0]
    11f0:	e7b0      	b.n	1154 <_printf_i+0x1f4>
    11f2:	6860      	ldr	r0, [r4, #4]
    11f4:	e7de      	b.n	11b4 <_printf_i+0x254>
    11f6:	bf00      	nop
    11f8:	000045ec 	.word	0x000045ec
    11fc:	00004600 	.word	0x00004600

00001200 <_sbrk_r>:
    1200:	b538      	push	{r3, r4, r5, lr}
    1202:	4c07      	ldr	r4, [pc, #28]	; (1220 <_sbrk_r+0x20>)
    1204:	2300      	movs	r3, #0
    1206:	4605      	mov	r5, r0
    1208:	4608      	mov	r0, r1
    120a:	6023      	str	r3, [r4, #0]
    120c:	f001 f8ac 	bl	2368 <_sbrk>
    1210:	1c43      	adds	r3, r0, #1
    1212:	d000      	beq.n	1216 <_sbrk_r+0x16>
    1214:	bd38      	pop	{r3, r4, r5, pc}
    1216:	6823      	ldr	r3, [r4, #0]
    1218:	2b00      	cmp	r3, #0
    121a:	d0fb      	beq.n	1214 <_sbrk_r+0x14>
    121c:	602b      	str	r3, [r5, #0]
    121e:	bd38      	pop	{r3, r4, r5, pc}
    1220:	1fff04fc 	.word	0x1fff04fc

00001224 <__swbuf_r>:
    1224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1226:	460d      	mov	r5, r1
    1228:	4614      	mov	r4, r2
    122a:	4606      	mov	r6, r0
    122c:	b110      	cbz	r0, 1234 <__swbuf_r+0x10>
    122e:	6983      	ldr	r3, [r0, #24]
    1230:	2b00      	cmp	r3, #0
    1232:	d042      	beq.n	12ba <__swbuf_r+0x96>
    1234:	4b25      	ldr	r3, [pc, #148]	; (12cc <__swbuf_r+0xa8>)
    1236:	429c      	cmp	r4, r3
    1238:	d044      	beq.n	12c4 <__swbuf_r+0xa0>
    123a:	4b25      	ldr	r3, [pc, #148]	; (12d0 <__swbuf_r+0xac>)
    123c:	429c      	cmp	r4, r3
    123e:	d043      	beq.n	12c8 <__swbuf_r+0xa4>
    1240:	4b24      	ldr	r3, [pc, #144]	; (12d4 <__swbuf_r+0xb0>)
    1242:	429c      	cmp	r4, r3
    1244:	bf08      	it	eq
    1246:	68f4      	ldreq	r4, [r6, #12]
    1248:	89a3      	ldrh	r3, [r4, #12]
    124a:	69a2      	ldr	r2, [r4, #24]
    124c:	60a2      	str	r2, [r4, #8]
    124e:	071a      	lsls	r2, r3, #28
    1250:	d522      	bpl.n	1298 <__swbuf_r+0x74>
    1252:	6923      	ldr	r3, [r4, #16]
    1254:	b303      	cbz	r3, 1298 <__swbuf_r+0x74>
    1256:	6822      	ldr	r2, [r4, #0]
    1258:	6961      	ldr	r1, [r4, #20]
    125a:	1ad3      	subs	r3, r2, r3
    125c:	b2ed      	uxtb	r5, r5
    125e:	428b      	cmp	r3, r1
    1260:	462f      	mov	r7, r5
    1262:	da21      	bge.n	12a8 <__swbuf_r+0x84>
    1264:	3301      	adds	r3, #1
    1266:	68a1      	ldr	r1, [r4, #8]
    1268:	1c50      	adds	r0, r2, #1
    126a:	3901      	subs	r1, #1
    126c:	60a1      	str	r1, [r4, #8]
    126e:	6020      	str	r0, [r4, #0]
    1270:	7015      	strb	r5, [r2, #0]
    1272:	6962      	ldr	r2, [r4, #20]
    1274:	429a      	cmp	r2, r3
    1276:	d006      	beq.n	1286 <__swbuf_r+0x62>
    1278:	89a3      	ldrh	r3, [r4, #12]
    127a:	07db      	lsls	r3, r3, #31
    127c:	d501      	bpl.n	1282 <__swbuf_r+0x5e>
    127e:	2d0a      	cmp	r5, #10
    1280:	d001      	beq.n	1286 <__swbuf_r+0x62>
    1282:	4638      	mov	r0, r7
    1284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1286:	4621      	mov	r1, r4
    1288:	4630      	mov	r0, r6
    128a:	f000 fa25 	bl	16d8 <_fflush_r>
    128e:	2800      	cmp	r0, #0
    1290:	d0f7      	beq.n	1282 <__swbuf_r+0x5e>
    1292:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1296:	e7f4      	b.n	1282 <__swbuf_r+0x5e>
    1298:	4621      	mov	r1, r4
    129a:	4630      	mov	r0, r6
    129c:	f000 f824 	bl	12e8 <__swsetup_r>
    12a0:	2800      	cmp	r0, #0
    12a2:	d1f6      	bne.n	1292 <__swbuf_r+0x6e>
    12a4:	6923      	ldr	r3, [r4, #16]
    12a6:	e7d6      	b.n	1256 <__swbuf_r+0x32>
    12a8:	4621      	mov	r1, r4
    12aa:	4630      	mov	r0, r6
    12ac:	f000 fa14 	bl	16d8 <_fflush_r>
    12b0:	2800      	cmp	r0, #0
    12b2:	d1ee      	bne.n	1292 <__swbuf_r+0x6e>
    12b4:	6822      	ldr	r2, [r4, #0]
    12b6:	2301      	movs	r3, #1
    12b8:	e7d5      	b.n	1266 <__swbuf_r+0x42>
    12ba:	f000 fb49 	bl	1950 <__sinit>
    12be:	4b03      	ldr	r3, [pc, #12]	; (12cc <__swbuf_r+0xa8>)
    12c0:	429c      	cmp	r4, r3
    12c2:	d1ba      	bne.n	123a <__swbuf_r+0x16>
    12c4:	6874      	ldr	r4, [r6, #4]
    12c6:	e7bf      	b.n	1248 <__swbuf_r+0x24>
    12c8:	68b4      	ldr	r4, [r6, #8]
    12ca:	e7bd      	b.n	1248 <__swbuf_r+0x24>
    12cc:	000040a4 	.word	0x000040a4
    12d0:	00004084 	.word	0x00004084
    12d4:	00004064 	.word	0x00004064

000012d8 <__swbuf>:
    12d8:	4b02      	ldr	r3, [pc, #8]	; (12e4 <__swbuf+0xc>)
    12da:	460a      	mov	r2, r1
    12dc:	4601      	mov	r1, r0
    12de:	6818      	ldr	r0, [r3, #0]
    12e0:	f7ff bfa0 	b.w	1224 <__swbuf_r>
    12e4:	1fff0000 	.word	0x1fff0000

000012e8 <__swsetup_r>:
    12e8:	4b38      	ldr	r3, [pc, #224]	; (13cc <__swsetup_r+0xe4>)
    12ea:	b570      	push	{r4, r5, r6, lr}
    12ec:	681d      	ldr	r5, [r3, #0]
    12ee:	4606      	mov	r6, r0
    12f0:	460c      	mov	r4, r1
    12f2:	b115      	cbz	r5, 12fa <__swsetup_r+0x12>
    12f4:	69ab      	ldr	r3, [r5, #24]
    12f6:	2b00      	cmp	r3, #0
    12f8:	d042      	beq.n	1380 <__swsetup_r+0x98>
    12fa:	4b35      	ldr	r3, [pc, #212]	; (13d0 <__swsetup_r+0xe8>)
    12fc:	429c      	cmp	r4, r3
    12fe:	d045      	beq.n	138c <__swsetup_r+0xa4>
    1300:	4b34      	ldr	r3, [pc, #208]	; (13d4 <__swsetup_r+0xec>)
    1302:	429c      	cmp	r4, r3
    1304:	d058      	beq.n	13b8 <__swsetup_r+0xd0>
    1306:	4b34      	ldr	r3, [pc, #208]	; (13d8 <__swsetup_r+0xf0>)
    1308:	429c      	cmp	r4, r3
    130a:	bf08      	it	eq
    130c:	68ec      	ldreq	r4, [r5, #12]
    130e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    1312:	b293      	uxth	r3, r2
    1314:	0719      	lsls	r1, r3, #28
    1316:	d50c      	bpl.n	1332 <__swsetup_r+0x4a>
    1318:	6920      	ldr	r0, [r4, #16]
    131a:	b1a8      	cbz	r0, 1348 <__swsetup_r+0x60>
    131c:	f013 0201 	ands.w	r2, r3, #1
    1320:	d01e      	beq.n	1360 <__swsetup_r+0x78>
    1322:	6963      	ldr	r3, [r4, #20]
    1324:	2200      	movs	r2, #0
    1326:	425b      	negs	r3, r3
    1328:	61a3      	str	r3, [r4, #24]
    132a:	60a2      	str	r2, [r4, #8]
    132c:	b1f0      	cbz	r0, 136c <__swsetup_r+0x84>
    132e:	2000      	movs	r0, #0
    1330:	bd70      	pop	{r4, r5, r6, pc}
    1332:	06dd      	lsls	r5, r3, #27
    1334:	d542      	bpl.n	13bc <__swsetup_r+0xd4>
    1336:	0758      	lsls	r0, r3, #29
    1338:	d42a      	bmi.n	1390 <__swsetup_r+0xa8>
    133a:	6920      	ldr	r0, [r4, #16]
    133c:	f042 0308 	orr.w	r3, r2, #8
    1340:	81a3      	strh	r3, [r4, #12]
    1342:	b29b      	uxth	r3, r3
    1344:	2800      	cmp	r0, #0
    1346:	d1e9      	bne.n	131c <__swsetup_r+0x34>
    1348:	f403 7220 	and.w	r2, r3, #640	; 0x280
    134c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1350:	d0e4      	beq.n	131c <__swsetup_r+0x34>
    1352:	4630      	mov	r0, r6
    1354:	4621      	mov	r1, r4
    1356:	f000 fd11 	bl	1d7c <__smakebuf_r>
    135a:	89a3      	ldrh	r3, [r4, #12]
    135c:	6920      	ldr	r0, [r4, #16]
    135e:	e7dd      	b.n	131c <__swsetup_r+0x34>
    1360:	0799      	lsls	r1, r3, #30
    1362:	bf58      	it	pl
    1364:	6962      	ldrpl	r2, [r4, #20]
    1366:	60a2      	str	r2, [r4, #8]
    1368:	2800      	cmp	r0, #0
    136a:	d1e0      	bne.n	132e <__swsetup_r+0x46>
    136c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1370:	061a      	lsls	r2, r3, #24
    1372:	d5dd      	bpl.n	1330 <__swsetup_r+0x48>
    1374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1378:	81a3      	strh	r3, [r4, #12]
    137a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    137e:	bd70      	pop	{r4, r5, r6, pc}
    1380:	4628      	mov	r0, r5
    1382:	f000 fae5 	bl	1950 <__sinit>
    1386:	4b12      	ldr	r3, [pc, #72]	; (13d0 <__swsetup_r+0xe8>)
    1388:	429c      	cmp	r4, r3
    138a:	d1b9      	bne.n	1300 <__swsetup_r+0x18>
    138c:	686c      	ldr	r4, [r5, #4]
    138e:	e7be      	b.n	130e <__swsetup_r+0x26>
    1390:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1392:	b151      	cbz	r1, 13aa <__swsetup_r+0xc2>
    1394:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1398:	4299      	cmp	r1, r3
    139a:	d004      	beq.n	13a6 <__swsetup_r+0xbe>
    139c:	4630      	mov	r0, r6
    139e:	f7ff fb25 	bl	9ec <_free_r>
    13a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    13a6:	2300      	movs	r3, #0
    13a8:	6363      	str	r3, [r4, #52]	; 0x34
    13aa:	2300      	movs	r3, #0
    13ac:	6920      	ldr	r0, [r4, #16]
    13ae:	6063      	str	r3, [r4, #4]
    13b0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
    13b4:	6020      	str	r0, [r4, #0]
    13b6:	e7c1      	b.n	133c <__swsetup_r+0x54>
    13b8:	68ac      	ldr	r4, [r5, #8]
    13ba:	e7a8      	b.n	130e <__swsetup_r+0x26>
    13bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    13c0:	2309      	movs	r3, #9
    13c2:	6033      	str	r3, [r6, #0]
    13c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13c8:	81a2      	strh	r2, [r4, #12]
    13ca:	bd70      	pop	{r4, r5, r6, pc}
    13cc:	1fff0000 	.word	0x1fff0000
    13d0:	000040a4 	.word	0x000040a4
    13d4:	00004084 	.word	0x00004084
    13d8:	00004064 	.word	0x00004064

000013dc <__register_exitproc>:
    13dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13e0:	4f2e      	ldr	r7, [pc, #184]	; (149c <__register_exitproc+0xc0>)
    13e2:	683c      	ldr	r4, [r7, #0]
    13e4:	4605      	mov	r5, r0
    13e6:	4688      	mov	r8, r1
    13e8:	4691      	mov	r9, r2
    13ea:	469a      	mov	sl, r3
    13ec:	2c00      	cmp	r4, #0
    13ee:	d037      	beq.n	1460 <__register_exitproc+0x84>
    13f0:	6866      	ldr	r6, [r4, #4]
    13f2:	2e1f      	cmp	r6, #31
    13f4:	dd12      	ble.n	141c <__register_exitproc+0x40>
    13f6:	4b2a      	ldr	r3, [pc, #168]	; (14a0 <__register_exitproc+0xc4>)
    13f8:	2b00      	cmp	r3, #0
    13fa:	d04a      	beq.n	1492 <__register_exitproc+0xb6>
    13fc:	208c      	movs	r0, #140	; 0x8c
    13fe:	f7ff f9fd 	bl	7fc <malloc>
    1402:	4604      	mov	r4, r0
    1404:	2800      	cmp	r0, #0
    1406:	d044      	beq.n	1492 <__register_exitproc+0xb6>
    1408:	683b      	ldr	r3, [r7, #0]
    140a:	6003      	str	r3, [r0, #0]
    140c:	2300      	movs	r3, #0
    140e:	6038      	str	r0, [r7, #0]
    1410:	6043      	str	r3, [r0, #4]
    1412:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    1416:	bb75      	cbnz	r5, 1476 <__register_exitproc+0x9a>
    1418:	2301      	movs	r3, #1
    141a:	e014      	b.n	1446 <__register_exitproc+0x6a>
    141c:	b18d      	cbz	r5, 1442 <__register_exitproc+0x66>
    141e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    1422:	b330      	cbz	r0, 1472 <__register_exitproc+0x96>
    1424:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
    1428:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    142c:	2301      	movs	r3, #1
    142e:	40b3      	lsls	r3, r6
    1430:	eb00 0286 	add.w	r2, r0, r6, lsl #2
    1434:	431f      	orrs	r7, r3
    1436:	2d02      	cmp	r5, #2
    1438:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
    143c:	f8c2 a080 	str.w	sl, [r2, #128]	; 0x80
    1440:	d008      	beq.n	1454 <__register_exitproc+0x78>
    1442:	1c73      	adds	r3, r6, #1
    1444:	4635      	mov	r5, r6
    1446:	3502      	adds	r5, #2
    1448:	6063      	str	r3, [r4, #4]
    144a:	2000      	movs	r0, #0
    144c:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
    1450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1454:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    1458:	4313      	orrs	r3, r2
    145a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    145e:	e7f0      	b.n	1442 <__register_exitproc+0x66>
    1460:	4b10      	ldr	r3, [pc, #64]	; (14a4 <__register_exitproc+0xc8>)
    1462:	4c11      	ldr	r4, [pc, #68]	; (14a8 <__register_exitproc+0xcc>)
    1464:	603c      	str	r4, [r7, #0]
    1466:	2b00      	cmp	r3, #0
    1468:	d0c2      	beq.n	13f0 <__register_exitproc+0x14>
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    1470:	e7be      	b.n	13f0 <__register_exitproc+0x14>
    1472:	4b0b      	ldr	r3, [pc, #44]	; (14a0 <__register_exitproc+0xc4>)
    1474:	b16b      	cbz	r3, 1492 <__register_exitproc+0xb6>
    1476:	f44f 7084 	mov.w	r0, #264	; 0x108
    147a:	f7ff f9bf 	bl	7fc <malloc>
    147e:	b140      	cbz	r0, 1492 <__register_exitproc+0xb6>
    1480:	2700      	movs	r7, #0
    1482:	6866      	ldr	r6, [r4, #4]
    1484:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
    1488:	f8c0 7104 	str.w	r7, [r0, #260]	; 0x104
    148c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    1490:	e7ca      	b.n	1428 <__register_exitproc+0x4c>
    1492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    149a:	bf00      	nop
    149c:	1fff022c 	.word	0x1fff022c
    14a0:	000007fd 	.word	0x000007fd
    14a4:	00000000 	.word	0x00000000
    14a8:	1fff01a0 	.word	0x1fff01a0

000014ac <__call_exitprocs>:
    14ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b0:	b083      	sub	sp, #12
    14b2:	460f      	mov	r7, r1
    14b4:	9001      	str	r0, [sp, #4]
    14b6:	4b38      	ldr	r3, [pc, #224]	; (1598 <__call_exitprocs+0xec>)
    14b8:	f8d3 9000 	ldr.w	r9, [r3]
    14bc:	f1b9 0f00 	cmp.w	r9, #0
    14c0:	d031      	beq.n	1526 <__call_exitprocs+0x7a>
    14c2:	469b      	mov	fp, r3
    14c4:	f8d9 5004 	ldr.w	r5, [r9, #4]
    14c8:	f8d9 8088 	ldr.w	r8, [r9, #136]	; 0x88
    14cc:	1e6c      	subs	r4, r5, #1
    14ce:	d411      	bmi.n	14f4 <__call_exitprocs+0x48>
    14d0:	00ad      	lsls	r5, r5, #2
    14d2:	1d2e      	adds	r6, r5, #4
    14d4:	444e      	add	r6, r9
    14d6:	4445      	add	r5, r8
    14d8:	b347      	cbz	r7, 152c <__call_exitprocs+0x80>
    14da:	f1b8 0f00 	cmp.w	r8, #0
    14de:	d002      	beq.n	14e6 <__call_exitprocs+0x3a>
    14e0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    14e2:	429f      	cmp	r7, r3
    14e4:	d022      	beq.n	152c <__call_exitprocs+0x80>
    14e6:	3c01      	subs	r4, #1
    14e8:	1c63      	adds	r3, r4, #1
    14ea:	f1a5 0504 	sub.w	r5, r5, #4
    14ee:	f1a6 0604 	sub.w	r6, r6, #4
    14f2:	d1f1      	bne.n	14d8 <__call_exitprocs+0x2c>
    14f4:	4b29      	ldr	r3, [pc, #164]	; (159c <__call_exitprocs+0xf0>)
    14f6:	b1b3      	cbz	r3, 1526 <__call_exitprocs+0x7a>
    14f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d143      	bne.n	1588 <__call_exitprocs+0xdc>
    1500:	f8d9 3000 	ldr.w	r3, [r9]
    1504:	b17b      	cbz	r3, 1526 <__call_exitprocs+0x7a>
    1506:	f8cb 3000 	str.w	r3, [fp]
    150a:	f1b8 0f00 	cmp.w	r8, #0
    150e:	d002      	beq.n	1516 <__call_exitprocs+0x6a>
    1510:	4640      	mov	r0, r8
    1512:	f7ff f97b 	bl	80c <free>
    1516:	4648      	mov	r0, r9
    1518:	f7ff f978 	bl	80c <free>
    151c:	f8db 9000 	ldr.w	r9, [fp]
    1520:	f1b9 0f00 	cmp.w	r9, #0
    1524:	d1ce      	bne.n	14c4 <__call_exitprocs+0x18>
    1526:	b003      	add	sp, #12
    1528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    152c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    1530:	6832      	ldr	r2, [r6, #0]
    1532:	3b01      	subs	r3, #1
    1534:	42a3      	cmp	r3, r4
    1536:	bf16      	itet	ne
    1538:	2300      	movne	r3, #0
    153a:	f8c9 4004 	streq.w	r4, [r9, #4]
    153e:	6033      	strne	r3, [r6, #0]
    1540:	2a00      	cmp	r2, #0
    1542:	d0d0      	beq.n	14e6 <__call_exitprocs+0x3a>
    1544:	f8d9 a004 	ldr.w	sl, [r9, #4]
    1548:	f1b8 0f00 	cmp.w	r8, #0
    154c:	d016      	beq.n	157c <__call_exitprocs+0xd0>
    154e:	f8d8 1100 	ldr.w	r1, [r8, #256]	; 0x100
    1552:	2301      	movs	r3, #1
    1554:	40a3      	lsls	r3, r4
    1556:	420b      	tst	r3, r1
    1558:	d010      	beq.n	157c <__call_exitprocs+0xd0>
    155a:	f8d8 1104 	ldr.w	r1, [r8, #260]	; 0x104
    155e:	420b      	tst	r3, r1
    1560:	d10e      	bne.n	1580 <__call_exitprocs+0xd4>
    1562:	f855 1c04 	ldr.w	r1, [r5, #-4]
    1566:	9801      	ldr	r0, [sp, #4]
    1568:	4790      	blx	r2
    156a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    156e:	459a      	cmp	sl, r3
    1570:	d1a1      	bne.n	14b6 <__call_exitprocs+0xa>
    1572:	f8db 3000 	ldr.w	r3, [fp]
    1576:	454b      	cmp	r3, r9
    1578:	d0b5      	beq.n	14e6 <__call_exitprocs+0x3a>
    157a:	e79c      	b.n	14b6 <__call_exitprocs+0xa>
    157c:	4790      	blx	r2
    157e:	e7f4      	b.n	156a <__call_exitprocs+0xbe>
    1580:	f855 0c04 	ldr.w	r0, [r5, #-4]
    1584:	4790      	blx	r2
    1586:	e7f0      	b.n	156a <__call_exitprocs+0xbe>
    1588:	46cb      	mov	fp, r9
    158a:	f8d9 9000 	ldr.w	r9, [r9]
    158e:	f1b9 0f00 	cmp.w	r9, #0
    1592:	d197      	bne.n	14c4 <__call_exitprocs+0x18>
    1594:	e7c7      	b.n	1526 <__call_exitprocs+0x7a>
    1596:	bf00      	nop
    1598:	1fff022c 	.word	0x1fff022c
    159c:	0000080d 	.word	0x0000080d

000015a0 <abort>:
    15a0:	b508      	push	{r3, lr}
    15a2:	2006      	movs	r0, #6
    15a4:	f000 fda6 	bl	20f4 <raise>
    15a8:	2001      	movs	r0, #1
    15aa:	f000 fef3 	bl	2394 <_exit>
    15ae:	bf00      	nop

000015b0 <__sflush_r>:
    15b0:	898b      	ldrh	r3, [r1, #12]
    15b2:	071a      	lsls	r2, r3, #28
    15b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15b8:	460d      	mov	r5, r1
    15ba:	4680      	mov	r8, r0
    15bc:	d433      	bmi.n	1626 <__sflush_r+0x76>
    15be:	684a      	ldr	r2, [r1, #4]
    15c0:	2a00      	cmp	r2, #0
    15c2:	dd67      	ble.n	1694 <__sflush_r+0xe4>
    15c4:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    15c6:	2c00      	cmp	r4, #0
    15c8:	d045      	beq.n	1656 <__sflush_r+0xa6>
    15ca:	2200      	movs	r2, #0
    15cc:	f8d8 6000 	ldr.w	r6, [r8]
    15d0:	f8c8 2000 	str.w	r2, [r8]
    15d4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
    15d8:	d060      	beq.n	169c <__sflush_r+0xec>
    15da:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    15dc:	075f      	lsls	r7, r3, #29
    15de:	d505      	bpl.n	15ec <__sflush_r+0x3c>
    15e0:	6869      	ldr	r1, [r5, #4]
    15e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    15e4:	1a52      	subs	r2, r2, r1
    15e6:	b10b      	cbz	r3, 15ec <__sflush_r+0x3c>
    15e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    15ea:	1ad2      	subs	r2, r2, r3
    15ec:	2300      	movs	r3, #0
    15ee:	6a29      	ldr	r1, [r5, #32]
    15f0:	4640      	mov	r0, r8
    15f2:	47a0      	blx	r4
    15f4:	1c44      	adds	r4, r0, #1
    15f6:	d039      	beq.n	166c <__sflush_r+0xbc>
    15f8:	89ab      	ldrh	r3, [r5, #12]
    15fa:	692a      	ldr	r2, [r5, #16]
    15fc:	602a      	str	r2, [r5, #0]
    15fe:	04db      	lsls	r3, r3, #19
    1600:	f04f 0200 	mov.w	r2, #0
    1604:	606a      	str	r2, [r5, #4]
    1606:	d443      	bmi.n	1690 <__sflush_r+0xe0>
    1608:	6b69      	ldr	r1, [r5, #52]	; 0x34
    160a:	f8c8 6000 	str.w	r6, [r8]
    160e:	b311      	cbz	r1, 1656 <__sflush_r+0xa6>
    1610:	f105 0344 	add.w	r3, r5, #68	; 0x44
    1614:	4299      	cmp	r1, r3
    1616:	d002      	beq.n	161e <__sflush_r+0x6e>
    1618:	4640      	mov	r0, r8
    161a:	f7ff f9e7 	bl	9ec <_free_r>
    161e:	2000      	movs	r0, #0
    1620:	6368      	str	r0, [r5, #52]	; 0x34
    1622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1626:	690e      	ldr	r6, [r1, #16]
    1628:	b1ae      	cbz	r6, 1656 <__sflush_r+0xa6>
    162a:	680c      	ldr	r4, [r1, #0]
    162c:	600e      	str	r6, [r1, #0]
    162e:	0798      	lsls	r0, r3, #30
    1630:	bf0c      	ite	eq
    1632:	694b      	ldreq	r3, [r1, #20]
    1634:	2300      	movne	r3, #0
    1636:	1ba4      	subs	r4, r4, r6
    1638:	608b      	str	r3, [r1, #8]
    163a:	e00a      	b.n	1652 <__sflush_r+0xa2>
    163c:	4623      	mov	r3, r4
    163e:	4632      	mov	r2, r6
    1640:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    1642:	6a29      	ldr	r1, [r5, #32]
    1644:	4640      	mov	r0, r8
    1646:	47b8      	blx	r7
    1648:	2800      	cmp	r0, #0
    164a:	eba4 0400 	sub.w	r4, r4, r0
    164e:	4406      	add	r6, r0
    1650:	dd04      	ble.n	165c <__sflush_r+0xac>
    1652:	2c00      	cmp	r4, #0
    1654:	dcf2      	bgt.n	163c <__sflush_r+0x8c>
    1656:	2000      	movs	r0, #0
    1658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    165c:	89ab      	ldrh	r3, [r5, #12]
    165e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1662:	81ab      	strh	r3, [r5, #12]
    1664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    166c:	f8d8 2000 	ldr.w	r2, [r8]
    1670:	2a1d      	cmp	r2, #29
    1672:	d8f3      	bhi.n	165c <__sflush_r+0xac>
    1674:	4b17      	ldr	r3, [pc, #92]	; (16d4 <__sflush_r+0x124>)
    1676:	40d3      	lsrs	r3, r2
    1678:	43db      	mvns	r3, r3
    167a:	f013 0301 	ands.w	r3, r3, #1
    167e:	d1ed      	bne.n	165c <__sflush_r+0xac>
    1680:	89a9      	ldrh	r1, [r5, #12]
    1682:	692c      	ldr	r4, [r5, #16]
    1684:	606b      	str	r3, [r5, #4]
    1686:	04c9      	lsls	r1, r1, #19
    1688:	602c      	str	r4, [r5, #0]
    168a:	d5bd      	bpl.n	1608 <__sflush_r+0x58>
    168c:	2a00      	cmp	r2, #0
    168e:	d1bb      	bne.n	1608 <__sflush_r+0x58>
    1690:	6568      	str	r0, [r5, #84]	; 0x54
    1692:	e7b9      	b.n	1608 <__sflush_r+0x58>
    1694:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    1696:	2a00      	cmp	r2, #0
    1698:	dc94      	bgt.n	15c4 <__sflush_r+0x14>
    169a:	e7dc      	b.n	1656 <__sflush_r+0xa6>
    169c:	2301      	movs	r3, #1
    169e:	6a29      	ldr	r1, [r5, #32]
    16a0:	4640      	mov	r0, r8
    16a2:	47a0      	blx	r4
    16a4:	1c43      	adds	r3, r0, #1
    16a6:	4602      	mov	r2, r0
    16a8:	d002      	beq.n	16b0 <__sflush_r+0x100>
    16aa:	89ab      	ldrh	r3, [r5, #12]
    16ac:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    16ae:	e795      	b.n	15dc <__sflush_r+0x2c>
    16b0:	f8d8 3000 	ldr.w	r3, [r8]
    16b4:	2b00      	cmp	r3, #0
    16b6:	d0f8      	beq.n	16aa <__sflush_r+0xfa>
    16b8:	2b1d      	cmp	r3, #29
    16ba:	d001      	beq.n	16c0 <__sflush_r+0x110>
    16bc:	2b16      	cmp	r3, #22
    16be:	d102      	bne.n	16c6 <__sflush_r+0x116>
    16c0:	f8c8 6000 	str.w	r6, [r8]
    16c4:	e7c7      	b.n	1656 <__sflush_r+0xa6>
    16c6:	89ab      	ldrh	r3, [r5, #12]
    16c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    16cc:	81ab      	strh	r3, [r5, #12]
    16ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16d2:	bf00      	nop
    16d4:	20400001 	.word	0x20400001

000016d8 <_fflush_r>:
    16d8:	690b      	ldr	r3, [r1, #16]
    16da:	b333      	cbz	r3, 172a <_fflush_r+0x52>
    16dc:	b510      	push	{r4, lr}
    16de:	4604      	mov	r4, r0
    16e0:	b082      	sub	sp, #8
    16e2:	b108      	cbz	r0, 16e8 <_fflush_r+0x10>
    16e4:	6983      	ldr	r3, [r0, #24]
    16e6:	b1ab      	cbz	r3, 1714 <_fflush_r+0x3c>
    16e8:	4b11      	ldr	r3, [pc, #68]	; (1730 <_fflush_r+0x58>)
    16ea:	4299      	cmp	r1, r3
    16ec:	d019      	beq.n	1722 <_fflush_r+0x4a>
    16ee:	4b11      	ldr	r3, [pc, #68]	; (1734 <_fflush_r+0x5c>)
    16f0:	4299      	cmp	r1, r3
    16f2:	d018      	beq.n	1726 <_fflush_r+0x4e>
    16f4:	4b10      	ldr	r3, [pc, #64]	; (1738 <_fflush_r+0x60>)
    16f6:	4299      	cmp	r1, r3
    16f8:	bf08      	it	eq
    16fa:	68e1      	ldreq	r1, [r4, #12]
    16fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    1700:	b913      	cbnz	r3, 1708 <_fflush_r+0x30>
    1702:	2000      	movs	r0, #0
    1704:	b002      	add	sp, #8
    1706:	bd10      	pop	{r4, pc}
    1708:	4620      	mov	r0, r4
    170a:	b002      	add	sp, #8
    170c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1710:	f7ff bf4e 	b.w	15b0 <__sflush_r>
    1714:	9101      	str	r1, [sp, #4]
    1716:	f000 f91b 	bl	1950 <__sinit>
    171a:	9901      	ldr	r1, [sp, #4]
    171c:	4b04      	ldr	r3, [pc, #16]	; (1730 <_fflush_r+0x58>)
    171e:	4299      	cmp	r1, r3
    1720:	d1e5      	bne.n	16ee <_fflush_r+0x16>
    1722:	6861      	ldr	r1, [r4, #4]
    1724:	e7ea      	b.n	16fc <_fflush_r+0x24>
    1726:	68a1      	ldr	r1, [r4, #8]
    1728:	e7e8      	b.n	16fc <_fflush_r+0x24>
    172a:	2000      	movs	r0, #0
    172c:	4770      	bx	lr
    172e:	bf00      	nop
    1730:	000040a4 	.word	0x000040a4
    1734:	00004084 	.word	0x00004084
    1738:	00004064 	.word	0x00004064

0000173c <fflush>:
    173c:	b120      	cbz	r0, 1748 <fflush+0xc>
    173e:	4b05      	ldr	r3, [pc, #20]	; (1754 <fflush+0x18>)
    1740:	4601      	mov	r1, r0
    1742:	6818      	ldr	r0, [r3, #0]
    1744:	f7ff bfc8 	b.w	16d8 <_fflush_r>
    1748:	4b03      	ldr	r3, [pc, #12]	; (1758 <fflush+0x1c>)
    174a:	4904      	ldr	r1, [pc, #16]	; (175c <fflush+0x20>)
    174c:	6818      	ldr	r0, [r3, #0]
    174e:	f000 babd 	b.w	1ccc <_fwalk_reent>
    1752:	bf00      	nop
    1754:	1fff0000 	.word	0x1fff0000
    1758:	00004060 	.word	0x00004060
    175c:	000016d9 	.word	0x000016d9

00001760 <__fp_unlock>:
    1760:	2000      	movs	r0, #0
    1762:	4770      	bx	lr

00001764 <_cleanup_r>:
    1764:	4901      	ldr	r1, [pc, #4]	; (176c <_cleanup_r+0x8>)
    1766:	f000 bab1 	b.w	1ccc <_fwalk_reent>
    176a:	bf00      	nop
    176c:	000016d9 	.word	0x000016d9

00001770 <__fp_lock>:
    1770:	2000      	movs	r0, #0
    1772:	4770      	bx	lr

00001774 <__sfmoreglue>:
    1774:	b570      	push	{r4, r5, r6, lr}
    1776:	1e4a      	subs	r2, r1, #1
    1778:	2568      	movs	r5, #104	; 0x68
    177a:	fb05 f502 	mul.w	r5, r5, r2
    177e:	460e      	mov	r6, r1
    1780:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1784:	f7ff f97a 	bl	a7c <_malloc_r>
    1788:	4604      	mov	r4, r0
    178a:	b140      	cbz	r0, 179e <__sfmoreglue+0x2a>
    178c:	2100      	movs	r1, #0
    178e:	300c      	adds	r0, #12
    1790:	6066      	str	r6, [r4, #4]
    1792:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1796:	6021      	str	r1, [r4, #0]
    1798:	60a0      	str	r0, [r4, #8]
    179a:	f7ff f8d9 	bl	950 <memset>
    179e:	4620      	mov	r0, r4
    17a0:	bd70      	pop	{r4, r5, r6, pc}
    17a2:	bf00      	nop

000017a4 <__sfp>:
    17a4:	4b20      	ldr	r3, [pc, #128]	; (1828 <__sfp+0x84>)
    17a6:	b570      	push	{r4, r5, r6, lr}
    17a8:	681d      	ldr	r5, [r3, #0]
    17aa:	69ab      	ldr	r3, [r5, #24]
    17ac:	4606      	mov	r6, r0
    17ae:	b35b      	cbz	r3, 1808 <__sfp+0x64>
    17b0:	3548      	adds	r5, #72	; 0x48
    17b2:	686b      	ldr	r3, [r5, #4]
    17b4:	68ac      	ldr	r4, [r5, #8]
    17b6:	3b01      	subs	r3, #1
    17b8:	d505      	bpl.n	17c6 <__sfp+0x22>
    17ba:	e021      	b.n	1800 <__sfp+0x5c>
    17bc:	3b01      	subs	r3, #1
    17be:	1c5a      	adds	r2, r3, #1
    17c0:	f104 0468 	add.w	r4, r4, #104	; 0x68
    17c4:	d01c      	beq.n	1800 <__sfp+0x5c>
    17c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    17ca:	2a00      	cmp	r2, #0
    17cc:	d1f6      	bne.n	17bc <__sfp+0x18>
    17ce:	2500      	movs	r5, #0
    17d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    17d4:	2301      	movs	r3, #1
    17d6:	81e2      	strh	r2, [r4, #14]
    17d8:	81a3      	strh	r3, [r4, #12]
    17da:	6665      	str	r5, [r4, #100]	; 0x64
    17dc:	6025      	str	r5, [r4, #0]
    17de:	60a5      	str	r5, [r4, #8]
    17e0:	6065      	str	r5, [r4, #4]
    17e2:	6125      	str	r5, [r4, #16]
    17e4:	6165      	str	r5, [r4, #20]
    17e6:	61a5      	str	r5, [r4, #24]
    17e8:	4629      	mov	r1, r5
    17ea:	2208      	movs	r2, #8
    17ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    17f0:	f7ff f8ae 	bl	950 <memset>
    17f4:	6365      	str	r5, [r4, #52]	; 0x34
    17f6:	63a5      	str	r5, [r4, #56]	; 0x38
    17f8:	64a5      	str	r5, [r4, #72]	; 0x48
    17fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    17fc:	4620      	mov	r0, r4
    17fe:	bd70      	pop	{r4, r5, r6, pc}
    1800:	6828      	ldr	r0, [r5, #0]
    1802:	b128      	cbz	r0, 1810 <__sfp+0x6c>
    1804:	4605      	mov	r5, r0
    1806:	e7d4      	b.n	17b2 <__sfp+0xe>
    1808:	4628      	mov	r0, r5
    180a:	f000 f80f 	bl	182c <__sinit.part.1>
    180e:	e7cf      	b.n	17b0 <__sfp+0xc>
    1810:	2104      	movs	r1, #4
    1812:	4630      	mov	r0, r6
    1814:	f7ff ffae 	bl	1774 <__sfmoreglue>
    1818:	6028      	str	r0, [r5, #0]
    181a:	2800      	cmp	r0, #0
    181c:	d1f2      	bne.n	1804 <__sfp+0x60>
    181e:	230c      	movs	r3, #12
    1820:	4604      	mov	r4, r0
    1822:	6033      	str	r3, [r6, #0]
    1824:	e7ea      	b.n	17fc <__sfp+0x58>
    1826:	bf00      	nop
    1828:	00004060 	.word	0x00004060

0000182c <__sinit.part.1>:
    182c:	4b3d      	ldr	r3, [pc, #244]	; (1924 <__sinit.part.1+0xf8>)
    182e:	493e      	ldr	r1, [pc, #248]	; (1928 <__sinit.part.1+0xfc>)
    1830:	681a      	ldr	r2, [r3, #0]
    1832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1836:	4290      	cmp	r0, r2
    1838:	f04f 0300 	mov.w	r3, #0
    183c:	6483      	str	r3, [r0, #72]	; 0x48
    183e:	64c3      	str	r3, [r0, #76]	; 0x4c
    1840:	6503      	str	r3, [r0, #80]	; 0x50
    1842:	bf08      	it	eq
    1844:	2301      	moveq	r3, #1
    1846:	b083      	sub	sp, #12
    1848:	bf08      	it	eq
    184a:	6183      	streq	r3, [r0, #24]
    184c:	6281      	str	r1, [r0, #40]	; 0x28
    184e:	4607      	mov	r7, r0
    1850:	f7ff ffa8 	bl	17a4 <__sfp>
    1854:	6078      	str	r0, [r7, #4]
    1856:	4638      	mov	r0, r7
    1858:	f7ff ffa4 	bl	17a4 <__sfp>
    185c:	60b8      	str	r0, [r7, #8]
    185e:	4638      	mov	r0, r7
    1860:	f7ff ffa0 	bl	17a4 <__sfp>
    1864:	687d      	ldr	r5, [r7, #4]
    1866:	60f8      	str	r0, [r7, #12]
    1868:	2400      	movs	r4, #0
    186a:	2304      	movs	r3, #4
    186c:	81ab      	strh	r3, [r5, #12]
    186e:	602c      	str	r4, [r5, #0]
    1870:	606c      	str	r4, [r5, #4]
    1872:	60ac      	str	r4, [r5, #8]
    1874:	666c      	str	r4, [r5, #100]	; 0x64
    1876:	81ec      	strh	r4, [r5, #14]
    1878:	612c      	str	r4, [r5, #16]
    187a:	616c      	str	r4, [r5, #20]
    187c:	61ac      	str	r4, [r5, #24]
    187e:	4621      	mov	r1, r4
    1880:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    1884:	2208      	movs	r2, #8
    1886:	f7ff f863 	bl	950 <memset>
    188a:	68be      	ldr	r6, [r7, #8]
    188c:	f8df b09c 	ldr.w	fp, [pc, #156]	; 192c <__sinit.part.1+0x100>
    1890:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1930 <__sinit.part.1+0x104>
    1894:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1934 <__sinit.part.1+0x108>
    1898:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1938 <__sinit.part.1+0x10c>
    189c:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
    18a0:	2301      	movs	r3, #1
    18a2:	2209      	movs	r2, #9
    18a4:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
    18a8:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
    18ac:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
    18b0:	622d      	str	r5, [r5, #32]
    18b2:	4621      	mov	r1, r4
    18b4:	81f3      	strh	r3, [r6, #14]
    18b6:	81b2      	strh	r2, [r6, #12]
    18b8:	6034      	str	r4, [r6, #0]
    18ba:	6074      	str	r4, [r6, #4]
    18bc:	60b4      	str	r4, [r6, #8]
    18be:	6674      	str	r4, [r6, #100]	; 0x64
    18c0:	6134      	str	r4, [r6, #16]
    18c2:	6174      	str	r4, [r6, #20]
    18c4:	61b4      	str	r4, [r6, #24]
    18c6:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    18ca:	2208      	movs	r2, #8
    18cc:	9301      	str	r3, [sp, #4]
    18ce:	f7ff f83f 	bl	950 <memset>
    18d2:	68fd      	ldr	r5, [r7, #12]
    18d4:	6236      	str	r6, [r6, #32]
    18d6:	2012      	movs	r0, #18
    18d8:	2202      	movs	r2, #2
    18da:	f8c6 b024 	str.w	fp, [r6, #36]	; 0x24
    18de:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    18e2:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
    18e6:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
    18ea:	4621      	mov	r1, r4
    18ec:	81a8      	strh	r0, [r5, #12]
    18ee:	81ea      	strh	r2, [r5, #14]
    18f0:	602c      	str	r4, [r5, #0]
    18f2:	606c      	str	r4, [r5, #4]
    18f4:	60ac      	str	r4, [r5, #8]
    18f6:	666c      	str	r4, [r5, #100]	; 0x64
    18f8:	612c      	str	r4, [r5, #16]
    18fa:	616c      	str	r4, [r5, #20]
    18fc:	61ac      	str	r4, [r5, #24]
    18fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    1902:	2208      	movs	r2, #8
    1904:	f7ff f824 	bl	950 <memset>
    1908:	9b01      	ldr	r3, [sp, #4]
    190a:	622d      	str	r5, [r5, #32]
    190c:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
    1910:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
    1914:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
    1918:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
    191c:	61bb      	str	r3, [r7, #24]
    191e:	b003      	add	sp, #12
    1920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1924:	00004060 	.word	0x00004060
    1928:	00001765 	.word	0x00001765
    192c:	00002165 	.word	0x00002165
    1930:	0000218d 	.word	0x0000218d
    1934:	000021c9 	.word	0x000021c9
    1938:	000021e9 	.word	0x000021e9

0000193c <_cleanup>:
    193c:	4b02      	ldr	r3, [pc, #8]	; (1948 <_cleanup+0xc>)
    193e:	4903      	ldr	r1, [pc, #12]	; (194c <_cleanup+0x10>)
    1940:	6818      	ldr	r0, [r3, #0]
    1942:	f000 b9c3 	b.w	1ccc <_fwalk_reent>
    1946:	bf00      	nop
    1948:	00004060 	.word	0x00004060
    194c:	000016d9 	.word	0x000016d9

00001950 <__sinit>:
    1950:	6983      	ldr	r3, [r0, #24]
    1952:	b903      	cbnz	r3, 1956 <__sinit+0x6>
    1954:	e76a      	b.n	182c <__sinit.part.1>
    1956:	4770      	bx	lr

00001958 <__sfp_lock_acquire>:
    1958:	4770      	bx	lr
    195a:	bf00      	nop

0000195c <__sfp_lock_release>:
    195c:	4770      	bx	lr
    195e:	bf00      	nop

00001960 <__sinit_lock_acquire>:
    1960:	4770      	bx	lr
    1962:	bf00      	nop

00001964 <__sinit_lock_release>:
    1964:	4770      	bx	lr
    1966:	bf00      	nop

00001968 <__fp_lock_all>:
    1968:	4b02      	ldr	r3, [pc, #8]	; (1974 <__fp_lock_all+0xc>)
    196a:	4903      	ldr	r1, [pc, #12]	; (1978 <__fp_lock_all+0x10>)
    196c:	6818      	ldr	r0, [r3, #0]
    196e:	f000 b987 	b.w	1c80 <_fwalk>
    1972:	bf00      	nop
    1974:	1fff0000 	.word	0x1fff0000
    1978:	00001771 	.word	0x00001771

0000197c <__fp_unlock_all>:
    197c:	4b02      	ldr	r3, [pc, #8]	; (1988 <__fp_unlock_all+0xc>)
    197e:	4903      	ldr	r1, [pc, #12]	; (198c <__fp_unlock_all+0x10>)
    1980:	6818      	ldr	r0, [r3, #0]
    1982:	f000 b97d 	b.w	1c80 <_fwalk>
    1986:	bf00      	nop
    1988:	1fff0000 	.word	0x1fff0000
    198c:	00001761 	.word	0x00001761

00001990 <__sfvwrite_r>:
    1990:	6893      	ldr	r3, [r2, #8]
    1992:	2b00      	cmp	r3, #0
    1994:	d073      	beq.n	1a7e <__sfvwrite_r+0xee>
    1996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    199a:	898b      	ldrh	r3, [r1, #12]
    199c:	b083      	sub	sp, #12
    199e:	460c      	mov	r4, r1
    19a0:	0719      	lsls	r1, r3, #28
    19a2:	9000      	str	r0, [sp, #0]
    19a4:	4616      	mov	r6, r2
    19a6:	d526      	bpl.n	19f6 <__sfvwrite_r+0x66>
    19a8:	6922      	ldr	r2, [r4, #16]
    19aa:	b322      	cbz	r2, 19f6 <__sfvwrite_r+0x66>
    19ac:	f013 0002 	ands.w	r0, r3, #2
    19b0:	6835      	ldr	r5, [r6, #0]
    19b2:	d02c      	beq.n	1a0e <__sfvwrite_r+0x7e>
    19b4:	f04f 0900 	mov.w	r9, #0
    19b8:	4fb0      	ldr	r7, [pc, #704]	; (1c7c <__sfvwrite_r+0x2ec>)
    19ba:	46c8      	mov	r8, r9
    19bc:	46b2      	mov	sl, r6
    19be:	45b8      	cmp	r8, r7
    19c0:	4643      	mov	r3, r8
    19c2:	464a      	mov	r2, r9
    19c4:	bf28      	it	cs
    19c6:	463b      	movcs	r3, r7
    19c8:	9800      	ldr	r0, [sp, #0]
    19ca:	f1b8 0f00 	cmp.w	r8, #0
    19ce:	d050      	beq.n	1a72 <__sfvwrite_r+0xe2>
    19d0:	6a21      	ldr	r1, [r4, #32]
    19d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    19d4:	47b0      	blx	r6
    19d6:	2800      	cmp	r0, #0
    19d8:	dd58      	ble.n	1a8c <__sfvwrite_r+0xfc>
    19da:	f8da 3008 	ldr.w	r3, [sl, #8]
    19de:	1a1b      	subs	r3, r3, r0
    19e0:	4481      	add	r9, r0
    19e2:	eba8 0800 	sub.w	r8, r8, r0
    19e6:	f8ca 3008 	str.w	r3, [sl, #8]
    19ea:	2b00      	cmp	r3, #0
    19ec:	d1e7      	bne.n	19be <__sfvwrite_r+0x2e>
    19ee:	2000      	movs	r0, #0
    19f0:	b003      	add	sp, #12
    19f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19f6:	4621      	mov	r1, r4
    19f8:	9800      	ldr	r0, [sp, #0]
    19fa:	f7ff fc75 	bl	12e8 <__swsetup_r>
    19fe:	2800      	cmp	r0, #0
    1a00:	f040 8133 	bne.w	1c6a <__sfvwrite_r+0x2da>
    1a04:	89a3      	ldrh	r3, [r4, #12]
    1a06:	6835      	ldr	r5, [r6, #0]
    1a08:	f013 0002 	ands.w	r0, r3, #2
    1a0c:	d1d2      	bne.n	19b4 <__sfvwrite_r+0x24>
    1a0e:	f013 0901 	ands.w	r9, r3, #1
    1a12:	d145      	bne.n	1aa0 <__sfvwrite_r+0x110>
    1a14:	464f      	mov	r7, r9
    1a16:	9601      	str	r6, [sp, #4]
    1a18:	b337      	cbz	r7, 1a68 <__sfvwrite_r+0xd8>
    1a1a:	059a      	lsls	r2, r3, #22
    1a1c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    1a20:	f140 8083 	bpl.w	1b2a <__sfvwrite_r+0x19a>
    1a24:	4547      	cmp	r7, r8
    1a26:	46c3      	mov	fp, r8
    1a28:	f0c0 80ab 	bcc.w	1b82 <__sfvwrite_r+0x1f2>
    1a2c:	f413 6f90 	tst.w	r3, #1152	; 0x480
    1a30:	f040 80ac 	bne.w	1b8c <__sfvwrite_r+0x1fc>
    1a34:	6820      	ldr	r0, [r4, #0]
    1a36:	46ba      	mov	sl, r7
    1a38:	465a      	mov	r2, fp
    1a3a:	4649      	mov	r1, r9
    1a3c:	f000 fa38 	bl	1eb0 <memmove>
    1a40:	68a2      	ldr	r2, [r4, #8]
    1a42:	6823      	ldr	r3, [r4, #0]
    1a44:	eba2 0208 	sub.w	r2, r2, r8
    1a48:	445b      	add	r3, fp
    1a4a:	60a2      	str	r2, [r4, #8]
    1a4c:	6023      	str	r3, [r4, #0]
    1a4e:	9a01      	ldr	r2, [sp, #4]
    1a50:	6893      	ldr	r3, [r2, #8]
    1a52:	eba3 030a 	sub.w	r3, r3, sl
    1a56:	44d1      	add	r9, sl
    1a58:	eba7 070a 	sub.w	r7, r7, sl
    1a5c:	6093      	str	r3, [r2, #8]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d0c5      	beq.n	19ee <__sfvwrite_r+0x5e>
    1a62:	89a3      	ldrh	r3, [r4, #12]
    1a64:	2f00      	cmp	r7, #0
    1a66:	d1d8      	bne.n	1a1a <__sfvwrite_r+0x8a>
    1a68:	f8d5 9000 	ldr.w	r9, [r5]
    1a6c:	686f      	ldr	r7, [r5, #4]
    1a6e:	3508      	adds	r5, #8
    1a70:	e7d2      	b.n	1a18 <__sfvwrite_r+0x88>
    1a72:	f8d5 9000 	ldr.w	r9, [r5]
    1a76:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1a7a:	3508      	adds	r5, #8
    1a7c:	e79f      	b.n	19be <__sfvwrite_r+0x2e>
    1a7e:	2000      	movs	r0, #0
    1a80:	4770      	bx	lr
    1a82:	4621      	mov	r1, r4
    1a84:	9800      	ldr	r0, [sp, #0]
    1a86:	f7ff fe27 	bl	16d8 <_fflush_r>
    1a8a:	b370      	cbz	r0, 1aea <__sfvwrite_r+0x15a>
    1a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a98:	81a3      	strh	r3, [r4, #12]
    1a9a:	b003      	add	sp, #12
    1a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aa0:	4681      	mov	r9, r0
    1aa2:	4633      	mov	r3, r6
    1aa4:	464e      	mov	r6, r9
    1aa6:	46a8      	mov	r8, r5
    1aa8:	469a      	mov	sl, r3
    1aaa:	464d      	mov	r5, r9
    1aac:	b34e      	cbz	r6, 1b02 <__sfvwrite_r+0x172>
    1aae:	b380      	cbz	r0, 1b12 <__sfvwrite_r+0x182>
    1ab0:	6820      	ldr	r0, [r4, #0]
    1ab2:	6923      	ldr	r3, [r4, #16]
    1ab4:	6962      	ldr	r2, [r4, #20]
    1ab6:	45b1      	cmp	r9, r6
    1ab8:	46cb      	mov	fp, r9
    1aba:	bf28      	it	cs
    1abc:	46b3      	movcs	fp, r6
    1abe:	4298      	cmp	r0, r3
    1ac0:	465f      	mov	r7, fp
    1ac2:	d904      	bls.n	1ace <__sfvwrite_r+0x13e>
    1ac4:	68a3      	ldr	r3, [r4, #8]
    1ac6:	4413      	add	r3, r2
    1ac8:	459b      	cmp	fp, r3
    1aca:	f300 80a6 	bgt.w	1c1a <__sfvwrite_r+0x28a>
    1ace:	4593      	cmp	fp, r2
    1ad0:	db4b      	blt.n	1b6a <__sfvwrite_r+0x1da>
    1ad2:	4613      	mov	r3, r2
    1ad4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    1ad6:	6a21      	ldr	r1, [r4, #32]
    1ad8:	9800      	ldr	r0, [sp, #0]
    1ada:	462a      	mov	r2, r5
    1adc:	47b8      	blx	r7
    1ade:	1e07      	subs	r7, r0, #0
    1ae0:	ddd4      	ble.n	1a8c <__sfvwrite_r+0xfc>
    1ae2:	ebb9 0907 	subs.w	r9, r9, r7
    1ae6:	d0cc      	beq.n	1a82 <__sfvwrite_r+0xf2>
    1ae8:	2001      	movs	r0, #1
    1aea:	f8da 3008 	ldr.w	r3, [sl, #8]
    1aee:	1bdb      	subs	r3, r3, r7
    1af0:	443d      	add	r5, r7
    1af2:	1bf6      	subs	r6, r6, r7
    1af4:	f8ca 3008 	str.w	r3, [sl, #8]
    1af8:	2b00      	cmp	r3, #0
    1afa:	f43f af78 	beq.w	19ee <__sfvwrite_r+0x5e>
    1afe:	2e00      	cmp	r6, #0
    1b00:	d1d5      	bne.n	1aae <__sfvwrite_r+0x11e>
    1b02:	f108 0308 	add.w	r3, r8, #8
    1b06:	e913 0060 	ldmdb	r3, {r5, r6}
    1b0a:	4698      	mov	r8, r3
    1b0c:	3308      	adds	r3, #8
    1b0e:	2e00      	cmp	r6, #0
    1b10:	d0f9      	beq.n	1b06 <__sfvwrite_r+0x176>
    1b12:	4632      	mov	r2, r6
    1b14:	210a      	movs	r1, #10
    1b16:	4628      	mov	r0, r5
    1b18:	f000 f97a 	bl	1e10 <memchr>
    1b1c:	2800      	cmp	r0, #0
    1b1e:	f000 80a1 	beq.w	1c64 <__sfvwrite_r+0x2d4>
    1b22:	3001      	adds	r0, #1
    1b24:	eba0 0905 	sub.w	r9, r0, r5
    1b28:	e7c2      	b.n	1ab0 <__sfvwrite_r+0x120>
    1b2a:	6820      	ldr	r0, [r4, #0]
    1b2c:	6923      	ldr	r3, [r4, #16]
    1b2e:	4298      	cmp	r0, r3
    1b30:	d802      	bhi.n	1b38 <__sfvwrite_r+0x1a8>
    1b32:	6963      	ldr	r3, [r4, #20]
    1b34:	429f      	cmp	r7, r3
    1b36:	d25d      	bcs.n	1bf4 <__sfvwrite_r+0x264>
    1b38:	45b8      	cmp	r8, r7
    1b3a:	bf28      	it	cs
    1b3c:	46b8      	movcs	r8, r7
    1b3e:	4642      	mov	r2, r8
    1b40:	4649      	mov	r1, r9
    1b42:	f000 f9b5 	bl	1eb0 <memmove>
    1b46:	68a3      	ldr	r3, [r4, #8]
    1b48:	6822      	ldr	r2, [r4, #0]
    1b4a:	eba3 0308 	sub.w	r3, r3, r8
    1b4e:	4442      	add	r2, r8
    1b50:	60a3      	str	r3, [r4, #8]
    1b52:	6022      	str	r2, [r4, #0]
    1b54:	b10b      	cbz	r3, 1b5a <__sfvwrite_r+0x1ca>
    1b56:	46c2      	mov	sl, r8
    1b58:	e779      	b.n	1a4e <__sfvwrite_r+0xbe>
    1b5a:	4621      	mov	r1, r4
    1b5c:	9800      	ldr	r0, [sp, #0]
    1b5e:	f7ff fdbb 	bl	16d8 <_fflush_r>
    1b62:	2800      	cmp	r0, #0
    1b64:	d192      	bne.n	1a8c <__sfvwrite_r+0xfc>
    1b66:	46c2      	mov	sl, r8
    1b68:	e771      	b.n	1a4e <__sfvwrite_r+0xbe>
    1b6a:	465a      	mov	r2, fp
    1b6c:	4629      	mov	r1, r5
    1b6e:	f000 f99f 	bl	1eb0 <memmove>
    1b72:	68a2      	ldr	r2, [r4, #8]
    1b74:	6823      	ldr	r3, [r4, #0]
    1b76:	eba2 020b 	sub.w	r2, r2, fp
    1b7a:	445b      	add	r3, fp
    1b7c:	60a2      	str	r2, [r4, #8]
    1b7e:	6023      	str	r3, [r4, #0]
    1b80:	e7af      	b.n	1ae2 <__sfvwrite_r+0x152>
    1b82:	6820      	ldr	r0, [r4, #0]
    1b84:	46b8      	mov	r8, r7
    1b86:	46ba      	mov	sl, r7
    1b88:	46bb      	mov	fp, r7
    1b8a:	e755      	b.n	1a38 <__sfvwrite_r+0xa8>
    1b8c:	6962      	ldr	r2, [r4, #20]
    1b8e:	6820      	ldr	r0, [r4, #0]
    1b90:	6921      	ldr	r1, [r4, #16]
    1b92:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    1b96:	eba0 0a01 	sub.w	sl, r0, r1
    1b9a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    1b9e:	f10a 0001 	add.w	r0, sl, #1
    1ba2:	ea4f 0868 	mov.w	r8, r8, asr #1
    1ba6:	4438      	add	r0, r7
    1ba8:	4540      	cmp	r0, r8
    1baa:	4642      	mov	r2, r8
    1bac:	bf84      	itt	hi
    1bae:	4680      	movhi	r8, r0
    1bb0:	4642      	movhi	r2, r8
    1bb2:	055b      	lsls	r3, r3, #21
    1bb4:	d544      	bpl.n	1c40 <__sfvwrite_r+0x2b0>
    1bb6:	4611      	mov	r1, r2
    1bb8:	9800      	ldr	r0, [sp, #0]
    1bba:	f7fe ff5f 	bl	a7c <_malloc_r>
    1bbe:	4683      	mov	fp, r0
    1bc0:	2800      	cmp	r0, #0
    1bc2:	d055      	beq.n	1c70 <__sfvwrite_r+0x2e0>
    1bc4:	4652      	mov	r2, sl
    1bc6:	6921      	ldr	r1, [r4, #16]
    1bc8:	f7fe fe28 	bl	81c <memcpy>
    1bcc:	89a3      	ldrh	r3, [r4, #12]
    1bce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    1bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1bd6:	81a3      	strh	r3, [r4, #12]
    1bd8:	eb0b 000a 	add.w	r0, fp, sl
    1bdc:	eba8 030a 	sub.w	r3, r8, sl
    1be0:	f8c4 b010 	str.w	fp, [r4, #16]
    1be4:	f8c4 8014 	str.w	r8, [r4, #20]
    1be8:	6020      	str	r0, [r4, #0]
    1bea:	60a3      	str	r3, [r4, #8]
    1bec:	46b8      	mov	r8, r7
    1bee:	46ba      	mov	sl, r7
    1bf0:	46bb      	mov	fp, r7
    1bf2:	e721      	b.n	1a38 <__sfvwrite_r+0xa8>
    1bf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1bf8:	42b9      	cmp	r1, r7
    1bfa:	bf28      	it	cs
    1bfc:	4639      	movcs	r1, r7
    1bfe:	464a      	mov	r2, r9
    1c00:	fb91 f1f3 	sdiv	r1, r1, r3
    1c04:	9800      	ldr	r0, [sp, #0]
    1c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1c08:	fb03 f301 	mul.w	r3, r3, r1
    1c0c:	6a21      	ldr	r1, [r4, #32]
    1c0e:	47b0      	blx	r6
    1c10:	f1b0 0a00 	subs.w	sl, r0, #0
    1c14:	f73f af1b 	bgt.w	1a4e <__sfvwrite_r+0xbe>
    1c18:	e738      	b.n	1a8c <__sfvwrite_r+0xfc>
    1c1a:	461a      	mov	r2, r3
    1c1c:	4629      	mov	r1, r5
    1c1e:	9301      	str	r3, [sp, #4]
    1c20:	f000 f946 	bl	1eb0 <memmove>
    1c24:	6822      	ldr	r2, [r4, #0]
    1c26:	9b01      	ldr	r3, [sp, #4]
    1c28:	9800      	ldr	r0, [sp, #0]
    1c2a:	441a      	add	r2, r3
    1c2c:	6022      	str	r2, [r4, #0]
    1c2e:	4621      	mov	r1, r4
    1c30:	f7ff fd52 	bl	16d8 <_fflush_r>
    1c34:	9b01      	ldr	r3, [sp, #4]
    1c36:	2800      	cmp	r0, #0
    1c38:	f47f af28 	bne.w	1a8c <__sfvwrite_r+0xfc>
    1c3c:	461f      	mov	r7, r3
    1c3e:	e750      	b.n	1ae2 <__sfvwrite_r+0x152>
    1c40:	9800      	ldr	r0, [sp, #0]
    1c42:	f000 f999 	bl	1f78 <_realloc_r>
    1c46:	4683      	mov	fp, r0
    1c48:	2800      	cmp	r0, #0
    1c4a:	d1c5      	bne.n	1bd8 <__sfvwrite_r+0x248>
    1c4c:	9d00      	ldr	r5, [sp, #0]
    1c4e:	6921      	ldr	r1, [r4, #16]
    1c50:	4628      	mov	r0, r5
    1c52:	f7fe fecb 	bl	9ec <_free_r>
    1c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c5a:	220c      	movs	r2, #12
    1c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1c60:	602a      	str	r2, [r5, #0]
    1c62:	e715      	b.n	1a90 <__sfvwrite_r+0x100>
    1c64:	f106 0901 	add.w	r9, r6, #1
    1c68:	e722      	b.n	1ab0 <__sfvwrite_r+0x120>
    1c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c6e:	e6bf      	b.n	19f0 <__sfvwrite_r+0x60>
    1c70:	9a00      	ldr	r2, [sp, #0]
    1c72:	230c      	movs	r3, #12
    1c74:	6013      	str	r3, [r2, #0]
    1c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c7a:	e709      	b.n	1a90 <__sfvwrite_r+0x100>
    1c7c:	7ffffc00 	.word	0x7ffffc00

00001c80 <_fwalk>:
    1c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c84:	f110 0748 	adds.w	r7, r0, #72	; 0x48
    1c88:	d01b      	beq.n	1cc2 <_fwalk+0x42>
    1c8a:	4688      	mov	r8, r1
    1c8c:	2600      	movs	r6, #0
    1c8e:	687d      	ldr	r5, [r7, #4]
    1c90:	68bc      	ldr	r4, [r7, #8]
    1c92:	3d01      	subs	r5, #1
    1c94:	d40f      	bmi.n	1cb6 <_fwalk+0x36>
    1c96:	89a3      	ldrh	r3, [r4, #12]
    1c98:	2b01      	cmp	r3, #1
    1c9a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    1c9e:	d906      	bls.n	1cae <_fwalk+0x2e>
    1ca0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    1ca4:	3301      	adds	r3, #1
    1ca6:	4620      	mov	r0, r4
    1ca8:	d001      	beq.n	1cae <_fwalk+0x2e>
    1caa:	47c0      	blx	r8
    1cac:	4306      	orrs	r6, r0
    1cae:	1c6b      	adds	r3, r5, #1
    1cb0:	f104 0468 	add.w	r4, r4, #104	; 0x68
    1cb4:	d1ef      	bne.n	1c96 <_fwalk+0x16>
    1cb6:	683f      	ldr	r7, [r7, #0]
    1cb8:	2f00      	cmp	r7, #0
    1cba:	d1e8      	bne.n	1c8e <_fwalk+0xe>
    1cbc:	4630      	mov	r0, r6
    1cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cc2:	463e      	mov	r6, r7
    1cc4:	4630      	mov	r0, r6
    1cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cca:	bf00      	nop

00001ccc <_fwalk_reent>:
    1ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cd0:	f110 0748 	adds.w	r7, r0, #72	; 0x48
    1cd4:	d01f      	beq.n	1d16 <_fwalk_reent+0x4a>
    1cd6:	4688      	mov	r8, r1
    1cd8:	4606      	mov	r6, r0
    1cda:	f04f 0900 	mov.w	r9, #0
    1cde:	687d      	ldr	r5, [r7, #4]
    1ce0:	68bc      	ldr	r4, [r7, #8]
    1ce2:	3d01      	subs	r5, #1
    1ce4:	d411      	bmi.n	1d0a <_fwalk_reent+0x3e>
    1ce6:	89a3      	ldrh	r3, [r4, #12]
    1ce8:	2b01      	cmp	r3, #1
    1cea:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    1cee:	d908      	bls.n	1d02 <_fwalk_reent+0x36>
    1cf0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    1cf4:	3301      	adds	r3, #1
    1cf6:	4621      	mov	r1, r4
    1cf8:	4630      	mov	r0, r6
    1cfa:	d002      	beq.n	1d02 <_fwalk_reent+0x36>
    1cfc:	47c0      	blx	r8
    1cfe:	ea49 0900 	orr.w	r9, r9, r0
    1d02:	1c6b      	adds	r3, r5, #1
    1d04:	f104 0468 	add.w	r4, r4, #104	; 0x68
    1d08:	d1ed      	bne.n	1ce6 <_fwalk_reent+0x1a>
    1d0a:	683f      	ldr	r7, [r7, #0]
    1d0c:	2f00      	cmp	r7, #0
    1d0e:	d1e6      	bne.n	1cde <_fwalk_reent+0x12>
    1d10:	4648      	mov	r0, r9
    1d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d16:	46b9      	mov	r9, r7
    1d18:	4648      	mov	r0, r9
    1d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d1e:	bf00      	nop

00001d20 <__swhatbuf_r>:
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	460c      	mov	r4, r1
    1d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d28:	2900      	cmp	r1, #0
    1d2a:	b090      	sub	sp, #64	; 0x40
    1d2c:	4615      	mov	r5, r2
    1d2e:	461e      	mov	r6, r3
    1d30:	db13      	blt.n	1d5a <__swhatbuf_r+0x3a>
    1d32:	aa01      	add	r2, sp, #4
    1d34:	f000 fa84 	bl	2240 <_fstat_r>
    1d38:	2800      	cmp	r0, #0
    1d3a:	db0e      	blt.n	1d5a <__swhatbuf_r+0x3a>
    1d3c:	9a02      	ldr	r2, [sp, #8]
    1d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1d42:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    1d46:	fab2 f282 	clz	r2, r2
    1d4a:	0952      	lsrs	r2, r2, #5
    1d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1d50:	2000      	movs	r0, #0
    1d52:	6032      	str	r2, [r6, #0]
    1d54:	602b      	str	r3, [r5, #0]
    1d56:	b010      	add	sp, #64	; 0x40
    1d58:	bd70      	pop	{r4, r5, r6, pc}
    1d5a:	89a3      	ldrh	r3, [r4, #12]
    1d5c:	2200      	movs	r2, #0
    1d5e:	061b      	lsls	r3, r3, #24
    1d60:	6032      	str	r2, [r6, #0]
    1d62:	d504      	bpl.n	1d6e <__swhatbuf_r+0x4e>
    1d64:	2340      	movs	r3, #64	; 0x40
    1d66:	2000      	movs	r0, #0
    1d68:	602b      	str	r3, [r5, #0]
    1d6a:	b010      	add	sp, #64	; 0x40
    1d6c:	bd70      	pop	{r4, r5, r6, pc}
    1d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1d72:	2000      	movs	r0, #0
    1d74:	602b      	str	r3, [r5, #0]
    1d76:	b010      	add	sp, #64	; 0x40
    1d78:	bd70      	pop	{r4, r5, r6, pc}
    1d7a:	bf00      	nop

00001d7c <__smakebuf_r>:
    1d7c:	898a      	ldrh	r2, [r1, #12]
    1d7e:	0792      	lsls	r2, r2, #30
    1d80:	460b      	mov	r3, r1
    1d82:	d506      	bpl.n	1d92 <__smakebuf_r+0x16>
    1d84:	f101 0247 	add.w	r2, r1, #71	; 0x47
    1d88:	2101      	movs	r1, #1
    1d8a:	601a      	str	r2, [r3, #0]
    1d8c:	611a      	str	r2, [r3, #16]
    1d8e:	6159      	str	r1, [r3, #20]
    1d90:	4770      	bx	lr
    1d92:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d94:	b083      	sub	sp, #12
    1d96:	ab01      	add	r3, sp, #4
    1d98:	466a      	mov	r2, sp
    1d9a:	460c      	mov	r4, r1
    1d9c:	4605      	mov	r5, r0
    1d9e:	f7ff ffbf 	bl	1d20 <__swhatbuf_r>
    1da2:	9900      	ldr	r1, [sp, #0]
    1da4:	4606      	mov	r6, r0
    1da6:	4628      	mov	r0, r5
    1da8:	f7fe fe68 	bl	a7c <_malloc_r>
    1dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1db0:	b1d0      	cbz	r0, 1de8 <__smakebuf_r+0x6c>
    1db2:	9a01      	ldr	r2, [sp, #4]
    1db4:	4f12      	ldr	r7, [pc, #72]	; (1e00 <__smakebuf_r+0x84>)
    1db6:	9900      	ldr	r1, [sp, #0]
    1db8:	62af      	str	r7, [r5, #40]	; 0x28
    1dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1dbe:	81a3      	strh	r3, [r4, #12]
    1dc0:	6020      	str	r0, [r4, #0]
    1dc2:	6120      	str	r0, [r4, #16]
    1dc4:	6161      	str	r1, [r4, #20]
    1dc6:	b91a      	cbnz	r2, 1dd0 <__smakebuf_r+0x54>
    1dc8:	4333      	orrs	r3, r6
    1dca:	81a3      	strh	r3, [r4, #12]
    1dcc:	b003      	add	sp, #12
    1dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dd0:	4628      	mov	r0, r5
    1dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1dd6:	f000 fa47 	bl	2268 <_isatty_r>
    1dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1dde:	2800      	cmp	r0, #0
    1de0:	d0f2      	beq.n	1dc8 <__smakebuf_r+0x4c>
    1de2:	f043 0301 	orr.w	r3, r3, #1
    1de6:	e7ef      	b.n	1dc8 <__smakebuf_r+0x4c>
    1de8:	059a      	lsls	r2, r3, #22
    1dea:	d4ef      	bmi.n	1dcc <__smakebuf_r+0x50>
    1dec:	f104 0247 	add.w	r2, r4, #71	; 0x47
    1df0:	f043 0302 	orr.w	r3, r3, #2
    1df4:	2101      	movs	r1, #1
    1df6:	81a3      	strh	r3, [r4, #12]
    1df8:	6022      	str	r2, [r4, #0]
    1dfa:	6122      	str	r2, [r4, #16]
    1dfc:	6161      	str	r1, [r4, #20]
    1dfe:	e7e5      	b.n	1dcc <__smakebuf_r+0x50>
    1e00:	00001765 	.word	0x00001765
    1e04:	00000000 	.word	0x00000000
    1e08:	00000000 	.word	0x00000000
    1e0c:	00000000 	.word	0x00000000

00001e10 <memchr>:
    1e10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1e14:	2a10      	cmp	r2, #16
    1e16:	db2b      	blt.n	1e70 <memchr+0x60>
    1e18:	f010 0f07 	tst.w	r0, #7
    1e1c:	d008      	beq.n	1e30 <memchr+0x20>
    1e1e:	f810 3b01 	ldrb.w	r3, [r0], #1
    1e22:	3a01      	subs	r2, #1
    1e24:	428b      	cmp	r3, r1
    1e26:	d02d      	beq.n	1e84 <memchr+0x74>
    1e28:	f010 0f07 	tst.w	r0, #7
    1e2c:	b342      	cbz	r2, 1e80 <memchr+0x70>
    1e2e:	d1f6      	bne.n	1e1e <memchr+0xe>
    1e30:	b4f0      	push	{r4, r5, r6, r7}
    1e32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1e36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    1e3a:	f022 0407 	bic.w	r4, r2, #7
    1e3e:	f07f 0700 	mvns.w	r7, #0
    1e42:	2300      	movs	r3, #0
    1e44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    1e48:	3c08      	subs	r4, #8
    1e4a:	ea85 0501 	eor.w	r5, r5, r1
    1e4e:	ea86 0601 	eor.w	r6, r6, r1
    1e52:	fa85 f547 	uadd8	r5, r5, r7
    1e56:	faa3 f587 	sel	r5, r3, r7
    1e5a:	fa86 f647 	uadd8	r6, r6, r7
    1e5e:	faa5 f687 	sel	r6, r5, r7
    1e62:	b98e      	cbnz	r6, 1e88 <memchr+0x78>
    1e64:	d1ee      	bne.n	1e44 <memchr+0x34>
    1e66:	bcf0      	pop	{r4, r5, r6, r7}
    1e68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1e6c:	f002 0207 	and.w	r2, r2, #7
    1e70:	b132      	cbz	r2, 1e80 <memchr+0x70>
    1e72:	f810 3b01 	ldrb.w	r3, [r0], #1
    1e76:	3a01      	subs	r2, #1
    1e78:	ea83 0301 	eor.w	r3, r3, r1
    1e7c:	b113      	cbz	r3, 1e84 <memchr+0x74>
    1e7e:	d1f8      	bne.n	1e72 <memchr+0x62>
    1e80:	2000      	movs	r0, #0
    1e82:	4770      	bx	lr
    1e84:	3801      	subs	r0, #1
    1e86:	4770      	bx	lr
    1e88:	2d00      	cmp	r5, #0
    1e8a:	bf06      	itte	eq
    1e8c:	4635      	moveq	r5, r6
    1e8e:	3803      	subeq	r0, #3
    1e90:	3807      	subne	r0, #7
    1e92:	f015 0f01 	tst.w	r5, #1
    1e96:	d107      	bne.n	1ea8 <memchr+0x98>
    1e98:	3001      	adds	r0, #1
    1e9a:	f415 7f80 	tst.w	r5, #256	; 0x100
    1e9e:	bf02      	ittt	eq
    1ea0:	3001      	addeq	r0, #1
    1ea2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    1ea6:	3001      	addeq	r0, #1
    1ea8:	bcf0      	pop	{r4, r5, r6, r7}
    1eaa:	3801      	subs	r0, #1
    1eac:	4770      	bx	lr
    1eae:	bf00      	nop

00001eb0 <memmove>:
    1eb0:	4288      	cmp	r0, r1
    1eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eb4:	d90d      	bls.n	1ed2 <memmove+0x22>
    1eb6:	188b      	adds	r3, r1, r2
    1eb8:	4298      	cmp	r0, r3
    1eba:	d20a      	bcs.n	1ed2 <memmove+0x22>
    1ebc:	1884      	adds	r4, r0, r2
    1ebe:	2a00      	cmp	r2, #0
    1ec0:	d051      	beq.n	1f66 <memmove+0xb6>
    1ec2:	4622      	mov	r2, r4
    1ec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    1ec8:	f802 4d01 	strb.w	r4, [r2, #-1]!
    1ecc:	4299      	cmp	r1, r3
    1ece:	d1f9      	bne.n	1ec4 <memmove+0x14>
    1ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed2:	2a0f      	cmp	r2, #15
    1ed4:	d948      	bls.n	1f68 <memmove+0xb8>
    1ed6:	ea41 0300 	orr.w	r3, r1, r0
    1eda:	079b      	lsls	r3, r3, #30
    1edc:	d146      	bne.n	1f6c <memmove+0xbc>
    1ede:	f100 0410 	add.w	r4, r0, #16
    1ee2:	f101 0310 	add.w	r3, r1, #16
    1ee6:	4615      	mov	r5, r2
    1ee8:	f853 6c10 	ldr.w	r6, [r3, #-16]
    1eec:	f844 6c10 	str.w	r6, [r4, #-16]
    1ef0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    1ef4:	f844 6c0c 	str.w	r6, [r4, #-12]
    1ef8:	f853 6c08 	ldr.w	r6, [r3, #-8]
    1efc:	f844 6c08 	str.w	r6, [r4, #-8]
    1f00:	3d10      	subs	r5, #16
    1f02:	f853 6c04 	ldr.w	r6, [r3, #-4]
    1f06:	f844 6c04 	str.w	r6, [r4, #-4]
    1f0a:	2d0f      	cmp	r5, #15
    1f0c:	f103 0310 	add.w	r3, r3, #16
    1f10:	f104 0410 	add.w	r4, r4, #16
    1f14:	d8e8      	bhi.n	1ee8 <memmove+0x38>
    1f16:	f1a2 0310 	sub.w	r3, r2, #16
    1f1a:	f023 030f 	bic.w	r3, r3, #15
    1f1e:	f002 0e0f 	and.w	lr, r2, #15
    1f22:	3310      	adds	r3, #16
    1f24:	f1be 0f03 	cmp.w	lr, #3
    1f28:	4419      	add	r1, r3
    1f2a:	4403      	add	r3, r0
    1f2c:	d921      	bls.n	1f72 <memmove+0xc2>
    1f2e:	1f1e      	subs	r6, r3, #4
    1f30:	460d      	mov	r5, r1
    1f32:	4674      	mov	r4, lr
    1f34:	3c04      	subs	r4, #4
    1f36:	f855 7b04 	ldr.w	r7, [r5], #4
    1f3a:	f846 7f04 	str.w	r7, [r6, #4]!
    1f3e:	2c03      	cmp	r4, #3
    1f40:	d8f8      	bhi.n	1f34 <memmove+0x84>
    1f42:	f1ae 0404 	sub.w	r4, lr, #4
    1f46:	f024 0403 	bic.w	r4, r4, #3
    1f4a:	3404      	adds	r4, #4
    1f4c:	4421      	add	r1, r4
    1f4e:	4423      	add	r3, r4
    1f50:	f002 0203 	and.w	r2, r2, #3
    1f54:	b162      	cbz	r2, 1f70 <memmove+0xc0>
    1f56:	3b01      	subs	r3, #1
    1f58:	440a      	add	r2, r1
    1f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
    1f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
    1f62:	428a      	cmp	r2, r1
    1f64:	d1f9      	bne.n	1f5a <memmove+0xaa>
    1f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f68:	4603      	mov	r3, r0
    1f6a:	e7f3      	b.n	1f54 <memmove+0xa4>
    1f6c:	4603      	mov	r3, r0
    1f6e:	e7f2      	b.n	1f56 <memmove+0xa6>
    1f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f72:	4672      	mov	r2, lr
    1f74:	e7ee      	b.n	1f54 <memmove+0xa4>
    1f76:	bf00      	nop

00001f78 <_realloc_r>:
    1f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f7a:	4614      	mov	r4, r2
    1f7c:	b1f9      	cbz	r1, 1fbe <_realloc_r+0x46>
    1f7e:	b1c2      	cbz	r2, 1fb2 <_realloc_r+0x3a>
    1f80:	4606      	mov	r6, r0
    1f82:	460d      	mov	r5, r1
    1f84:	f000 f998 	bl	22b8 <_malloc_usable_size_r>
    1f88:	4284      	cmp	r4, r0
    1f8a:	d801      	bhi.n	1f90 <_realloc_r+0x18>
    1f8c:	4628      	mov	r0, r5
    1f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f90:	4621      	mov	r1, r4
    1f92:	4630      	mov	r0, r6
    1f94:	f7fe fd72 	bl	a7c <_malloc_r>
    1f98:	4607      	mov	r7, r0
    1f9a:	b170      	cbz	r0, 1fba <_realloc_r+0x42>
    1f9c:	4622      	mov	r2, r4
    1f9e:	4629      	mov	r1, r5
    1fa0:	f7fe fc3c 	bl	81c <memcpy>
    1fa4:	4629      	mov	r1, r5
    1fa6:	4630      	mov	r0, r6
    1fa8:	463d      	mov	r5, r7
    1faa:	f7fe fd1f 	bl	9ec <_free_r>
    1fae:	4628      	mov	r0, r5
    1fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fb2:	f7fe fd1b 	bl	9ec <_free_r>
    1fb6:	4625      	mov	r5, r4
    1fb8:	e7e8      	b.n	1f8c <_realloc_r+0x14>
    1fba:	4605      	mov	r5, r0
    1fbc:	e7e6      	b.n	1f8c <_realloc_r+0x14>
    1fbe:	4611      	mov	r1, r2
    1fc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1fc4:	f7fe bd5a 	b.w	a7c <_malloc_r>

00001fc8 <_init_signal_r.part.0>:
    1fc8:	b510      	push	{r4, lr}
    1fca:	2180      	movs	r1, #128	; 0x80
    1fcc:	4604      	mov	r4, r0
    1fce:	f7fe fd55 	bl	a7c <_malloc_r>
    1fd2:	6460      	str	r0, [r4, #68]	; 0x44
    1fd4:	b140      	cbz	r0, 1fe8 <_init_signal_r.part.0+0x20>
    1fd6:	1f03      	subs	r3, r0, #4
    1fd8:	2200      	movs	r2, #0
    1fda:	307c      	adds	r0, #124	; 0x7c
    1fdc:	f843 2f04 	str.w	r2, [r3, #4]!
    1fe0:	4283      	cmp	r3, r0
    1fe2:	d1fb      	bne.n	1fdc <_init_signal_r.part.0+0x14>
    1fe4:	2000      	movs	r0, #0
    1fe6:	bd10      	pop	{r4, pc}
    1fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1fec:	bd10      	pop	{r4, pc}
    1fee:	bf00      	nop

00001ff0 <_init_signal_r>:
    1ff0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1ff2:	b10b      	cbz	r3, 1ff8 <_init_signal_r+0x8>
    1ff4:	2000      	movs	r0, #0
    1ff6:	4770      	bx	lr
    1ff8:	e7e6      	b.n	1fc8 <_init_signal_r.part.0>
    1ffa:	bf00      	nop

00001ffc <_signal_r>:
    1ffc:	291f      	cmp	r1, #31
    1ffe:	d809      	bhi.n	2014 <_signal_r+0x18>
    2000:	b510      	push	{r4, lr}
    2002:	6c44      	ldr	r4, [r0, #68]	; 0x44
    2004:	b084      	sub	sp, #16
    2006:	b154      	cbz	r4, 201e <_signal_r+0x22>
    2008:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
    200c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    2010:	b004      	add	sp, #16
    2012:	bd10      	pop	{r4, pc}
    2014:	2216      	movs	r2, #22
    2016:	6002      	str	r2, [r0, #0]
    2018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    201c:	4770      	bx	lr
    201e:	9003      	str	r0, [sp, #12]
    2020:	9202      	str	r2, [sp, #8]
    2022:	9101      	str	r1, [sp, #4]
    2024:	f7ff ffd0 	bl	1fc8 <_init_signal_r.part.0>
    2028:	b920      	cbnz	r0, 2034 <_signal_r+0x38>
    202a:	9b03      	ldr	r3, [sp, #12]
    202c:	9a02      	ldr	r2, [sp, #8]
    202e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    2030:	9901      	ldr	r1, [sp, #4]
    2032:	e7e9      	b.n	2008 <_signal_r+0xc>
    2034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2038:	e7ea      	b.n	2010 <_signal_r+0x14>
    203a:	bf00      	nop

0000203c <_raise_r>:
    203c:	291f      	cmp	r1, #31
    203e:	d827      	bhi.n	2090 <_raise_r+0x54>
    2040:	b520      	push	{r5, lr}
    2042:	6c42      	ldr	r2, [r0, #68]	; 0x44
    2044:	b082      	sub	sp, #8
    2046:	4605      	mov	r5, r0
    2048:	b1aa      	cbz	r2, 2076 <_raise_r+0x3a>
    204a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    204e:	b193      	cbz	r3, 2076 <_raise_r+0x3a>
    2050:	2b01      	cmp	r3, #1
    2052:	d00e      	beq.n	2072 <_raise_r+0x36>
    2054:	1c58      	adds	r0, r3, #1
    2056:	d007      	beq.n	2068 <_raise_r+0x2c>
    2058:	2500      	movs	r5, #0
    205a:	4608      	mov	r0, r1
    205c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    2060:	4798      	blx	r3
    2062:	4628      	mov	r0, r5
    2064:	b002      	add	sp, #8
    2066:	bd20      	pop	{r5, pc}
    2068:	2316      	movs	r3, #22
    206a:	2001      	movs	r0, #1
    206c:	602b      	str	r3, [r5, #0]
    206e:	b002      	add	sp, #8
    2070:	bd20      	pop	{r5, pc}
    2072:	2000      	movs	r0, #0
    2074:	e7f6      	b.n	2064 <_raise_r+0x28>
    2076:	4628      	mov	r0, r5
    2078:	9101      	str	r1, [sp, #4]
    207a:	f000 f871 	bl	2160 <_getpid_r>
    207e:	9901      	ldr	r1, [sp, #4]
    2080:	460a      	mov	r2, r1
    2082:	4601      	mov	r1, r0
    2084:	4628      	mov	r0, r5
    2086:	b002      	add	sp, #8
    2088:	e8bd 4020 	ldmia.w	sp!, {r5, lr}
    208c:	f000 b854 	b.w	2138 <_kill_r>
    2090:	2316      	movs	r3, #22
    2092:	6003      	str	r3, [r0, #0]
    2094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2098:	4770      	bx	lr
    209a:	bf00      	nop

0000209c <__sigtramp_r>:
    209c:	291f      	cmp	r1, #31
    209e:	d826      	bhi.n	20ee <__sigtramp_r+0x52>
    20a0:	b520      	push	{r5, lr}
    20a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    20a4:	b082      	sub	sp, #8
    20a6:	4605      	mov	r5, r0
    20a8:	b1bb      	cbz	r3, 20da <__sigtramp_r+0x3e>
    20aa:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    20ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    20b2:	b182      	cbz	r2, 20d6 <__sigtramp_r+0x3a>
    20b4:	1c50      	adds	r0, r2, #1
    20b6:	d00b      	beq.n	20d0 <__sigtramp_r+0x34>
    20b8:	2a01      	cmp	r2, #1
    20ba:	d006      	beq.n	20ca <__sigtramp_r+0x2e>
    20bc:	2500      	movs	r5, #0
    20be:	4608      	mov	r0, r1
    20c0:	601d      	str	r5, [r3, #0]
    20c2:	4790      	blx	r2
    20c4:	4628      	mov	r0, r5
    20c6:	b002      	add	sp, #8
    20c8:	bd20      	pop	{r5, pc}
    20ca:	2003      	movs	r0, #3
    20cc:	b002      	add	sp, #8
    20ce:	bd20      	pop	{r5, pc}
    20d0:	2002      	movs	r0, #2
    20d2:	b002      	add	sp, #8
    20d4:	bd20      	pop	{r5, pc}
    20d6:	2001      	movs	r0, #1
    20d8:	e7f5      	b.n	20c6 <__sigtramp_r+0x2a>
    20da:	9101      	str	r1, [sp, #4]
    20dc:	f7ff ff74 	bl	1fc8 <_init_signal_r.part.0>
    20e0:	b910      	cbnz	r0, 20e8 <__sigtramp_r+0x4c>
    20e2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    20e4:	9901      	ldr	r1, [sp, #4]
    20e6:	e7e0      	b.n	20aa <__sigtramp_r+0xe>
    20e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    20ec:	e7eb      	b.n	20c6 <__sigtramp_r+0x2a>
    20ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    20f2:	4770      	bx	lr

000020f4 <raise>:
    20f4:	4b02      	ldr	r3, [pc, #8]	; (2100 <raise+0xc>)
    20f6:	4601      	mov	r1, r0
    20f8:	6818      	ldr	r0, [r3, #0]
    20fa:	f7ff bf9f 	b.w	203c <_raise_r>
    20fe:	bf00      	nop
    2100:	1fff0000 	.word	0x1fff0000

00002104 <signal>:
    2104:	4b02      	ldr	r3, [pc, #8]	; (2110 <signal+0xc>)
    2106:	460a      	mov	r2, r1
    2108:	4601      	mov	r1, r0
    210a:	6818      	ldr	r0, [r3, #0]
    210c:	f7ff bf76 	b.w	1ffc <_signal_r>
    2110:	1fff0000 	.word	0x1fff0000

00002114 <_init_signal>:
    2114:	4b03      	ldr	r3, [pc, #12]	; (2124 <_init_signal+0x10>)
    2116:	6818      	ldr	r0, [r3, #0]
    2118:	6c43      	ldr	r3, [r0, #68]	; 0x44
    211a:	b10b      	cbz	r3, 2120 <_init_signal+0xc>
    211c:	2000      	movs	r0, #0
    211e:	4770      	bx	lr
    2120:	e752      	b.n	1fc8 <_init_signal_r.part.0>
    2122:	bf00      	nop
    2124:	1fff0000 	.word	0x1fff0000

00002128 <__sigtramp>:
    2128:	4b02      	ldr	r3, [pc, #8]	; (2134 <__sigtramp+0xc>)
    212a:	4601      	mov	r1, r0
    212c:	6818      	ldr	r0, [r3, #0]
    212e:	f7ff bfb5 	b.w	209c <__sigtramp_r>
    2132:	bf00      	nop
    2134:	1fff0000 	.word	0x1fff0000

00002138 <_kill_r>:
    2138:	b538      	push	{r3, r4, r5, lr}
    213a:	460b      	mov	r3, r1
    213c:	4c07      	ldr	r4, [pc, #28]	; (215c <_kill_r+0x24>)
    213e:	4605      	mov	r5, r0
    2140:	4611      	mov	r1, r2
    2142:	4618      	mov	r0, r3
    2144:	2300      	movs	r3, #0
    2146:	6023      	str	r3, [r4, #0]
    2148:	f000 f8f6 	bl	2338 <_kill>
    214c:	1c43      	adds	r3, r0, #1
    214e:	d000      	beq.n	2152 <_kill_r+0x1a>
    2150:	bd38      	pop	{r3, r4, r5, pc}
    2152:	6823      	ldr	r3, [r4, #0]
    2154:	2b00      	cmp	r3, #0
    2156:	d0fb      	beq.n	2150 <_kill_r+0x18>
    2158:	602b      	str	r3, [r5, #0]
    215a:	bd38      	pop	{r3, r4, r5, pc}
    215c:	1fff04fc 	.word	0x1fff04fc

00002160 <_getpid_r>:
    2160:	f000 b8da 	b.w	2318 <_getpid>

00002164 <__sread>:
    2164:	b510      	push	{r4, lr}
    2166:	460c      	mov	r4, r1
    2168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    216c:	f000 f8ae 	bl	22cc <_read_r>
    2170:	2800      	cmp	r0, #0
    2172:	db03      	blt.n	217c <__sread+0x18>
    2174:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2176:	4403      	add	r3, r0
    2178:	6563      	str	r3, [r4, #84]	; 0x54
    217a:	bd10      	pop	{r4, pc}
    217c:	89a3      	ldrh	r3, [r4, #12]
    217e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2182:	81a3      	strh	r3, [r4, #12]
    2184:	bd10      	pop	{r4, pc}
    2186:	bf00      	nop

00002188 <__seofread>:
    2188:	2000      	movs	r0, #0
    218a:	4770      	bx	lr

0000218c <__swrite>:
    218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2190:	4616      	mov	r6, r2
    2192:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    2196:	461f      	mov	r7, r3
    2198:	05d3      	lsls	r3, r2, #23
    219a:	460c      	mov	r4, r1
    219c:	4605      	mov	r5, r0
    219e:	d507      	bpl.n	21b0 <__swrite+0x24>
    21a0:	2200      	movs	r2, #0
    21a2:	2302      	movs	r3, #2
    21a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    21a8:	f000 f870 	bl	228c <_lseek_r>
    21ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    21b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    21b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    21b8:	81a2      	strh	r2, [r4, #12]
    21ba:	463b      	mov	r3, r7
    21bc:	4632      	mov	r2, r6
    21be:	4628      	mov	r0, r5
    21c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    21c4:	f000 b814 	b.w	21f0 <_write_r>

000021c8 <__sseek>:
    21c8:	b510      	push	{r4, lr}
    21ca:	460c      	mov	r4, r1
    21cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    21d0:	f000 f85c 	bl	228c <_lseek_r>
    21d4:	89a3      	ldrh	r3, [r4, #12]
    21d6:	1c42      	adds	r2, r0, #1
    21d8:	bf0e      	itee	eq
    21da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    21de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    21e2:	6560      	strne	r0, [r4, #84]	; 0x54
    21e4:	81a3      	strh	r3, [r4, #12]
    21e6:	bd10      	pop	{r4, pc}

000021e8 <__sclose>:
    21e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    21ec:	f000 b816 	b.w	221c <_close_r>

000021f0 <_write_r>:
    21f0:	b570      	push	{r4, r5, r6, lr}
    21f2:	460d      	mov	r5, r1
    21f4:	4c08      	ldr	r4, [pc, #32]	; (2218 <_write_r+0x28>)
    21f6:	4611      	mov	r1, r2
    21f8:	4606      	mov	r6, r0
    21fa:	461a      	mov	r2, r3
    21fc:	4628      	mov	r0, r5
    21fe:	2300      	movs	r3, #0
    2200:	6023      	str	r3, [r4, #0]
    2202:	f000 f8bf 	bl	2384 <_write>
    2206:	1c43      	adds	r3, r0, #1
    2208:	d000      	beq.n	220c <_write_r+0x1c>
    220a:	bd70      	pop	{r4, r5, r6, pc}
    220c:	6823      	ldr	r3, [r4, #0]
    220e:	2b00      	cmp	r3, #0
    2210:	d0fb      	beq.n	220a <_write_r+0x1a>
    2212:	6033      	str	r3, [r6, #0]
    2214:	bd70      	pop	{r4, r5, r6, pc}
    2216:	bf00      	nop
    2218:	1fff04fc 	.word	0x1fff04fc

0000221c <_close_r>:
    221c:	b538      	push	{r3, r4, r5, lr}
    221e:	4c07      	ldr	r4, [pc, #28]	; (223c <_close_r+0x20>)
    2220:	2300      	movs	r3, #0
    2222:	4605      	mov	r5, r0
    2224:	4608      	mov	r0, r1
    2226:	6023      	str	r3, [r4, #0]
    2228:	f000 f866 	bl	22f8 <_close>
    222c:	1c43      	adds	r3, r0, #1
    222e:	d000      	beq.n	2232 <_close_r+0x16>
    2230:	bd38      	pop	{r3, r4, r5, pc}
    2232:	6823      	ldr	r3, [r4, #0]
    2234:	2b00      	cmp	r3, #0
    2236:	d0fb      	beq.n	2230 <_close_r+0x14>
    2238:	602b      	str	r3, [r5, #0]
    223a:	bd38      	pop	{r3, r4, r5, pc}
    223c:	1fff04fc 	.word	0x1fff04fc

00002240 <_fstat_r>:
    2240:	b538      	push	{r3, r4, r5, lr}
    2242:	460b      	mov	r3, r1
    2244:	4c07      	ldr	r4, [pc, #28]	; (2264 <_fstat_r+0x24>)
    2246:	4605      	mov	r5, r0
    2248:	4611      	mov	r1, r2
    224a:	4618      	mov	r0, r3
    224c:	2300      	movs	r3, #0
    224e:	6023      	str	r3, [r4, #0]
    2250:	f000 f85a 	bl	2308 <_fstat>
    2254:	1c43      	adds	r3, r0, #1
    2256:	d000      	beq.n	225a <_fstat_r+0x1a>
    2258:	bd38      	pop	{r3, r4, r5, pc}
    225a:	6823      	ldr	r3, [r4, #0]
    225c:	2b00      	cmp	r3, #0
    225e:	d0fb      	beq.n	2258 <_fstat_r+0x18>
    2260:	602b      	str	r3, [r5, #0]
    2262:	bd38      	pop	{r3, r4, r5, pc}
    2264:	1fff04fc 	.word	0x1fff04fc

00002268 <_isatty_r>:
    2268:	b538      	push	{r3, r4, r5, lr}
    226a:	4c07      	ldr	r4, [pc, #28]	; (2288 <_isatty_r+0x20>)
    226c:	2300      	movs	r3, #0
    226e:	4605      	mov	r5, r0
    2270:	4608      	mov	r0, r1
    2272:	6023      	str	r3, [r4, #0]
    2274:	f000 f858 	bl	2328 <_isatty>
    2278:	1c43      	adds	r3, r0, #1
    227a:	d000      	beq.n	227e <_isatty_r+0x16>
    227c:	bd38      	pop	{r3, r4, r5, pc}
    227e:	6823      	ldr	r3, [r4, #0]
    2280:	2b00      	cmp	r3, #0
    2282:	d0fb      	beq.n	227c <_isatty_r+0x14>
    2284:	602b      	str	r3, [r5, #0]
    2286:	bd38      	pop	{r3, r4, r5, pc}
    2288:	1fff04fc 	.word	0x1fff04fc

0000228c <_lseek_r>:
    228c:	b570      	push	{r4, r5, r6, lr}
    228e:	460d      	mov	r5, r1
    2290:	4c08      	ldr	r4, [pc, #32]	; (22b4 <_lseek_r+0x28>)
    2292:	4611      	mov	r1, r2
    2294:	4606      	mov	r6, r0
    2296:	461a      	mov	r2, r3
    2298:	4628      	mov	r0, r5
    229a:	2300      	movs	r3, #0
    229c:	6023      	str	r3, [r4, #0]
    229e:	f000 f853 	bl	2348 <_lseek>
    22a2:	1c43      	adds	r3, r0, #1
    22a4:	d000      	beq.n	22a8 <_lseek_r+0x1c>
    22a6:	bd70      	pop	{r4, r5, r6, pc}
    22a8:	6823      	ldr	r3, [r4, #0]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d0fb      	beq.n	22a6 <_lseek_r+0x1a>
    22ae:	6033      	str	r3, [r6, #0]
    22b0:	bd70      	pop	{r4, r5, r6, pc}
    22b2:	bf00      	nop
    22b4:	1fff04fc 	.word	0x1fff04fc

000022b8 <_malloc_usable_size_r>:
    22b8:	f851 0c04 	ldr.w	r0, [r1, #-4]
    22bc:	2800      	cmp	r0, #0
    22be:	f1a0 0004 	sub.w	r0, r0, #4
    22c2:	bfbc      	itt	lt
    22c4:	580b      	ldrlt	r3, [r1, r0]
    22c6:	18c0      	addlt	r0, r0, r3
    22c8:	4770      	bx	lr
    22ca:	bf00      	nop

000022cc <_read_r>:
    22cc:	b570      	push	{r4, r5, r6, lr}
    22ce:	460d      	mov	r5, r1
    22d0:	4c08      	ldr	r4, [pc, #32]	; (22f4 <_read_r+0x28>)
    22d2:	4611      	mov	r1, r2
    22d4:	4606      	mov	r6, r0
    22d6:	461a      	mov	r2, r3
    22d8:	4628      	mov	r0, r5
    22da:	2300      	movs	r3, #0
    22dc:	6023      	str	r3, [r4, #0]
    22de:	f000 f83b 	bl	2358 <_read>
    22e2:	1c43      	adds	r3, r0, #1
    22e4:	d000      	beq.n	22e8 <_read_r+0x1c>
    22e6:	bd70      	pop	{r4, r5, r6, pc}
    22e8:	6823      	ldr	r3, [r4, #0]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d0fb      	beq.n	22e6 <_read_r+0x1a>
    22ee:	6033      	str	r3, [r6, #0]
    22f0:	bd70      	pop	{r4, r5, r6, pc}
    22f2:	bf00      	nop
    22f4:	1fff04fc 	.word	0x1fff04fc

000022f8 <_close>:
    22f8:	4b02      	ldr	r3, [pc, #8]	; (2304 <_close+0xc>)
    22fa:	2258      	movs	r2, #88	; 0x58
    22fc:	601a      	str	r2, [r3, #0]
    22fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2302:	4770      	bx	lr
    2304:	1fff04fc 	.word	0x1fff04fc

00002308 <_fstat>:
    2308:	4b02      	ldr	r3, [pc, #8]	; (2314 <_fstat+0xc>)
    230a:	2258      	movs	r2, #88	; 0x58
    230c:	601a      	str	r2, [r3, #0]
    230e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2312:	4770      	bx	lr
    2314:	1fff04fc 	.word	0x1fff04fc

00002318 <_getpid>:
    2318:	4b02      	ldr	r3, [pc, #8]	; (2324 <_getpid+0xc>)
    231a:	2258      	movs	r2, #88	; 0x58
    231c:	601a      	str	r2, [r3, #0]
    231e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2322:	4770      	bx	lr
    2324:	1fff04fc 	.word	0x1fff04fc

00002328 <_isatty>:
    2328:	4b02      	ldr	r3, [pc, #8]	; (2334 <_isatty+0xc>)
    232a:	2258      	movs	r2, #88	; 0x58
    232c:	601a      	str	r2, [r3, #0]
    232e:	2000      	movs	r0, #0
    2330:	4770      	bx	lr
    2332:	bf00      	nop
    2334:	1fff04fc 	.word	0x1fff04fc

00002338 <_kill>:
    2338:	4b02      	ldr	r3, [pc, #8]	; (2344 <_kill+0xc>)
    233a:	2258      	movs	r2, #88	; 0x58
    233c:	601a      	str	r2, [r3, #0]
    233e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2342:	4770      	bx	lr
    2344:	1fff04fc 	.word	0x1fff04fc

00002348 <_lseek>:
    2348:	4b02      	ldr	r3, [pc, #8]	; (2354 <_lseek+0xc>)
    234a:	2258      	movs	r2, #88	; 0x58
    234c:	601a      	str	r2, [r3, #0]
    234e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2352:	4770      	bx	lr
    2354:	1fff04fc 	.word	0x1fff04fc

00002358 <_read>:
    2358:	4b02      	ldr	r3, [pc, #8]	; (2364 <_read+0xc>)
    235a:	2258      	movs	r2, #88	; 0x58
    235c:	601a      	str	r2, [r3, #0]
    235e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2362:	4770      	bx	lr
    2364:	1fff04fc 	.word	0x1fff04fc

00002368 <_sbrk>:
    2368:	4a04      	ldr	r2, [pc, #16]	; (237c <_sbrk+0x14>)
    236a:	4905      	ldr	r1, [pc, #20]	; (2380 <_sbrk+0x18>)
    236c:	6813      	ldr	r3, [r2, #0]
    236e:	2b00      	cmp	r3, #0
    2370:	bf08      	it	eq
    2372:	460b      	moveq	r3, r1
    2374:	4418      	add	r0, r3
    2376:	6010      	str	r0, [r2, #0]
    2378:	4618      	mov	r0, r3
    237a:	4770      	bx	lr
    237c:	1fff0230 	.word	0x1fff0230
    2380:	20000000 	.word	0x20000000

00002384 <_write>:
    2384:	4b02      	ldr	r3, [pc, #8]	; (2390 <_write+0xc>)
    2386:	2258      	movs	r2, #88	; 0x58
    2388:	601a      	str	r2, [r3, #0]
    238a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    238e:	4770      	bx	lr
    2390:	1fff04fc 	.word	0x1fff04fc

00002394 <_exit>:
    2394:	e7fe      	b.n	2394 <_exit>
    2396:	bf00      	nop

00002398 <setreg>:
static uint16_t num_encryption_rounds = 10;

uint8_t setreg(uint8_t* x, uint8_t len)
{
        uint32_t val;
        val = x[4] + (x[3] << 8) + (x[2] << 16) + (x[1] << 24);
    2398:	78c2      	ldrb	r2, [r0, #3]
    239a:	7903      	ldrb	r3, [r0, #4]
    239c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    23a0:	7882      	ldrb	r2, [r0, #2]
    23a2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    23a6:	7842      	ldrb	r2, [r0, #1]
    23a8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
//8:  TPI->ACPR
//9:  TPI->SPPR
//10: TPI->FFCR
//11: TPI->CSPSR
//12: ITM->TCR
        if       (x[0] == 0)    {DWT->CTRL = val;}
    23ac:	7802      	ldrb	r2, [r0, #0]
    23ae:	b912      	cbnz	r2, 23b6 <setreg+0x1e>
    23b0:	4a2e      	ldr	r2, [pc, #184]	; (246c <setreg+0xd4>)
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
    23b2:	6013      	str	r3, [r2, #0]
    23b4:	e003      	b.n	23be <setreg+0x26>
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
    23b6:	2a01      	cmp	r2, #1
    23b8:	d103      	bne.n	23c2 <setreg+0x2a>
    23ba:	4a2c      	ldr	r2, [pc, #176]	; (246c <setreg+0xd4>)
    23bc:	6213      	str	r3, [r2, #32]
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
        else if  (x[0] == 12)   {ITM->TCR     = val;}

	return 0x00;
}
    23be:	2000      	movs	r0, #0
    23c0:	4770      	bx	lr
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
    23c2:	2a02      	cmp	r2, #2
    23c4:	d102      	bne.n	23cc <setreg+0x34>
    23c6:	4a29      	ldr	r2, [pc, #164]	; (246c <setreg+0xd4>)
    23c8:	6313      	str	r3, [r2, #48]	; 0x30
    23ca:	e7f8      	b.n	23be <setreg+0x26>
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
    23cc:	2a03      	cmp	r2, #3
    23ce:	d109      	bne.n	23e4 <setreg+0x4c>
    23d0:	4a27      	ldr	r2, [pc, #156]	; (2470 <setreg+0xd8>)
    23d2:	6811      	ldr	r1, [r2, #0]
    23d4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    23d8:	6011      	str	r1, [r2, #0]
    23da:	6013      	str	r3, [r2, #0]
    23dc:	6813      	ldr	r3, [r2, #0]
    23de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    23e2:	e7e6      	b.n	23b2 <setreg+0x1a>
        else if  (x[0] == 4)    {ETM_SetupMode(); ETM->TESSEICR = val; ETM_TraceMode();}
    23e4:	2a04      	cmp	r2, #4
    23e6:	d107      	bne.n	23f8 <setreg+0x60>
    23e8:	4a21      	ldr	r2, [pc, #132]	; (2470 <setreg+0xd8>)
    23ea:	6811      	ldr	r1, [r2, #0]
    23ec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    23f0:	6011      	str	r1, [r2, #0]
    23f2:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
    23f6:	e7f1      	b.n	23dc <setreg+0x44>
        else if  (x[0] == 5)    {ETM_SetupMode(); ETM->TEEVR    = val; ETM_TraceMode();}
    23f8:	2a05      	cmp	r2, #5
    23fa:	d106      	bne.n	240a <setreg+0x72>
    23fc:	4a1c      	ldr	r2, [pc, #112]	; (2470 <setreg+0xd8>)
    23fe:	6811      	ldr	r1, [r2, #0]
    2400:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    2404:	6011      	str	r1, [r2, #0]
    2406:	6213      	str	r3, [r2, #32]
    2408:	e7e8      	b.n	23dc <setreg+0x44>
        else if  (x[0] == 6)    {ETM_SetupMode(); ETM->TECR1    = val; ETM_TraceMode();}
    240a:	2a06      	cmp	r2, #6
    240c:	d106      	bne.n	241c <setreg+0x84>
    240e:	4a18      	ldr	r2, [pc, #96]	; (2470 <setreg+0xd8>)
    2410:	6811      	ldr	r1, [r2, #0]
    2412:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    2416:	6011      	str	r1, [r2, #0]
    2418:	6253      	str	r3, [r2, #36]	; 0x24
    241a:	e7df      	b.n	23dc <setreg+0x44>
        else if  (x[0] == 7)    {ETM_SetupMode(); ETM->TRACEIDR = val; ETM_TraceMode();}
    241c:	2a07      	cmp	r2, #7
    241e:	d107      	bne.n	2430 <setreg+0x98>
    2420:	4a13      	ldr	r2, [pc, #76]	; (2470 <setreg+0xd8>)
    2422:	6811      	ldr	r1, [r2, #0]
    2424:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    2428:	6011      	str	r1, [r2, #0]
    242a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    242e:	e7d5      	b.n	23dc <setreg+0x44>
        else if  (x[0] == 8)    {TPI->ACPR    = val;}
    2430:	2a08      	cmp	r2, #8
    2432:	d102      	bne.n	243a <setreg+0xa2>
    2434:	4a0f      	ldr	r2, [pc, #60]	; (2474 <setreg+0xdc>)
    2436:	6113      	str	r3, [r2, #16]
    2438:	e7c1      	b.n	23be <setreg+0x26>
        else if  (x[0] == 9)    {TPI->SPPR    = val;}
    243a:	2a09      	cmp	r2, #9
    243c:	d103      	bne.n	2446 <setreg+0xae>
    243e:	4a0d      	ldr	r2, [pc, #52]	; (2474 <setreg+0xdc>)
    2440:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    2444:	e7bb      	b.n	23be <setreg+0x26>
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
    2446:	2a0a      	cmp	r2, #10
    2448:	d103      	bne.n	2452 <setreg+0xba>
    244a:	4a0a      	ldr	r2, [pc, #40]	; (2474 <setreg+0xdc>)
    244c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2450:	e7b5      	b.n	23be <setreg+0x26>
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
    2452:	2a0b      	cmp	r2, #11
    2454:	d102      	bne.n	245c <setreg+0xc4>
    2456:	4a07      	ldr	r2, [pc, #28]	; (2474 <setreg+0xdc>)
    2458:	6053      	str	r3, [r2, #4]
    245a:	e7b0      	b.n	23be <setreg+0x26>
        else if  (x[0] == 12)   {ITM->TCR     = val;}
    245c:	2a0c      	cmp	r2, #12
    245e:	bf04      	itt	eq
    2460:	f04f 4260 	moveq.w	r2, #3758096384	; 0xe0000000
    2464:	f8c2 3e80 	streq.w	r3, [r2, #3712]	; 0xe80
    2468:	e7a9      	b.n	23be <setreg+0x26>
    246a:	bf00      	nop
    246c:	e0001000 	.word	0xe0001000
    2470:	e0041000 	.word	0xe0041000
    2474:	e0040000 	.word	0xe0040000

00002478 <enc_multi_setnum>:
uint8_t enc_multi_setnum(uint8_t* t, uint8_t len)
{
    //Assumes user entered a number like [0, 200] to mean "200"
    //which is most sane looking for humans I think
    num_encryption_rounds = t[1];
    num_encryption_rounds |= t[0] << 8;
    2478:	7802      	ldrb	r2, [r0, #0]
    247a:	7843      	ldrb	r3, [r0, #1]
    247c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2480:	4a01      	ldr	r2, [pc, #4]	; (2488 <enc_multi_setnum+0x10>)
    return 0;
}
    2482:	2000      	movs	r0, #0
    num_encryption_rounds |= t[0] << 8;
    2484:	8013      	strh	r3, [r2, #0]
}
    2486:	4770      	bx	lr
    2488:	1fff0064 	.word	0x1fff0064

0000248c <reset>:

uint8_t reset(uint8_t* x, uint8_t len)
{
    // Reset key here if needed
    return 0x00;
}
    248c:	2000      	movs	r0, #0
    248e:	4770      	bx	lr

00002490 <getreg>:
{
    2490:	b508      	push	{r3, lr}
        if       (x[0] == 0)    {val = DWT->CTRL;}
    2492:	7803      	ldrb	r3, [r0, #0]
{
    2494:	4602      	mov	r2, r0
        if       (x[0] == 0)    {val = DWT->CTRL;}
    2496:	b913      	cbnz	r3, 249e <getreg+0xe>
    2498:	4b27      	ldr	r3, [pc, #156]	; (2538 <getreg+0xa8>)
        else if  (x[0] == 3)    {val = ETM->CR;}
    249a:	681b      	ldr	r3, [r3, #0]
    249c:	e008      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 1)    {val = DWT->COMP0;}
    249e:	2b01      	cmp	r3, #1
    24a0:	d102      	bne.n	24a8 <getreg+0x18>
    24a2:	4b25      	ldr	r3, [pc, #148]	; (2538 <getreg+0xa8>)
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
    24a4:	6a1b      	ldr	r3, [r3, #32]
    24a6:	e003      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 2)    {val = DWT->COMP1 ;}
    24a8:	2b02      	cmp	r3, #2
    24aa:	d10e      	bne.n	24ca <getreg+0x3a>
    24ac:	4b22      	ldr	r3, [pc, #136]	; (2538 <getreg+0xa8>)
    24ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        x[3] = val & 0xff;
    24b0:	70d3      	strb	r3, [r2, #3]
        x[2] = (val >> 8) & 0xff;
    24b2:	0a19      	lsrs	r1, r3, #8
    24b4:	7091      	strb	r1, [r2, #2]
        x[1] = (val >> 16) & 0xff;
    24b6:	0c19      	lsrs	r1, r3, #16
        x[0] = (val >> 24) & 0xff;
    24b8:	0e1b      	lsrs	r3, r3, #24
        x[1] = (val >> 16) & 0xff;
    24ba:	7051      	strb	r1, [r2, #1]
        x[0] = (val >> 24) & 0xff;
    24bc:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 4, x);
    24be:	2104      	movs	r1, #4
    24c0:	2072      	movs	r0, #114	; 0x72
    24c2:	f000 fa5b 	bl	297c <simpleserial_put>
}
    24c6:	2000      	movs	r0, #0
    24c8:	bd08      	pop	{r3, pc}
        else if  (x[0] == 3)    {val = ETM->CR;}
    24ca:	2b03      	cmp	r3, #3
    24cc:	d101      	bne.n	24d2 <getreg+0x42>
    24ce:	4b1b      	ldr	r3, [pc, #108]	; (253c <getreg+0xac>)
    24d0:	e7e3      	b.n	249a <getreg+0xa>
        else if  (x[0] == 4)    {val = ETM->TESSEICR;}
    24d2:	2b04      	cmp	r3, #4
    24d4:	d103      	bne.n	24de <getreg+0x4e>
    24d6:	4b19      	ldr	r3, [pc, #100]	; (253c <getreg+0xac>)
    24d8:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
    24dc:	e7e8      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
    24de:	2b05      	cmp	r3, #5
    24e0:	d101      	bne.n	24e6 <getreg+0x56>
    24e2:	4b16      	ldr	r3, [pc, #88]	; (253c <getreg+0xac>)
    24e4:	e7de      	b.n	24a4 <getreg+0x14>
        else if  (x[0] == 6)    {val = ETM->TECR1;}
    24e6:	2b06      	cmp	r3, #6
    24e8:	d102      	bne.n	24f0 <getreg+0x60>
    24ea:	4b14      	ldr	r3, [pc, #80]	; (253c <getreg+0xac>)
    24ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24ee:	e7df      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 7)    {val = ETM->TRACEIDR;}
    24f0:	2b07      	cmp	r3, #7
    24f2:	d103      	bne.n	24fc <getreg+0x6c>
    24f4:	4b11      	ldr	r3, [pc, #68]	; (253c <getreg+0xac>)
    24f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    24fa:	e7d9      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 8)    {val = TPI->ACPR;}
    24fc:	2b08      	cmp	r3, #8
    24fe:	d102      	bne.n	2506 <getreg+0x76>
    2500:	4b0f      	ldr	r3, [pc, #60]	; (2540 <getreg+0xb0>)
    2502:	691b      	ldr	r3, [r3, #16]
    2504:	e7d4      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 9)    {val = TPI->SPPR;}
    2506:	2b09      	cmp	r3, #9
    2508:	d103      	bne.n	2512 <getreg+0x82>
    250a:	4b0d      	ldr	r3, [pc, #52]	; (2540 <getreg+0xb0>)
    250c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    2510:	e7ce      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 10)   {val = TPI->FFCR;}
    2512:	2b0a      	cmp	r3, #10
    2514:	d103      	bne.n	251e <getreg+0x8e>
    2516:	4b0a      	ldr	r3, [pc, #40]	; (2540 <getreg+0xb0>)
    2518:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    251c:	e7c8      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 11)   {val = TPI->CSPSR;}
    251e:	2b0b      	cmp	r3, #11
    2520:	d102      	bne.n	2528 <getreg+0x98>
    2522:	4b07      	ldr	r3, [pc, #28]	; (2540 <getreg+0xb0>)
    2524:	685b      	ldr	r3, [r3, #4]
    2526:	e7c3      	b.n	24b0 <getreg+0x20>
        else if  (x[0] == 12)   {val = ITM->TCR;}
    2528:	2b0c      	cmp	r3, #12
    252a:	bf0a      	itet	eq
    252c:	f04f 4360 	moveq.w	r3, #3758096384	; 0xe0000000
        else {val = 0;}
    2530:	2300      	movne	r3, #0
        else if  (x[0] == 12)   {val = ITM->TCR;}
    2532:	f8d3 3e80 	ldreq.w	r3, [r3, #3712]	; 0xe80
    2536:	e7bb      	b.n	24b0 <getreg+0x20>
    2538:	e0001000 	.word	0xe0001000
    253c:	e0041000 	.word	0xe0041000
    2540:	e0040000 	.word	0xe0040000

00002544 <set_pcsample_params>:
{
    2544:	b570      	push	{r4, r5, r6, lr}
    pcsamp_enable = x[0] & 1;
    2546:	7803      	ldrb	r3, [r0, #0]
    2548:	4910      	ldr	r1, [pc, #64]	; (258c <set_pcsample_params+0x48>)
    postreset = x[3] & 0xf;
    254a:	78c4      	ldrb	r4, [r0, #3]
    pcsamp_enable = x[0] & 1;
    254c:	f003 0301 	and.w	r3, r3, #1
    2550:	700b      	strb	r3, [r1, #0]
    postinit  = x[2] & 0xf;
    2552:	7881      	ldrb	r1, [r0, #2]
    cyctap = x[1] & 1;
    2554:	7843      	ldrb	r3, [r0, #1]
{
    2556:	4602      	mov	r2, r0
    postinit  = x[2] & 0xf;
    2558:	f001 010f 	and.w	r1, r1, #15
    DWT->CTRL = 0;
    255c:	480c      	ldr	r0, [pc, #48]	; (2590 <set_pcsample_params+0x4c>)
    cyctap = x[1] & 1;
    255e:	f003 0601 	and.w	r6, r3, #1
    DWT->CTRL = 0;
    2562:	2500      	movs	r5, #0
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
    2564:	014b      	lsls	r3, r1, #5
    DWT->CTRL = 0;
    2566:	6005      	str	r5, [r0, #0]
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
    2568:	6003      	str	r3, [r0, #0]
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
    256a:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
    256e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    postreset = x[3] & 0xf;
    2572:	f004 040f 	and.w	r4, r4, #15
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
    2576:	f043 0301 	orr.w	r3, r3, #1
    257a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    DWT->CTRL = (cyctap << DWT_CTRL_CYCTAP_Pos)
    257e:	6003      	str	r3, [r0, #0]
    simpleserial_put('r', 4, x);
    2580:	2104      	movs	r1, #4
    2582:	2072      	movs	r0, #114	; 0x72
    2584:	f000 f9fa 	bl	297c <simpleserial_put>
}
    2588:	4628      	mov	r0, r5
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	1fff0234 	.word	0x1fff0234
    2590:	e0001000 	.word	0xe0001000

00002594 <get_mask>:
{
    2594:	b508      	push	{r3, lr}
  aes_indep_mask(m, len);
    2596:	f001 fd5a 	bl	404e <aes_indep_mask>
}
    259a:	2000      	movs	r0, #0
    259c:	bd08      	pop	{r3, pc}

0000259e <get_key>:
{
    259e:	b508      	push	{r3, lr}
    aes_indep_key(k);
    25a0:	f001 fd4f 	bl	4042 <aes_indep_key>
}
    25a4:	2000      	movs	r0, #0
    25a6:	bd08      	pop	{r3, pc}

000025a8 <enable_trace>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
    25a8:	4a26      	ldr	r2, [pc, #152]	; (2644 <enable_trace+0x9c>)
    25aa:	68d3      	ldr	r3, [r2, #12]
    25ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
{
    25b0:	b510      	push	{r4, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
    25b2:	60d3      	str	r3, [r2, #12]
    TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
    25b4:	4b24      	ldr	r3, [pc, #144]	; (2648 <enable_trace+0xa0>)
    ITM->LAR = 0xC5ACCE55;
    25b6:	4c25      	ldr	r4, [pc, #148]	; (264c <enable_trace+0xa4>)
    TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
    25b8:	2200      	movs	r2, #0
    TPI->CSPSR =0x00000008; // 4 trace lanes
    25ba:	2008      	movs	r0, #8
    TPI->FFCR = 0x102; // packet framing enabled
    25bc:	f44f 7181 	mov.w	r1, #258	; 0x102
    TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
    25c0:	611a      	str	r2, [r3, #16]
       TPI->SPPR = 0; // default to parallel trace mode
    25c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    TPI->FFCR = 0x102; // packet framing enabled
    25c6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    TPI->CSPSR =0x00000008; // 4 trace lanes
    25ca:	6058      	str	r0, [r3, #4]
    ITM->LAR = 0xC5ACCE55;
    25cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
    25d0:	491f      	ldr	r1, [pc, #124]	; (2650 <enable_trace+0xa8>)
    ITM->LAR = 0xC5ACCE55;
    25d2:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
    25d6:	f8c3 1e80 	str.w	r1, [r3, #3712]	; 0xe80
    ITM->TER = 0xFFFFFFFF; // Enable all stimulus ports
    25da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    25de:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ITM->TPR = 0x00000000; // allow unpriviledged access
    25e2:	f8c3 2e40 	str.w	r2, [r3, #3648]	; 0xe40
    DWT->CTRL = (0xf << DWT_CTRL_POSTINIT_Pos);// countdown counter for PC sampling, must be written
    25e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    25ea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    25ee:	6019      	str	r1, [r3, #0]
    DWT->CTRL |=(1 << DWT_CTRL_CYCTAP_Pos)     // Prescaler for PC sampling: 0 = x32, 1 = x512
    25f0:	6819      	ldr	r1, [r3, #0]
    25f2:	f441 61c2 	orr.w	r1, r1, #1552	; 0x610
    25f6:	f041 0101 	orr.w	r1, r1, #1
    25fa:	6019      	str	r1, [r3, #0]
    DWT->COMP0 = 0x00001d60; // AES subbytes
    25fc:	f44f 51eb 	mov.w	r1, #7520	; 0x1d60
    2600:	6219      	str	r1, [r3, #32]
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
    2602:	f641 5168 	movw	r1, #7528	; 0x1d68
    DWT->MASK0 = 0;
    2606:	625a      	str	r2, [r3, #36]	; 0x24
    DWT->FUNCTION0 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
    2608:	6298      	str	r0, [r3, #40]	; 0x28
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
    260a:	6319      	str	r1, [r3, #48]	; 0x30
    DWT->MASK1 = 0;
    260c:	635a      	str	r2, [r3, #52]	; 0x34
    DWT->FUNCTION1 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
    260e:	6398      	str	r0, [r3, #56]	; 0x38
    ETM->LAR = 0xC5ACCE55;
    2610:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    2614:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ETM_SetupMode();
    2618:	6819      	ldr	r1, [r3, #0]
    261a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    261e:	6019      	str	r1, [r3, #0]
    ETM->CR = ETM_CR_ETMEN; // Enable ETM output port
    2620:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2624:	6019      	str	r1, [r3, #0]
    ETM->TRACEIDR = 1; // Trace bus ID for TPIU
    2626:	2101      	movs	r1, #1
    2628:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
    262c:	4909      	ldr	r1, [pc, #36]	; (2654 <enable_trace+0xac>)
    ETM->FFLR = 0; // Stall processor when FIFO is full
    262e:	62da      	str	r2, [r3, #44]	; 0x2c
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
    2630:	6219      	str	r1, [r3, #32]
    ETM->TESSEICR = 0xf; // set EmbeddedICE watchpoint 0 as a TraceEnable start resource.
    2632:	210f      	movs	r1, #15
    2634:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
    ETM->TECR1 = 0; // tracing is unaffected by the trace start/stop logic
    2638:	625a      	str	r2, [r3, #36]	; 0x24
    ETM_TraceMode();
    263a:	681a      	ldr	r2, [r3, #0]
    263c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    2640:	601a      	str	r2, [r3, #0]
    2642:	bd10      	pop	{r4, pc}
    2644:	e000edf0 	.word	0xe000edf0
    2648:	e0040000 	.word	0xe0040000
    264c:	c5acce55 	.word	0xc5acce55
    2650:	00010009 	.word	0x00010009
    2654:	000150a0 	.word	0x000150a0

00002658 <reenable_trace>:
{
    2658:	b508      	push	{r3, lr}
        enable_trace();
    265a:	f7ff ffa5 	bl	25a8 <enable_trace>
}
    265e:	2000      	movs	r0, #0
    2660:	bd08      	pop	{r3, pc}

00002662 <print>:
{
    2662:	b510      	push	{r4, lr}
    2664:	1e44      	subs	r4, r0, #1
    while (*ptr != (char)0)
    2666:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    266a:	b900      	cbnz	r0, 266e <print+0xc>
}
    266c:	bd10      	pop	{r4, pc}
        putch(*ptr);
    266e:	f000 fb1f 	bl	2cb0 <putch>
    2672:	e7f8      	b.n	2666 <print+0x4>

00002674 <info>:
{
    2674:	b508      	push	{r3, lr}
        print("ChipWhisperer simpleserial-trace, compiled ");
    2676:	4808      	ldr	r0, [pc, #32]	; (2698 <info+0x24>)
    2678:	f7ff fff3 	bl	2662 <print>
        print(__DATE__);
    267c:	4807      	ldr	r0, [pc, #28]	; (269c <info+0x28>)
    267e:	f7ff fff0 	bl	2662 <print>
        print(", ");
    2682:	4807      	ldr	r0, [pc, #28]	; (26a0 <info+0x2c>)
    2684:	f7ff ffed 	bl	2662 <print>
        print(__TIME__);
    2688:	4806      	ldr	r0, [pc, #24]	; (26a4 <info+0x30>)
    268a:	f7ff ffea 	bl	2662 <print>
        print("\n");
    268e:	4806      	ldr	r0, [pc, #24]	; (26a8 <info+0x34>)
    2690:	f7ff ffe7 	bl	2662 <print>
}
    2694:	2000      	movs	r0, #0
    2696:	bd08      	pop	{r3, pc}
    2698:	000040e1 	.word	0x000040e1
    269c:	0000410d 	.word	0x0000410d
    26a0:	00004119 	.word	0x00004119
    26a4:	0000411c 	.word	0x0000411c
    26a8:	000040ce 	.word	0x000040ce

000026ac <ITM_Print>:
    if ((ITM->TCR & ITM_TCR_ITMENA_Msk) && (ITM->TER & (1UL << port)))
    26ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    26b0:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
    26b4:	07d2      	lsls	r2, r2, #31
    26b6:	d513      	bpl.n	26e0 <ITM_Print+0x34>
    26b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    26bc:	40c3      	lsrs	r3, r0
    26be:	07db      	lsls	r3, r3, #31
    26c0:	d50e      	bpl.n	26e0 <ITM_Print+0x34>
    26c2:	0080      	lsls	r0, r0, #2
    26c4:	3901      	subs	r1, #1
    26c6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
        while (*p)
    26ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    26ce:	b913      	cbnz	r3, 26d6 <ITM_Print+0x2a>
        print("ITM alive!\n");
    26d0:	4804      	ldr	r0, [pc, #16]	; (26e4 <ITM_Print+0x38>)
    else {print("Couldn't print!\n");}
    26d2:	f7ff bfc6 	b.w	2662 <print>
            while (ITM->PORT[port].u32 == 0);
    26d6:	6802      	ldr	r2, [r0, #0]
    26d8:	2a00      	cmp	r2, #0
    26da:	d0fc      	beq.n	26d6 <ITM_Print+0x2a>
            ITM->PORT[port].u8 = *p++;
    26dc:	7003      	strb	r3, [r0, #0]
    26de:	e7f4      	b.n	26ca <ITM_Print+0x1e>
    else {print("Couldn't print!\n");}
    26e0:	4801      	ldr	r0, [pc, #4]	; (26e8 <ITM_Print+0x3c>)
    26e2:	e7f6      	b.n	26d2 <ITM_Print+0x26>
    26e4:	000040c4 	.word	0x000040c4
    26e8:	000040d0 	.word	0x000040d0

000026ec <test_itm>:
{
    26ec:	b508      	push	{r3, lr}
    ITM_Print(x[0], "ITM alive!\n");
    26ee:	4903      	ldr	r1, [pc, #12]	; (26fc <test_itm+0x10>)
    26f0:	7800      	ldrb	r0, [r0, #0]
    26f2:	f7ff ffdb 	bl	26ac <ITM_Print>
}
    26f6:	2000      	movs	r0, #0
    26f8:	bd08      	pop	{r3, pc}
    26fa:	bf00      	nop
    26fc:	000040c4 	.word	0x000040c4

00002700 <trigger_high_pcsamp>:
    if (pcsamp_enable == 1)
    2700:	4b05      	ldr	r3, [pc, #20]	; (2718 <trigger_high_pcsamp+0x18>)
    2702:	781b      	ldrb	r3, [r3, #0]
    2704:	2b01      	cmp	r3, #1
        DWT->CTRL |= (1 << DWT_CTRL_PCSAMPLENA_Pos); // enable PC sampling
    2706:	bf01      	itttt	eq
    2708:	4a04      	ldreq	r2, [pc, #16]	; (271c <trigger_high_pcsamp+0x1c>)
    270a:	6813      	ldreq	r3, [r2, #0]
    270c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
    2710:	6013      	streq	r3, [r2, #0]
    trigger_high();
    2712:	f000 baaf 	b.w	2c74 <trigger_high>
    2716:	bf00      	nop
    2718:	1fff0234 	.word	0x1fff0234
    271c:	e0001000 	.word	0xe0001000

00002720 <trigger_low_pcsamp>:
{
    2720:	b508      	push	{r3, lr}
    trigger_low();
    2722:	f000 faaf 	bl	2c84 <trigger_low>
    DWT->CTRL &= ~(1 << DWT_CTRL_PCSAMPLENA_Pos); // disable PC sampling
    2726:	4a03      	ldr	r2, [pc, #12]	; (2734 <trigger_low_pcsamp+0x14>)
    2728:	6813      	ldr	r3, [r2, #0]
    272a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    272e:	6013      	str	r3, [r2, #0]
    2730:	bd08      	pop	{r3, pc}
    2732:	bf00      	nop
    2734:	e0001000 	.word	0xe0001000

00002738 <get_pt>:
{
    2738:	b510      	push	{r4, lr}
    273a:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
    273c:	f001 fc85 	bl	404a <aes_indep_enc_pretrigger>
    trigger_high_pcsamp();
    2740:	f7ff ffde 	bl	2700 <trigger_high_pcsamp>
    aes_indep_enc(pt); /* encrypting the data block */
    2744:	4620      	mov	r0, r4
    2746:	f001 fc7e 	bl	4046 <aes_indep_enc>
    trigger_low_pcsamp();
    274a:	f7ff ffe9 	bl	2720 <trigger_low_pcsamp>
    aes_indep_enc_posttrigger(pt);
    274e:	4620      	mov	r0, r4
    2750:	f001 fc7c 	bl	404c <aes_indep_enc_posttrigger>
    simpleserial_put('r', 16, pt);
    2754:	4622      	mov	r2, r4
    2756:	2110      	movs	r1, #16
    2758:	2072      	movs	r0, #114	; 0x72
    275a:	f000 f90f 	bl	297c <simpleserial_put>
}
    275e:	2000      	movs	r0, #0
    2760:	bd10      	pop	{r4, pc}
    2762:	0000      	movs	r0, r0

00002764 <enc_multi_getpt>:
{
    2764:	b570      	push	{r4, r5, r6, lr}
    2766:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
    2768:	f001 fc6f 	bl	404a <aes_indep_enc_pretrigger>
    for(unsigned int i = 0; i < num_encryption_rounds; i++){
    276c:	4e0b      	ldr	r6, [pc, #44]	; (279c <enc_multi_getpt+0x38>)
    276e:	2500      	movs	r5, #0
    2770:	8833      	ldrh	r3, [r6, #0]
    2772:	429d      	cmp	r5, r3
    2774:	d309      	bcc.n	278a <enc_multi_getpt+0x26>
    aes_indep_enc_posttrigger(pt);
    2776:	4620      	mov	r0, r4
    2778:	f001 fc68 	bl	404c <aes_indep_enc_posttrigger>
	simpleserial_put('r', 16, pt);
    277c:	4622      	mov	r2, r4
    277e:	2110      	movs	r1, #16
    2780:	2072      	movs	r0, #114	; 0x72
    2782:	f000 f8fb 	bl	297c <simpleserial_put>
}
    2786:	2000      	movs	r0, #0
    2788:	bd70      	pop	{r4, r5, r6, pc}
        trigger_high_pcsamp();
    278a:	f7ff ffb9 	bl	2700 <trigger_high_pcsamp>
        aes_indep_enc(pt);
    278e:	4620      	mov	r0, r4
    2790:	f001 fc59 	bl	4046 <aes_indep_enc>
    for(unsigned int i = 0; i < num_encryption_rounds; i++){
    2794:	3501      	adds	r5, #1
        trigger_low_pcsamp();
    2796:	f7ff ffc3 	bl	2720 <trigger_low_pcsamp>
    279a:	e7e9      	b.n	2770 <enc_multi_getpt+0xc>
    279c:	1fff0064 	.word	0x1fff0064

000027a0 <main>:

int main(void)
{
    27a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
    27a2:	4b2e      	ldr	r3, [pc, #184]	; (285c <main+0xbc>)
    27a4:	466a      	mov	r2, sp
    27a6:	f103 0610 	add.w	r6, r3, #16
    27aa:	466d      	mov	r5, sp
    27ac:	6818      	ldr	r0, [r3, #0]
    27ae:	6859      	ldr	r1, [r3, #4]
    27b0:	4614      	mov	r4, r2
    27b2:	c403      	stmia	r4!, {r0, r1}
    27b4:	3308      	adds	r3, #8
    27b6:	42b3      	cmp	r3, r6
    27b8:	4622      	mov	r2, r4
    27ba:	d1f7      	bne.n	27ac <main+0xc>

    platform_init();
    27bc:	f000 f9fc 	bl	2bb8 <platform_init>
    init_uart();
    27c0:	f000 fa0c 	bl	2bdc <init_uart>
    trigger_setup();
    27c4:	f000 fa38 	bl	2c38 <trigger_setup>

    aes_indep_init();
    27c8:	f001 fc3a 	bl	4040 <aes_indep_init>
    aes_indep_key(tmp);
    27cc:	4628      	mov	r0, r5
    27ce:	f001 fc38 	bl	4042 <aes_indep_key>

    simpleserial_init();
    27d2:	f000 f8bb 	bl	294c <simpleserial_init>
    simpleserial_addcmd('k', 16, get_key);
    27d6:	4a22      	ldr	r2, [pc, #136]	; (2860 <main+0xc0>)
    27d8:	2110      	movs	r1, #16
    27da:	206b      	movs	r0, #107	; 0x6b
    27dc:	f000 f8b2 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16, get_pt);
    27e0:	4a20      	ldr	r2, [pc, #128]	; (2864 <main+0xc4>)
    27e2:	2110      	movs	r1, #16
    27e4:	2070      	movs	r0, #112	; 0x70
    27e6:	f000 f8ad 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('x', 0, reset);
    27ea:	4a1f      	ldr	r2, [pc, #124]	; (2868 <main+0xc8>)
    27ec:	2100      	movs	r1, #0
    27ee:	2078      	movs	r0, #120	; 0x78
    27f0:	f000 f8a8 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
    27f4:	2301      	movs	r3, #1
    27f6:	4a1d      	ldr	r2, [pc, #116]	; (286c <main+0xcc>)
    27f8:	2112      	movs	r1, #18
    27fa:	206d      	movs	r0, #109	; 0x6d
    27fc:	f000 f886 	bl	290c <simpleserial_addcmd_flags>
    simpleserial_addcmd('i', 0, info);
    2800:	4a1b      	ldr	r2, [pc, #108]	; (2870 <main+0xd0>)
    2802:	2100      	movs	r1, #0
    2804:	2069      	movs	r0, #105	; 0x69
    2806:	f000 f89d 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('e', 0, reenable_trace);
    280a:	4a1a      	ldr	r2, [pc, #104]	; (2874 <main+0xd4>)
    280c:	2100      	movs	r1, #0
    280e:	2065      	movs	r0, #101	; 0x65
    2810:	f000 f898 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('t', 1, test_itm);
    2814:	4a18      	ldr	r2, [pc, #96]	; (2878 <main+0xd8>)
    2816:	2101      	movs	r1, #1
    2818:	2074      	movs	r0, #116	; 0x74
    281a:	f000 f893 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('s', 5, setreg);
    281e:	4a17      	ldr	r2, [pc, #92]	; (287c <main+0xdc>)
    2820:	2105      	movs	r1, #5
    2822:	2073      	movs	r0, #115	; 0x73
    2824:	f000 f88e 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('g', 5, getreg);
    2828:	4a15      	ldr	r2, [pc, #84]	; (2880 <main+0xe0>)
    282a:	2105      	movs	r1, #5
    282c:	2067      	movs	r0, #103	; 0x67
    282e:	f000 f889 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('c', 4, set_pcsample_params);
    2832:	4a14      	ldr	r2, [pc, #80]	; (2884 <main+0xe4>)
    2834:	2104      	movs	r1, #4
    2836:	2063      	movs	r0, #99	; 0x63
    2838:	f000 f884 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('n', 2, enc_multi_setnum);
    283c:	4a12      	ldr	r2, [pc, #72]	; (2888 <main+0xe8>)
    283e:	2102      	movs	r1, #2
    2840:	206e      	movs	r0, #110	; 0x6e
    2842:	f000 f87f 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('f', 16, enc_multi_getpt);
    2846:	4a11      	ldr	r2, [pc, #68]	; (288c <main+0xec>)
    2848:	2110      	movs	r1, #16
    284a:	2066      	movs	r0, #102	; 0x66
    284c:	f000 f87a 	bl	2944 <simpleserial_addcmd>

    enable_trace();
    2850:	f7ff feaa 	bl	25a8 <enable_trace>

    while(1)
        simpleserial_get();
    2854:	f000 f8ee 	bl	2a34 <simpleserial_get>
    2858:	e7fc      	b.n	2854 <main+0xb4>
    285a:	bf00      	nop
    285c:	00004050 	.word	0x00004050
    2860:	0000259f 	.word	0x0000259f
    2864:	00002739 	.word	0x00002739
    2868:	0000248d 	.word	0x0000248d
    286c:	00002595 	.word	0x00002595
    2870:	00002675 	.word	0x00002675
    2874:	00002659 	.word	0x00002659
    2878:	000026ed 	.word	0x000026ed
    287c:	00002399 	.word	0x00002399
    2880:	00002491 	.word	0x00002491
    2884:	00002545 	.word	0x00002545
    2888:	00002479 	.word	0x00002479
    288c:	00002765 	.word	0x00002765

00002890 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
    2890:	2001      	movs	r0, #1
    2892:	4770      	bx	lr

00002894 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
    2894:	b570      	push	{r4, r5, r6, lr}
    2896:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
    2898:	4613      	mov	r3, r2
    289a:	1a9c      	subs	r4, r3, r2
    289c:	42a0      	cmp	r0, r4
    289e:	dc01      	bgt.n	28a4 <hex_decode+0x10>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
    28a0:	2000      	movs	r0, #0
}
    28a2:	bd70      	pop	{r4, r5, r6, pc}
		char n_lo = ascii_buf[2*i+1];
    28a4:	780d      	ldrb	r5, [r1, #0]
		char n_hi = ascii_buf[2*i];
    28a6:	f811 4c01 	ldrb.w	r4, [r1, #-1]
		if(n_lo >= '0' && n_lo <= '9')
    28aa:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
    28ae:	b2f6      	uxtb	r6, r6
    28b0:	2e09      	cmp	r6, #9
    28b2:	d80c      	bhi.n	28ce <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
    28b4:	701e      	strb	r6, [r3, #0]
		if(n_hi >= '0' && n_hi <= '9')
    28b6:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
    28ba:	b2ee      	uxtb	r6, r5
    28bc:	2e09      	cmp	r6, #9
    28be:	d815      	bhi.n	28ec <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
    28c0:	781c      	ldrb	r4, [r3, #0]
    28c2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
    28c6:	701c      	strb	r4, [r3, #0]
    28c8:	3102      	adds	r1, #2
    28ca:	3301      	adds	r3, #1
    28cc:	e7e5      	b.n	289a <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
    28ce:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
    28d2:	2e05      	cmp	r6, #5
    28d4:	d802      	bhi.n	28dc <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
    28d6:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
    28d8:	701d      	strb	r5, [r3, #0]
    28da:	e7ec      	b.n	28b6 <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
    28dc:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
    28e0:	2e05      	cmp	r6, #5
    28e2:	d901      	bls.n	28e8 <hex_decode+0x54>
			return 1;
    28e4:	2001      	movs	r0, #1
    28e6:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
    28e8:	3d57      	subs	r5, #87	; 0x57
    28ea:	e7f5      	b.n	28d8 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
    28ec:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
    28f0:	2d05      	cmp	r5, #5
    28f2:	d802      	bhi.n	28fa <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
    28f4:	f1a4 0537 	sub.w	r5, r4, #55	; 0x37
    28f8:	e7e2      	b.n	28c0 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
    28fa:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    28fe:	2d05      	cmp	r5, #5
    2900:	d8f0      	bhi.n	28e4 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
    2902:	781d      	ldrb	r5, [r3, #0]
    2904:	3c57      	subs	r4, #87	; 0x57
    2906:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
    290a:	e7dc      	b.n	28c6 <hex_decode+0x32>

0000290c <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
    290c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(num_commands >= MAX_SS_CMDS)
    290e:	4e0b      	ldr	r6, [pc, #44]	; (293c <simpleserial_addcmd_flags+0x30>)
    2910:	6834      	ldr	r4, [r6, #0]
    2912:	2c0f      	cmp	r4, #15
    2914:	dc0f      	bgt.n	2936 <simpleserial_addcmd_flags+0x2a>
		return 1;

	if(len >= MAX_SS_LEN)
    2916:	29ff      	cmp	r1, #255	; 0xff
    2918:	d80d      	bhi.n	2936 <simpleserial_addcmd_flags+0x2a>
		return 1;

	commands[num_commands].c   = c;
    291a:	f8df e024 	ldr.w	lr, [pc, #36]	; 2940 <simpleserial_addcmd_flags+0x34>
    291e:	0127      	lsls	r7, r4, #4
    2920:	eb0e 0507 	add.w	r5, lr, r7
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	commands[num_commands].flags = fl;
	num_commands++;
    2924:	3401      	adds	r4, #1
	commands[num_commands].flags = fl;
    2926:	732b      	strb	r3, [r5, #12]
	commands[num_commands].c   = c;
    2928:	f80e 0007 	strb.w	r0, [lr, r7]
	commands[num_commands].len = len;
    292c:	6069      	str	r1, [r5, #4]
	commands[num_commands].fp  = fp;
    292e:	60aa      	str	r2, [r5, #8]
	num_commands++;
    2930:	6034      	str	r4, [r6, #0]

	return 0;
    2932:	2000      	movs	r0, #0
    2934:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 1;
    2936:	2001      	movs	r0, #1
}
    2938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    293a:	bf00      	nop
    293c:	1fff0338 	.word	0x1fff0338
    2940:	1fff0238 	.word	0x1fff0238

00002944 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
    2944:	2300      	movs	r3, #0
    2946:	f7ff bfe1 	b.w	290c <simpleserial_addcmd_flags>
    294a:	0000      	movs	r0, r0

0000294c <simpleserial_init>:
{
    294c:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
    294e:	4a08      	ldr	r2, [pc, #32]	; (2970 <simpleserial_init+0x24>)
    2950:	2100      	movs	r1, #0
    2952:	2076      	movs	r0, #118	; 0x76
    2954:	f7ff fff6 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
    2958:	4a06      	ldr	r2, [pc, #24]	; (2974 <simpleserial_init+0x28>)
    295a:	2100      	movs	r1, #0
    295c:	2077      	movs	r0, #119	; 0x77
    295e:	f7ff fff1 	bl	2944 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
    2962:	4a05      	ldr	r2, [pc, #20]	; (2978 <simpleserial_init+0x2c>)
    2964:	2100      	movs	r1, #0
    2966:	2079      	movs	r0, #121	; 0x79
}
    2968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
    296c:	f7ff bfea 	b.w	2944 <simpleserial_addcmd>
    2970:	00002891 	.word	0x00002891
    2974:	000029e1 	.word	0x000029e1
    2978:	000029c1 	.word	0x000029c1

0000297c <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
    297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2980:	4615      	mov	r5, r2
    2982:	460f      	mov	r7, r1
	// Write first character
	putch(c);
    2984:	f000 f994 	bl	2cb0 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
    2988:	4e0c      	ldr	r6, [pc, #48]	; (29bc <simpleserial_put+0x40>)
	for(int i = 0; i < size; i++)
    298a:	462c      	mov	r4, r5
    298c:	1b63      	subs	r3, r4, r5
    298e:	429f      	cmp	r7, r3
    2990:	dc04      	bgt.n	299c <simpleserial_put+0x20>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
    2992:	200a      	movs	r0, #10
}
    2994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	putch('\n');
    2998:	f000 b98a 	b.w	2cb0 <putch>
    299c:	46a0      	mov	r8, r4
		putch(hex_lookup[output[i] >> 4 ]);
    299e:	f814 3b01 	ldrb.w	r3, [r4], #1
    29a2:	091b      	lsrs	r3, r3, #4
    29a4:	5cf0      	ldrb	r0, [r6, r3]
    29a6:	f000 f983 	bl	2cb0 <putch>
		putch(hex_lookup[output[i] & 0xF]);
    29aa:	f898 3000 	ldrb.w	r3, [r8]
    29ae:	f003 030f 	and.w	r3, r3, #15
    29b2:	5cf0      	ldrb	r0, [r6, r3]
    29b4:	f000 f97c 	bl	2cb0 <putch>
    29b8:	e7e8      	b.n	298c <simpleserial_put+0x10>
    29ba:	bf00      	nop
    29bc:	00004125 	.word	0x00004125

000029c0 <ss_num_commands>:
{
    29c0:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
    29c2:	4b06      	ldr	r3, [pc, #24]	; (29dc <ss_num_commands+0x1c>)
    29c4:	aa02      	add	r2, sp, #8
    29c6:	681b      	ldr	r3, [r3, #0]
    29c8:	f802 3d01 	strb.w	r3, [r2, #-1]!
    simpleserial_put('r', 0x01, &ncmds);
    29cc:	2101      	movs	r1, #1
    29ce:	2072      	movs	r0, #114	; 0x72
    29d0:	f7ff ffd4 	bl	297c <simpleserial_put>
}
    29d4:	2000      	movs	r0, #0
    29d6:	b003      	add	sp, #12
    29d8:	f85d fb04 	ldr.w	pc, [sp], #4
    29dc:	1fff0338 	.word	0x1fff0338

000029e0 <ss_get_commands>:
{
    29e0:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
    29e2:	4b12      	ldr	r3, [pc, #72]	; (2a2c <ss_get_commands+0x4c>)
        repr_cmd_buf[i].c = commands[i].c;
    29e4:	4c12      	ldr	r4, [pc, #72]	; (2a30 <ss_get_commands+0x50>)
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
    29e6:	6819      	ldr	r1, [r3, #0]
{
    29e8:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
    29ea:	b2ce      	uxtb	r6, r1
    29ec:	2000      	movs	r0, #0
    29ee:	b2c3      	uxtb	r3, r0
    29f0:	42b3      	cmp	r3, r6
    29f2:	f100 0001 	add.w	r0, r0, #1
    29f6:	db09      	blt.n	2a0c <ss_get_commands+0x2c>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
    29f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    29fc:	466a      	mov	r2, sp
    29fe:	b2c9      	uxtb	r1, r1
    2a00:	2072      	movs	r0, #114	; 0x72
    2a02:	f7ff ffbb 	bl	297c <simpleserial_put>
}
    2a06:	2000      	movs	r0, #0
    2a08:	b00c      	add	sp, #48	; 0x30
    2a0a:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
    2a0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2a10:	ad0c      	add	r5, sp, #48	; 0x30
    2a12:	011b      	lsls	r3, r3, #4
    2a14:	442a      	add	r2, r5
    2a16:	18e5      	adds	r5, r4, r3
    2a18:	5ce3      	ldrb	r3, [r4, r3]
    2a1a:	f802 3c30 	strb.w	r3, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
    2a1e:	686b      	ldr	r3, [r5, #4]
    2a20:	f802 3c2f 	strb.w	r3, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
    2a24:	7b2b      	ldrb	r3, [r5, #12]
    2a26:	f802 3c2e 	strb.w	r3, [r2, #-46]
    2a2a:	e7e0      	b.n	29ee <ss_get_commands+0xe>
    2a2c:	1fff0338 	.word	0x1fff0338
    2a30:	1fff0238 	.word	0x1fff0238

00002a34 <simpleserial_get>:
{
    2a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a38:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
    2a3c:	f000 f92a 	bl	2c94 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
    2a40:	4b2c      	ldr	r3, [pc, #176]	; (2af4 <simpleserial_get+0xc0>)
		if(commands[cmd].c == c)
    2a42:	492d      	ldr	r1, [pc, #180]	; (2af8 <simpleserial_get+0xc4>)
	for(cmd = 0; cmd < num_commands; cmd++)
    2a44:	681a      	ldr	r2, [r3, #0]
    2a46:	2300      	movs	r3, #0
    2a48:	4293      	cmp	r3, r2
    2a4a:	db04      	blt.n	2a56 <simpleserial_get+0x22>
	if(cmd == num_commands)
    2a4c:	d107      	bne.n	2a5e <simpleserial_get+0x2a>
}
    2a4e:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
    2a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
    2a56:	011c      	lsls	r4, r3, #4
    2a58:	5c64      	ldrb	r4, [r4, r1]
    2a5a:	4284      	cmp	r4, r0
    2a5c:	d13d      	bne.n	2ada <simpleserial_get+0xa6>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
    2a5e:	4c26      	ldr	r4, [pc, #152]	; (2af8 <simpleserial_get+0xc4>)
    2a60:	011d      	lsls	r5, r3, #4
    2a62:	1966      	adds	r6, r4, r5
    2a64:	7b33      	ldrb	r3, [r6, #12]
    2a66:	07db      	lsls	r3, r3, #31
    2a68:	d514      	bpl.n	2a94 <simpleserial_get+0x60>
		uint8_t l = 0;
    2a6a:	2300      	movs	r3, #0
    2a6c:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
    2a70:	f000 f910 	bl	2c94 <getch>
    2a74:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
    2a78:	f000 f90c 	bl	2c94 <getch>
		if (hex_decode(1, buff, &l))
    2a7c:	aa02      	add	r2, sp, #8
		buff[1] = getch();
    2a7e:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
    2a82:	a942      	add	r1, sp, #264	; 0x108
    2a84:	2001      	movs	r0, #1
    2a86:	f7ff ff05 	bl	2894 <hex_decode>
    2a8a:	2800      	cmp	r0, #0
    2a8c:	d1df      	bne.n	2a4e <simpleserial_get+0x1a>
		commands[cmd].len = l;
    2a8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2a92:	6073      	str	r3, [r6, #4]
	for(cmd = 0; cmd < num_commands; cmd++)
    2a94:	2600      	movs	r6, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
    2a96:	1967      	adds	r7, r4, r5
		ascii_buf[i] = c;
    2a98:	f50d 7884 	add.w	r8, sp, #264	; 0x108
	for(int i = 0; i < 2*commands[cmd].len; i++)
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
    2aa2:	d31c      	bcc.n	2ade <simpleserial_get+0xaa>
	c = getch();
    2aa4:	f000 f8f6 	bl	2c94 <getch>
	if(c != '\n' && c != '\r')
    2aa8:	280a      	cmp	r0, #10
    2aaa:	d001      	beq.n	2ab0 <simpleserial_get+0x7c>
    2aac:	280d      	cmp	r0, #13
    2aae:	d1ce      	bne.n	2a4e <simpleserial_get+0x1a>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
    2ab0:	442c      	add	r4, r5
    2ab2:	aa02      	add	r2, sp, #8
    2ab4:	6865      	ldr	r5, [r4, #4]
    2ab6:	a942      	add	r1, sp, #264	; 0x108
    2ab8:	4628      	mov	r0, r5
    2aba:	f7ff feeb 	bl	2894 <hex_decode>
    2abe:	2800      	cmp	r0, #0
    2ac0:	d1c5      	bne.n	2a4e <simpleserial_get+0x1a>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
    2ac2:	b2e9      	uxtb	r1, r5
    2ac4:	68a3      	ldr	r3, [r4, #8]
    2ac6:	a802      	add	r0, sp, #8
    2ac8:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
    2aca:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
    2acc:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
    2ad0:	2101      	movs	r1, #1
    2ad2:	207a      	movs	r0, #122	; 0x7a
    2ad4:	f7ff ff52 	bl	297c <simpleserial_put>
    2ad8:	e7b9      	b.n	2a4e <simpleserial_get+0x1a>
	for(cmd = 0; cmd < num_commands; cmd++)
    2ada:	3301      	adds	r3, #1
    2adc:	e7b4      	b.n	2a48 <simpleserial_get+0x14>
		c = getch();
    2ade:	f000 f8d9 	bl	2c94 <getch>
		if(c == '\n' || c == '\r')
    2ae2:	280a      	cmp	r0, #10
    2ae4:	d0b3      	beq.n	2a4e <simpleserial_get+0x1a>
    2ae6:	280d      	cmp	r0, #13
    2ae8:	d0b1      	beq.n	2a4e <simpleserial_get+0x1a>
		ascii_buf[i] = c;
    2aea:	f806 0008 	strb.w	r0, [r6, r8]
	for(int i = 0; i < 2*commands[cmd].len; i++)
    2aee:	3601      	adds	r6, #1
    2af0:	e7d4      	b.n	2a9c <simpleserial_get+0x68>
    2af2:	bf00      	nop
    2af4:	1fff0338 	.word	0x1fff0338
    2af8:	1fff0238 	.word	0x1fff0238

00002afc <GPIO_PinInit>:

    return instance;
}
#endif
void GPIO_PinInit(GPIO_Type *base, uint32_t pin, const gpio_pin_config_t *config)
{
    2afc:	b510      	push	{r4, lr}
    assert(config);
    2afe:	b92a      	cbnz	r2, 2b0c <GPIO_PinInit+0x10>
    2b00:	4b0c      	ldr	r3, [pc, #48]	; (2b34 <GPIO_PinInit+0x38>)
    2b02:	4a0d      	ldr	r2, [pc, #52]	; (2b38 <GPIO_PinInit+0x3c>)
    2b04:	480d      	ldr	r0, [pc, #52]	; (2b3c <GPIO_PinInit+0x40>)
    2b06:	2165      	movs	r1, #101	; 0x65
    2b08:	f7fd fdd6 	bl	6b8 <__assert_func>

    if (config->pinDirection == kGPIO_DigitalInput)
    2b0c:	7814      	ldrb	r4, [r2, #0]
    2b0e:	2301      	movs	r3, #1
    2b10:	b92c      	cbnz	r4, 2b1e <GPIO_PinInit+0x22>
    {
        base->PDDR &= ~(1U << pin);
    2b12:	6942      	ldr	r2, [r0, #20]
    2b14:	408b      	lsls	r3, r1
    2b16:	ea22 0303 	bic.w	r3, r2, r3
    }
    else
    {
        GPIO_WritePinOutput(base, pin, config->outputLogic);
        base->PDDR |= (1U << pin);
    2b1a:	6143      	str	r3, [r0, #20]
    2b1c:	bd10      	pop	{r4, pc}
 *        - 0: corresponding pin output low-logic level.
 *        - 1: corresponding pin output high-logic level.
 */
static inline void GPIO_PinWrite(GPIO_Type *base, uint32_t pin, uint8_t output)
{
    if (output == 0U)
    2b1e:	7852      	ldrb	r2, [r2, #1]
    {
        base->PCOR = 1U << pin;
    2b20:	408b      	lsls	r3, r1
    if (output == 0U)
    2b22:	b92a      	cbnz	r2, 2b30 <GPIO_PinInit+0x34>
        base->PCOR = 1U << pin;
    2b24:	6083      	str	r3, [r0, #8]
    2b26:	6942      	ldr	r2, [r0, #20]
    2b28:	2301      	movs	r3, #1
    2b2a:	408b      	lsls	r3, r1
    2b2c:	4313      	orrs	r3, r2
    2b2e:	e7f4      	b.n	2b1a <GPIO_PinInit+0x1e>
    }
    else
    {
        base->PSOR = 1U << pin;
    2b30:	6043      	str	r3, [r0, #4]
    2b32:	e7f8      	b.n	2b26 <GPIO_PinInit+0x2a>
    2b34:	00004171 	.word	0x00004171
    2b38:	00004178 	.word	0x00004178
    2b3c:	00004158 	.word	0x00004158

00002b40 <I2S0_Tx_DriverIRQHandler>:
    __DSB();
#endif
}

void I2S0_Tx_DriverIRQHandler(void)
{
    2b40:	b508      	push	{r3, lr}
    assert(s_saiHandle[0][0]);
    2b42:	4b08      	ldr	r3, [pc, #32]	; (2b64 <I2S0_Tx_DriverIRQHandler+0x24>)
    2b44:	6819      	ldr	r1, [r3, #0]
    2b46:	b931      	cbnz	r1, 2b56 <I2S0_Tx_DriverIRQHandler+0x16>
    2b48:	4b07      	ldr	r3, [pc, #28]	; (2b68 <I2S0_Tx_DriverIRQHandler+0x28>)
    2b4a:	4a08      	ldr	r2, [pc, #32]	; (2b6c <I2S0_Tx_DriverIRQHandler+0x2c>)
    2b4c:	4808      	ldr	r0, [pc, #32]	; (2b70 <I2S0_Tx_DriverIRQHandler+0x30>)
    2b4e:	f240 510b 	movw	r1, #1291	; 0x50b
    2b52:	f7fd fdb1 	bl	6b8 <__assert_func>
    s_saiTxIsr(I2S0, s_saiHandle[0][0]);
    2b56:	4b07      	ldr	r3, [pc, #28]	; (2b74 <I2S0_Tx_DriverIRQHandler+0x34>)
    2b58:	4807      	ldr	r0, [pc, #28]	; (2b78 <I2S0_Tx_DriverIRQHandler+0x38>)
    2b5a:	681b      	ldr	r3, [r3, #0]
    2b5c:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2b5e:	f3bf 8f4f 	dsb	sy
    2b62:	bd08      	pop	{r3, pc}
    2b64:	1fff033c 	.word	0x1fff033c
    2b68:	00004197 	.word	0x00004197
    2b6c:	000041e3 	.word	0x000041e3
    2b70:	000041cb 	.word	0x000041cb
    2b74:	1fff0348 	.word	0x1fff0348
    2b78:	4002f000 	.word	0x4002f000

00002b7c <I2S0_Rx_DriverIRQHandler>:
    __DSB();
#endif
}

void I2S0_Rx_DriverIRQHandler(void)
{
    2b7c:	b508      	push	{r3, lr}
    assert(s_saiHandle[0][1]);
    2b7e:	4b08      	ldr	r3, [pc, #32]	; (2ba0 <I2S0_Rx_DriverIRQHandler+0x24>)
    2b80:	6859      	ldr	r1, [r3, #4]
    2b82:	b931      	cbnz	r1, 2b92 <I2S0_Rx_DriverIRQHandler+0x16>
    2b84:	4b07      	ldr	r3, [pc, #28]	; (2ba4 <I2S0_Rx_DriverIRQHandler+0x28>)
    2b86:	4a08      	ldr	r2, [pc, #32]	; (2ba8 <I2S0_Rx_DriverIRQHandler+0x2c>)
    2b88:	4808      	ldr	r0, [pc, #32]	; (2bac <I2S0_Rx_DriverIRQHandler+0x30>)
    2b8a:	f240 5116 	movw	r1, #1302	; 0x516
    2b8e:	f7fd fd93 	bl	6b8 <__assert_func>
    s_saiRxIsr(I2S0, s_saiHandle[0][1]);
    2b92:	4b07      	ldr	r3, [pc, #28]	; (2bb0 <I2S0_Rx_DriverIRQHandler+0x34>)
    2b94:	4807      	ldr	r0, [pc, #28]	; (2bb4 <I2S0_Rx_DriverIRQHandler+0x38>)
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	4798      	blx	r3
    2b9a:	f3bf 8f4f 	dsb	sy
    2b9e:	bd08      	pop	{r3, pc}
    2ba0:	1fff033c 	.word	0x1fff033c
    2ba4:	00004185 	.word	0x00004185
    2ba8:	000041fc 	.word	0x000041fc
    2bac:	000041cb 	.word	0x000041cb
    2bb0:	1fff0344 	.word	0x1fff0344
    2bb4:	4002f000 	.word	0x4002f000

00002bb8 <platform_init>:
static char ltcAesKey[AES_KEY_SIZE];
static uint32_t maskSeed;
static uint32_t nbAesBlocks;

void platform_init(void)
{
    2bb8:	b500      	push	{lr}
    2bba:	b097      	sub	sp, #92	; 0x5c
     trng_config_t trngConfig;

#if ETM_ENABLE
     etmtrace_enable();
    2bbc:	f000 fbb8 	bl	3330 <etmtrace_enable>
#endif
     BOARD_BootClockRUN();
    2bc0:	f000 fc50 	bl	3464 <BOARD_BootClockRUN>

     // Start TRNG
     TRNG_GetDefaultConfig(&trngConfig);
    2bc4:	a801      	add	r0, sp, #4
    2bc6:	f000 f981 	bl	2ecc <TRNG_GetDefaultConfig>
     TRNG_Init(TRNG0, &trngConfig);
    2bca:	a901      	add	r1, sp, #4
    2bcc:	4802      	ldr	r0, [pc, #8]	; (2bd8 <platform_init+0x20>)
    2bce:	f000 f9bd 	bl	2f4c <TRNG_Init>
     LTC_Init(LTC0);
     TRNG_GetRandomData(TRNG0, &maskSeed, sizeof(maskSeed));
     LTC_SetDpaMaskSeed(LTC0, maskSeed);
     nbAesBlocks = 0;
#endif
}
    2bd2:	b017      	add	sp, #92	; 0x5c
    2bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    2bd8:	400a0000 	.word	0x400a0000

00002bdc <init_uart>:

void init_uart(void)
{
    2bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 * @param name  Which clock to enable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
    (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
    2bde:	4a12      	ldr	r2, [pc, #72]	; (2c28 <init_uart+0x4c>)
    2be0:	6813      	ldr	r3, [r2, #0]
    2be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2be6:	6013      	str	r3, [r2, #0]
     lpuart_config_t config;
     CLOCK_EnableClock(kCLOCK_PortB); //enable port e clock
     /* CLOCK_EnableClock(kCLOCK_Uart1); //enable UART clock */

     LPUART_GetDefaultConfig(&config);
    2be8:	a801      	add	r0, sp, #4
    2bea:	f001 f803 	bl	3bf4 <LPUART_GetDefaultConfig>
 *        This function is recommended to use to reset the pin mux
 *
 */
static inline void PORT_SetPinMux(PORT_Type *base, uint32_t pin, port_mux_t mux)
{
    base->PCR[pin] = (base->PCR[pin] & ~PORT_PCR_MUX_MASK) | PORT_PCR_MUX(mux);
    2bee:	4a0f      	ldr	r2, [pc, #60]	; (2c2c <init_uart+0x50>)
     PORT_SetPinMux(PORTB, 16, kPORT_MuxAlt3);
     PORT_SetPinMux(PORTB, 17, kPORT_MuxAlt3);


     /* volatile uint32_t uartclock = CLOCK_GetFreq(LPUART0_CLK_SRC); */
     LPUART_Init(LPUART0, &config, 7370000U);
    2bf0:	480f      	ldr	r0, [pc, #60]	; (2c30 <init_uart+0x54>)
     config.baudRate_Bps = 38400U;
    2bf2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
    2bf6:	9301      	str	r3, [sp, #4]
     config.enableTx = true;
    2bf8:	2301      	movs	r3, #1
    2bfa:	f88d 3014 	strb.w	r3, [sp, #20]
     config.enableRx = true;
    2bfe:	f88d 3015 	strb.w	r3, [sp, #21]
    2c02:	6c13      	ldr	r3, [r2, #64]	; 0x40
    2c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2c08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2c0c:	6413      	str	r3, [r2, #64]	; 0x40
    2c0e:	6c53      	ldr	r3, [r2, #68]	; 0x44
    2c10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2c14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2c18:	6453      	str	r3, [r2, #68]	; 0x44
     LPUART_Init(LPUART0, &config, 7370000U);
    2c1a:	a901      	add	r1, sp, #4
    2c1c:	4a05      	ldr	r2, [pc, #20]	; (2c34 <init_uart+0x58>)
    2c1e:	f000 fedf 	bl	39e0 <LPUART_Init>
}
    2c22:	b007      	add	sp, #28
    2c24:	f85d fb04 	ldr.w	pc, [sp], #4
    2c28:	40048038 	.word	0x40048038
    2c2c:	4004a000 	.word	0x4004a000
    2c30:	400c4000 	.word	0x400c4000
    2c34:	00707510 	.word	0x00707510

00002c38 <trigger_setup>:
    2c38:	4a0c      	ldr	r2, [pc, #48]	; (2c6c <trigger_setup+0x34>)

void trigger_setup(void)
{
    2c3a:	b513      	push	{r0, r1, r4, lr}
    2c3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
     PORT_SetPinMux(PORTB, 19, kPORT_MuxAsGpio);
     gpio_pin_config_t trigconf = {
          kGPIO_DigitalOutput, 0
     };

     GPIO_PinInit(GPIOB, 19, &trigconf);
    2c3e:	4c0c      	ldr	r4, [pc, #48]	; (2c70 <trigger_setup+0x38>)
    2c40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2c48:	64d3      	str	r3, [r2, #76]	; 0x4c
     gpio_pin_config_t trigconf = {
    2c4a:	2301      	movs	r3, #1
    2c4c:	f88d 3004 	strb.w	r3, [sp, #4]
     GPIO_PinInit(GPIOB, 19, &trigconf);
    2c50:	aa01      	add	r2, sp, #4
     gpio_pin_config_t trigconf = {
    2c52:	2300      	movs	r3, #0
     GPIO_PinInit(GPIOB, 19, &trigconf);
    2c54:	2113      	movs	r1, #19
    2c56:	4620      	mov	r0, r4
     gpio_pin_config_t trigconf = {
    2c58:	f88d 3005 	strb.w	r3, [sp, #5]
     GPIO_PinInit(GPIOB, 19, &trigconf);
    2c5c:	f7ff ff4e 	bl	2afc <GPIO_PinInit>
        base->PCOR = 1U << pin;
    2c60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    2c64:	60a3      	str	r3, [r4, #8]
     GPIO_WritePinOutput(GPIOB, 19, 0);
}
    2c66:	b002      	add	sp, #8
    2c68:	bd10      	pop	{r4, pc}
    2c6a:	bf00      	nop
    2c6c:	4004a000 	.word	0x4004a000
    2c70:	400ff040 	.word	0x400ff040

00002c74 <trigger_high>:
        base->PSOR = 1U << pin;
    2c74:	4b02      	ldr	r3, [pc, #8]	; (2c80 <trigger_high+0xc>)
    2c76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2c7a:	605a      	str	r2, [r3, #4]
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop
    2c80:	400ff040 	.word	0x400ff040

00002c84 <trigger_low>:
        base->PCOR = 1U << pin;
    2c84:	4b02      	ldr	r3, [pc, #8]	; (2c90 <trigger_low+0xc>)
    2c86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    2c8a:	609a      	str	r2, [r3, #8]
    2c8c:	4770      	bx	lr
    2c8e:	bf00      	nop
    2c90:	400ff040 	.word	0x400ff040

00002c94 <getch>:
{
     GPIO_WritePinOutput(GPIOB, 19, 0);
}

char getch(void)
{
    2c94:	b507      	push	{r0, r1, r2, lr}
     char c;
     LPUART_ReadBlocking(LPUART0, &c, 1);
    2c96:	2201      	movs	r2, #1
    2c98:	f10d 0107 	add.w	r1, sp, #7
    2c9c:	4803      	ldr	r0, [pc, #12]	; (2cac <getch+0x18>)
    2c9e:	f001 f811 	bl	3cc4 <LPUART_ReadBlocking>
     return c;
}
    2ca2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2ca6:	b003      	add	sp, #12
    2ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    2cac:	400c4000 	.word	0x400c4000

00002cb0 <putch>:

void putch(char c)
{
    2cb0:	b507      	push	{r0, r1, r2, lr}
    2cb2:	a902      	add	r1, sp, #8
     LPUART_WriteBlocking(LPUART0, &c, 1);
    2cb4:	2201      	movs	r2, #1
{
    2cb6:	f801 0d01 	strb.w	r0, [r1, #-1]!
     LPUART_WriteBlocking(LPUART0, &c, 1);
    2cba:	4803      	ldr	r0, [pc, #12]	; (2cc8 <putch+0x18>)
    2cbc:	f000 ffe8 	bl	3c90 <LPUART_WriteBlocking>
}
    2cc0:	b003      	add	sp, #12
    2cc2:	f85d fb04 	ldr.w	pc, [sp], #4
    2cc6:	bf00      	nop
    2cc8:	400c4000 	.word	0x400c4000

00002ccc <trng_SetStatisticalCheckLimit>:
 *
 */
static status_t trng_SetStatisticalCheckLimit(TRNG_Type *base,
                                              trng_statistical_check_t statistical_check,
                                              const trng_statistical_check_limit_t *limit)
{
    2ccc:	b510      	push	{r4, lr}
    uint32_t range;
    status_t status = kStatus_Success;

    if (limit && (limit->maximum > limit->minimum))
    2cce:	b30a      	cbz	r2, 2d14 <trng_SetStatisticalCheckLimit+0x48>
    2cd0:	e892 0018 	ldmia.w	r2, {r3, r4}
    2cd4:	42a3      	cmp	r3, r4
    2cd6:	d91d      	bls.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
    {
        range = limit->maximum - limit->minimum; /* Registers use range instead of minimum value.*/

        switch (statistical_check)
    2cd8:	3901      	subs	r1, #1
        range = limit->maximum - limit->minimum; /* Registers use range instead of minimum value.*/
    2cda:	1b1a      	subs	r2, r3, r4
        switch (statistical_check)
    2cdc:	2908      	cmp	r1, #8
    2cde:	f200 80cf 	bhi.w	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2ce2:	e8df f001 	tbb	[pc, r1]
    2ce6:	1905      	.short	0x1905
    2ce8:	7d654d33 	.word	0x7d654d33
    2cec:	ad95      	.short	0xad95
    2cee:	be          	.byte	0xbe
    2cef:	00          	.byte	0x00
        {
            case kTRNG_StatisticalCheckMonobit: /* Allowable maximum and minimum number of ones/zero detected during
                                                   entropy generation. */
                if ((range <= 0xffffu) && (limit->maximum <= 0xffffu))
    2cf0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    2cf4:	f080 80c4 	bcs.w	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2cfc:	f080 80c0 	bcs.w	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_SCML_MONO_MAX(base, limit->maximum);
    2d00:	6a01      	ldr	r1, [r0, #32]
    2d02:	0c09      	lsrs	r1, r1, #16
    2d04:	0409      	lsls	r1, r1, #16
    2d06:	430b      	orrs	r3, r1
    2d08:	6203      	str	r3, [r0, #32]
                    TRNG_WR_SCML_MONO_RNG(base, range);
    2d0a:	6a03      	ldr	r3, [r0, #32]
    2d0c:	b29b      	uxth	r3, r3
    2d0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    2d12:	6202      	str	r2, [r0, #32]
    status_t status = kStatus_Success;
    2d14:	2000      	movs	r0, #0
    2d16:	bd10      	pop	{r4, pc}
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckRunBit1: /* Allowable maximum and minimum number of runs of length 1 detected
                                                   during entropy generation. */
                if ((range <= 0x7fffu) && (limit->maximum <= 0x7fffu))
    2d18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2d1c:	f080 80b0 	bcs.w	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    2d24:	f080 80ac 	bcs.w	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_SCR1L_RUN1_MAX(base, limit->maximum);
    2d28:	6a41      	ldr	r1, [r0, #36]	; 0x24
    2d2a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
    2d2e:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    2d32:	430b      	orrs	r3, r1
    2d34:	6243      	str	r3, [r0, #36]	; 0x24
                    TRNG_WR_SCR1L_RUN1_RNG(base, range);
    2d36:	6a41      	ldr	r1, [r0, #36]	; 0x24
    2d38:	4b52      	ldr	r3, [pc, #328]	; (2e84 <trng_SetStatisticalCheckLimit+0x1b8>)
    2d3a:	ea03 4202 	and.w	r2, r3, r2, lsl #16
    2d3e:	f021 43ff 	bic.w	r3, r1, #2139095040	; 0x7f800000
    2d42:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    2d46:	431a      	orrs	r2, r3
    2d48:	6242      	str	r2, [r0, #36]	; 0x24
    2d4a:	e7e3      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckRunBit2: /* Allowable maximum and minimum number of runs of length 2 detected
                                                   during entropy generation. */
                if ((range <= 0x3fffu) && (limit->maximum <= 0x3fffu))
    2d4c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    2d50:	f080 8096 	bcs.w	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2d58:	f080 8092 	bcs.w	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_SCR2L_RUN2_MAX(base, limit->maximum);
    2d5c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    2d5e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
    2d62:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
    2d66:	430b      	orrs	r3, r1
    2d68:	6283      	str	r3, [r0, #40]	; 0x28
                    TRNG_WR_SCR2L_RUN2_RNG(base, range);
    2d6a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    2d6c:	4b46      	ldr	r3, [pc, #280]	; (2e88 <trng_SetStatisticalCheckLimit+0x1bc>)
    2d6e:	ea03 4202 	and.w	r2, r3, r2, lsl #16
    2d72:	f021 537f 	bic.w	r3, r1, #1069547520	; 0x3fc00000
    2d76:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    2d7a:	431a      	orrs	r2, r3
    2d7c:	6282      	str	r2, [r0, #40]	; 0x28
    2d7e:	e7c9      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckRunBit3: /* Allowable maximum and minimum number of runs of length 3 detected
                                                   during entropy generation. */
                if ((range <= 0x1fffu) && (limit->maximum <= 0x1fffu))
    2d80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2d84:	d27c      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2d8a:	d279      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_SCR3L_RUN3_MAX(base, limit->maximum);
    2d8c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    2d8e:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
    2d92:	f021 011f 	bic.w	r1, r1, #31
    2d96:	430b      	orrs	r3, r1
    2d98:	62c3      	str	r3, [r0, #44]	; 0x2c
                    TRNG_WR_SCR3L_RUN3_RNG(base, range);
    2d9a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    2d9c:	4b3b      	ldr	r3, [pc, #236]	; (2e8c <trng_SetStatisticalCheckLimit+0x1c0>)
    2d9e:	ea03 4202 	and.w	r2, r3, r2, lsl #16
    2da2:	f021 53ff 	bic.w	r3, r1, #534773760	; 0x1fe00000
    2da6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    2daa:	431a      	orrs	r2, r3
    2dac:	62c2      	str	r2, [r0, #44]	; 0x2c
    2dae:	e7b1      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckRunBit4: /* Allowable maximum and minimum number of runs of length 4 detected
                                                   during entropy generation. */
                if ((range <= 0xfffu) && (limit->maximum <= 0xfffu))
    2db0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    2db4:	d264      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    2dba:	d261      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_SCR4L_RUN4_MAX(base, limit->maximum);
    2dbc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2dbe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    2dc2:	f021 010f 	bic.w	r1, r1, #15
    2dc6:	430b      	orrs	r3, r1
    2dc8:	6303      	str	r3, [r0, #48]	; 0x30
                    TRNG_WR_SCR4L_RUN4_RNG(base, range);
    2dca:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2dcc:	4b30      	ldr	r3, [pc, #192]	; (2e90 <trng_SetStatisticalCheckLimit+0x1c4>)
    2dce:	ea03 4202 	and.w	r2, r3, r2, lsl #16
    2dd2:	f021 637f 	bic.w	r3, r1, #267386880	; 0xff00000
    2dd6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2dda:	431a      	orrs	r2, r3
    2ddc:	6302      	str	r2, [r0, #48]	; 0x30
    2dde:	e799      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckRunBit5: /* Allowable maximum and minimum number of runs of length 5 detected
                                                   during entropy generation. */
                if ((range <= 0x7ffu) && (limit->maximum <= 0x7ffu))
    2de0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    2de4:	d24c      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2dea:	d249      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_SCR5L_RUN5_MAX(base, limit->maximum);
    2dec:	6b41      	ldr	r1, [r0, #52]	; 0x34
    2dee:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
    2df2:	f021 0107 	bic.w	r1, r1, #7
    2df6:	430b      	orrs	r3, r1
    2df8:	6343      	str	r3, [r0, #52]	; 0x34
                    TRNG_WR_SCR5L_RUN5_RNG(base, range);
    2dfa:	6b41      	ldr	r1, [r0, #52]	; 0x34
    2dfc:	4b25      	ldr	r3, [pc, #148]	; (2e94 <trng_SetStatisticalCheckLimit+0x1c8>)
    2dfe:	ea03 4202 	and.w	r2, r3, r2, lsl #16
    2e02:	f021 63ff 	bic.w	r3, r1, #133693440	; 0x7f80000
    2e06:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    2e0a:	431a      	orrs	r2, r3
    2e0c:	6342      	str	r2, [r0, #52]	; 0x34
    2e0e:	e781      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckRunBit6Plus: /* Allowable maximum and minimum number of length 6 or more detected
                                                       during entropy generation */
                if ((range <= 0x7ffu) && (limit->maximum <= 0x7ffu))
    2e10:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    2e14:	d234      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2e1a:	d231      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_SCR6PL_RUN6P_MAX(base, limit->maximum);
    2e1c:	6b81      	ldr	r1, [r0, #56]	; 0x38
    2e1e:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
    2e22:	f021 0107 	bic.w	r1, r1, #7
    2e26:	430b      	orrs	r3, r1
    2e28:	6383      	str	r3, [r0, #56]	; 0x38
                    TRNG_WR_SCR6PL_RUN6P_RNG(base, range);
    2e2a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    2e2c:	4b19      	ldr	r3, [pc, #100]	; (2e94 <trng_SetStatisticalCheckLimit+0x1c8>)
    2e2e:	ea03 4202 	and.w	r2, r3, r2, lsl #16
    2e32:	f021 63ff 	bic.w	r3, r1, #133693440	; 0x7f80000
    2e36:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
    2e3a:	431a      	orrs	r2, r3
    2e3c:	6382      	str	r2, [r0, #56]	; 0x38
    2e3e:	e769      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckPoker: /* Allowable maximum and minimum limit of "Poker Test" detected during
                                                 entropy generation . */
                if ((range <= 0xffffu) && (limit->maximum <= 0xffffffu))
    2e40:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    2e44:	d21c      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2e46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2e4a:	d219      	bcs.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_PKRMAX_PKR_MAX(base, limit->maximum);
    2e4c:	68c1      	ldr	r1, [r0, #12]
    2e4e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    2e52:	430b      	orrs	r3, r1
    2e54:	60c3      	str	r3, [r0, #12]
                    TRNG_WR_PKRRNG_PKR_RNG(base, range);
    2e56:	6883      	ldr	r3, [r0, #8]
    2e58:	0c1b      	lsrs	r3, r3, #16
    2e5a:	041b      	lsls	r3, r3, #16
    2e5c:	431a      	orrs	r2, r3
    2e5e:	6082      	str	r2, [r0, #8]
    2e60:	e758      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
                }
                break;
            case kTRNG_StatisticalCheckFrequencyCount: /* Allowable maximum and minimum limit of entropy sample frquency
                                                          count during entropy generation . */
                if ((limit->minimum <= 0x3fffffu) && (limit->maximum <= 0x3fffffu))
    2e62:	4a0d      	ldr	r2, [pc, #52]	; (2e98 <trng_SetStatisticalCheckLimit+0x1cc>)
    2e64:	4294      	cmp	r4, r2
    2e66:	d80b      	bhi.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
    2e68:	4293      	cmp	r3, r2
    2e6a:	d809      	bhi.n	2e80 <trng_SetStatisticalCheckLimit+0x1b4>
                {
                    TRNG_WR_FRQMAX_FRQ_MAX(base, limit->maximum);
    2e6c:	69c2      	ldr	r2, [r0, #28]
    2e6e:	490b      	ldr	r1, [pc, #44]	; (2e9c <trng_SetStatisticalCheckLimit+0x1d0>)
    2e70:	400a      	ands	r2, r1
    2e72:	4313      	orrs	r3, r2
    2e74:	61c3      	str	r3, [r0, #28]
                    TRNG_WR_FRQMIN_FRQ_MIN(base, limit->minimum);
    2e76:	6983      	ldr	r3, [r0, #24]
    2e78:	400b      	ands	r3, r1
    2e7a:	4323      	orrs	r3, r4
    2e7c:	6183      	str	r3, [r0, #24]
    2e7e:	e749      	b.n	2d14 <trng_SetStatisticalCheckLimit+0x48>
                    status = kStatus_InvalidArgument;
    2e80:	2004      	movs	r0, #4
                break;
        }
    }

    return status;
}
    2e82:	bd10      	pop	{r4, pc}
    2e84:	7fff0000 	.word	0x7fff0000
    2e88:	3fff0000 	.word	0x3fff0000
    2e8c:	1fff0000 	.word	0x1fff0000
    2e90:	0fff0000 	.word	0x0fff0000
    2e94:	07ff0000 	.word	0x07ff0000
    2e98:	003fffff 	.word	0x003fffff
    2e9c:	ffc00000 	.word	0xffc00000

00002ea0 <trng_GetInstance>:
{
    2ea0:	b508      	push	{r3, lr}
        if (s_trngBases[instance] == base)
    2ea2:	4b06      	ldr	r3, [pc, #24]	; (2ebc <trng_GetInstance+0x1c>)
    2ea4:	4298      	cmp	r0, r3
    2ea6:	d006      	beq.n	2eb6 <trng_GetInstance+0x16>
    assert(instance < ARRAY_SIZE(s_trngBases));
    2ea8:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <trng_GetInstance+0x20>)
    2eaa:	4a06      	ldr	r2, [pc, #24]	; (2ec4 <trng_GetInstance+0x24>)
    2eac:	4806      	ldr	r0, [pc, #24]	; (2ec8 <trng_GetInstance+0x28>)
    2eae:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
    2eb2:	f7fd fc01 	bl	6b8 <__assert_func>
}
    2eb6:	2000      	movs	r0, #0
    2eb8:	bd08      	pop	{r3, pc}
    2eba:	bf00      	nop
    2ebc:	400a0000 	.word	0x400a0000
    2ec0:	00004226 	.word	0x00004226
    2ec4:	00004215 	.word	0x00004215
    2ec8:	00004249 	.word	0x00004249

00002ecc <TRNG_GetDefaultConfig>:
    if (userConfig != NULL)
    2ecc:	2800      	cmp	r0, #0
    2ece:	d03a      	beq.n	2f46 <TRNG_GetDefaultConfig+0x7a>
        userConfig->entropyDelay = TRNG_USER_CONFIG_DEFAULT_ENTROPY_DELAY;
    2ed0:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    2ed4:	8081      	strh	r1, [r0, #4]
        userConfig->sampleSize = TRNG_USER_CONFIG_DEFAULT_SAMPLE_SIZE;
    2ed6:	f640 11c4 	movw	r1, #2500	; 0x9c4
    2eda:	80c1      	strh	r1, [r0, #6]
        userConfig->sparseBitLimit = TRNG_USER_CONFIG_DEFAULT_SPARSE_BIT_LIMIT;
    2edc:	213f      	movs	r1, #63	; 0x3f
    2ede:	8101      	strh	r1, [r0, #8]
        userConfig->longRunMaxLimit = TRNG_USER_CONFIG_DEFAULT_RUN_MAX_LIMIT;
    2ee0:	2122      	movs	r1, #34	; 0x22
    2ee2:	72c1      	strb	r1, [r0, #11]
        userConfig->monobitLimit.maximum = TRNG_USER_CONFIG_DEFAULT_MONOBIT_MAXIMUM;
    2ee4:	f44f 61ad 	mov.w	r1, #1384	; 0x568
    2ee8:	60c1      	str	r1, [r0, #12]
        userConfig->monobitLimit.minimum = TRNG_USER_CONFIG_DEFAULT_MONOBIT_MINIMUM;
    2eea:	f240 415c 	movw	r1, #1116	; 0x45c
    2eee:	6101      	str	r1, [r0, #16]
        userConfig->runBit1Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT1_MAXIMUM;
    2ef0:	f240 1195 	movw	r1, #405	; 0x195
    2ef4:	6141      	str	r1, [r0, #20]
        userConfig->runBit1Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT1_MINIMUM;
    2ef6:	21e3      	movs	r1, #227	; 0xe3
    2ef8:	6181      	str	r1, [r0, #24]
        userConfig->runBit2Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT2_MAXIMUM;
    2efa:	21dc      	movs	r1, #220	; 0xdc
    2efc:	61c1      	str	r1, [r0, #28]
        userConfig->runBit2Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT2_MINIMUM;
    2efe:	2162      	movs	r1, #98	; 0x62
        userConfig->sampleMode = kTRNG_SampleModeRaw;
    2f00:	2201      	movs	r2, #1
        userConfig->runBit2Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT2_MINIMUM;
    2f02:	6201      	str	r1, [r0, #32]
        userConfig->runBit3Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT3_MAXIMUM;
    2f04:	217d      	movs	r1, #125	; 0x7d
        userConfig->sampleMode = kTRNG_SampleModeRaw;
    2f06:	70c2      	strb	r2, [r0, #3]
        userConfig->retryCount = TRNG_USER_CONFIG_DEFAULT_RETRY_COUNT;
    2f08:	7282      	strb	r2, [r0, #10]
        userConfig->runBit3Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT3_MAXIMUM;
    2f0a:	6241      	str	r1, [r0, #36]	; 0x24
        userConfig->runBit5Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT5_MINIMUM;
    2f0c:	6382      	str	r2, [r0, #56]	; 0x38
        userConfig->runBit6PlusLimit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT6PLUS_MINIMUM;
    2f0e:	6402      	str	r2, [r0, #64]	; 0x40
        userConfig->runBit3Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT3_MINIMUM;
    2f10:	2125      	movs	r1, #37	; 0x25
        userConfig->pokerLimit.maximum = TRNG_USER_CONFIG_DEFAULT_POKER_MAXIMUM;
    2f12:	f646 1220 	movw	r2, #26912	; 0x6920
        userConfig->runBit3Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT3_MINIMUM;
    2f16:	6281      	str	r1, [r0, #40]	; 0x28
        userConfig->pokerLimit.maximum = TRNG_USER_CONFIG_DEFAULT_POKER_MAXIMUM;
    2f18:	6442      	str	r2, [r0, #68]	; 0x44
        userConfig->runBit4Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT4_MAXIMUM;
    2f1a:	214b      	movs	r1, #75	; 0x4b
        userConfig->pokerLimit.minimum = TRNG_USER_CONFIG_DEFAULT_POKER_MINIMUM;
    2f1c:	f645 727d 	movw	r2, #24445	; 0x5f7d
        userConfig->runBit4Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT4_MAXIMUM;
    2f20:	62c1      	str	r1, [r0, #44]	; 0x2c
        userConfig->pokerLimit.minimum = TRNG_USER_CONFIG_DEFAULT_POKER_MINIMUM;
    2f22:	6482      	str	r2, [r0, #72]	; 0x48
        userConfig->runBit4Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT4_MINIMUM;
    2f24:	210b      	movs	r1, #11
        userConfig->frequencyCountLimit.maximum = TRNG_USER_CONFIG_DEFAULT_FREQUENCY_MAXIMUM;
    2f26:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
        userConfig->lock = TRNG_USER_CONFIG_DEFAULT_LOCK;
    2f2a:	2300      	movs	r3, #0
        userConfig->runBit4Limit.minimum = TRNG_USER_CONFIG_DEFAULT_RUNBIT4_MINIMUM;
    2f2c:	6301      	str	r1, [r0, #48]	; 0x30
        userConfig->frequencyCountLimit.maximum = TRNG_USER_CONFIG_DEFAULT_FREQUENCY_MAXIMUM;
    2f2e:	64c2      	str	r2, [r0, #76]	; 0x4c
        userConfig->runBit5Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT5_MAXIMUM;
    2f30:	212f      	movs	r1, #47	; 0x2f
        userConfig->frequencyCountLimit.minimum = TRNG_USER_CONFIG_DEFAULT_FREQUENCY_MINIMUM;
    2f32:	f44f 62c8 	mov.w	r2, #1600	; 0x640
        userConfig->lock = TRNG_USER_CONFIG_DEFAULT_LOCK;
    2f36:	7003      	strb	r3, [r0, #0]
        userConfig->clockMode = kTRNG_ClockModeRingOscillator;
    2f38:	7043      	strb	r3, [r0, #1]
        userConfig->ringOscDiv = TRNG_USER_CONFIG_DEFAULT_OSC_DIV;
    2f3a:	7083      	strb	r3, [r0, #2]
        userConfig->runBit5Limit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT5_MAXIMUM;
    2f3c:	6341      	str	r1, [r0, #52]	; 0x34
        userConfig->runBit6PlusLimit.maximum = TRNG_USER_CONFIG_DEFAULT_RUNBIT6PLUS_MAXIMUM;
    2f3e:	63c1      	str	r1, [r0, #60]	; 0x3c
        userConfig->frequencyCountLimit.minimum = TRNG_USER_CONFIG_DEFAULT_FREQUENCY_MINIMUM;
    2f40:	6502      	str	r2, [r0, #80]	; 0x50
        result = kStatus_Success;
    2f42:	4618      	mov	r0, r3
    2f44:	4770      	bx	lr
        result = kStatus_InvalidArgument;
    2f46:	2004      	movs	r0, #4
}
    2f48:	4770      	bx	lr
    2f4a:	0000      	movs	r0, r0

00002f4c <TRNG_Init>:

    return data;
}

status_t TRNG_Init(TRNG_Type *base, const trng_config_t *userConfig)
{
    2f4c:	b538      	push	{r3, r4, r5, lr}
    2f4e:	460d      	mov	r5, r1
    status_t result;

    /* Check input parameters.*/
    if ((base != NULL) && (userConfig != NULL))
    2f50:	4604      	mov	r4, r0
    2f52:	b908      	cbnz	r0, 2f58 <TRNG_Init+0xc>
            result = kStatus_Success;
        }
    }
    else
    {
        result = kStatus_InvalidArgument;
    2f54:	2004      	movs	r0, #4
    2f56:	bd38      	pop	{r3, r4, r5, pc}
    if ((base != NULL) && (userConfig != NULL))
    2f58:	2900      	cmp	r1, #0
    2f5a:	d0fb      	beq.n	2f54 <TRNG_Init+0x8>
        CLOCK_EnableClock(s_trngClock[trng_GetInstance(base)]);
    2f5c:	f7ff ffa0 	bl	2ea0 <trng_GetInstance>
    2f60:	4a59      	ldr	r2, [pc, #356]	; (30c8 <TRNG_Init+0x17c>)
    2f62:	6813      	ldr	r3, [r2, #0]
    2f64:	f043 0301 	orr.w	r3, r3, #1
    2f68:	6013      	str	r3, [r2, #0]
        TRNG_WR_MCTL_PRGM(base, kTRNG_WorkModeProgram);
    2f6a:	6823      	ldr	r3, [r4, #0]
    2f6c:	f423 3388 	bic.w	r3, r3, #69632	; 0x11000
    2f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2f74:	6023      	str	r3, [r4, #0]
        TRNG_WR_MCTL_RST_DEF(base, 1);
    2f76:	6823      	ldr	r3, [r4, #0]
    2f78:	f423 5382 	bic.w	r3, r3, #4160	; 0x1040
    2f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2f80:	6023      	str	r3, [r4, #0]
    if (((status = trng_SetRetryCount(base, userConfig->retryCount)) == kStatus_Success) &&
    2f82:	7aab      	ldrb	r3, [r5, #10]
    if ((retry_count >= 1u) && (retry_count <= 15u))
    2f84:	1e5a      	subs	r2, r3, #1
    2f86:	2a0e      	cmp	r2, #14
    2f88:	d8e4      	bhi.n	2f54 <TRNG_Init+0x8>
        TRNG_WR_SCMISC_RTY_CT(base, retry_count);
    2f8a:	6862      	ldr	r2, [r4, #4]
    2f8c:	041b      	lsls	r3, r3, #16
    2f8e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    2f92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    2f96:	4313      	orrs	r3, r2
    2f98:	6063      	str	r3, [r4, #4]
    if (((status = trng_SetRetryCount(base, userConfig->retryCount)) == kStatus_Success) &&
    2f9a:	f105 020c 	add.w	r2, r5, #12
    2f9e:	2101      	movs	r1, #1
    2fa0:	4620      	mov	r0, r4
    2fa2:	f7ff fe93 	bl	2ccc <trng_SetStatisticalCheckLimit>
    2fa6:	2800      	cmp	r0, #0
    2fa8:	f040 808c 	bne.w	30c4 <TRNG_Init+0x178>
         kStatus_Success) &&
    2fac:	f105 0214 	add.w	r2, r5, #20
    2fb0:	2102      	movs	r1, #2
    2fb2:	4620      	mov	r0, r4
    2fb4:	f7ff fe8a 	bl	2ccc <trng_SetStatisticalCheckLimit>
    2fb8:	2800      	cmp	r0, #0
    2fba:	f040 8083 	bne.w	30c4 <TRNG_Init+0x178>
         kStatus_Success) &&
    2fbe:	f105 021c 	add.w	r2, r5, #28
    2fc2:	2103      	movs	r1, #3
    2fc4:	4620      	mov	r0, r4
    2fc6:	f7ff fe81 	bl	2ccc <trng_SetStatisticalCheckLimit>
    2fca:	2800      	cmp	r0, #0
    2fcc:	d17a      	bne.n	30c4 <TRNG_Init+0x178>
         kStatus_Success) &&
    2fce:	f105 0224 	add.w	r2, r5, #36	; 0x24
    2fd2:	2104      	movs	r1, #4
    2fd4:	4620      	mov	r0, r4
    2fd6:	f7ff fe79 	bl	2ccc <trng_SetStatisticalCheckLimit>
    2fda:	2800      	cmp	r0, #0
    2fdc:	d172      	bne.n	30c4 <TRNG_Init+0x178>
         kStatus_Success) &&
    2fde:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    2fe2:	2105      	movs	r1, #5
    2fe4:	4620      	mov	r0, r4
    2fe6:	f7ff fe71 	bl	2ccc <trng_SetStatisticalCheckLimit>
    2fea:	2800      	cmp	r0, #0
    2fec:	d16a      	bne.n	30c4 <TRNG_Init+0x178>
         kStatus_Success) &&
    2fee:	f105 0234 	add.w	r2, r5, #52	; 0x34
    2ff2:	2106      	movs	r1, #6
    2ff4:	4620      	mov	r0, r4
    2ff6:	f7ff fe69 	bl	2ccc <trng_SetStatisticalCheckLimit>
    2ffa:	2800      	cmp	r0, #0
    2ffc:	d162      	bne.n	30c4 <TRNG_Init+0x178>
         kStatus_Success) &&
    2ffe:	f105 023c 	add.w	r2, r5, #60	; 0x3c
    3002:	2107      	movs	r1, #7
    3004:	4620      	mov	r0, r4
    3006:	f7ff fe61 	bl	2ccc <trng_SetStatisticalCheckLimit>
    300a:	2800      	cmp	r0, #0
    300c:	d15a      	bne.n	30c4 <TRNG_Init+0x178>
                                                 &userConfig->runBit6PlusLimit)) == kStatus_Success) &&
    300e:	f105 0244 	add.w	r2, r5, #68	; 0x44
    3012:	2108      	movs	r1, #8
    3014:	4620      	mov	r0, r4
    3016:	f7ff fe59 	bl	2ccc <trng_SetStatisticalCheckLimit>
    301a:	2800      	cmp	r0, #0
    301c:	d152      	bne.n	30c4 <TRNG_Init+0x178>
         kStatus_Success) &&
    301e:	f105 024c 	add.w	r2, r5, #76	; 0x4c
    3022:	2109      	movs	r1, #9
    3024:	4620      	mov	r0, r4
    3026:	f7ff fe51 	bl	2ccc <trng_SetStatisticalCheckLimit>
    302a:	2800      	cmp	r0, #0
    302c:	d14a      	bne.n	30c4 <TRNG_Init+0x178>
        TRNG_WR_MCTL_FOR_SCLK(base, userConfig->clockMode);
    302e:	786b      	ldrb	r3, [r5, #1]
    3030:	6822      	ldr	r2, [r4, #0]
    3032:	01db      	lsls	r3, r3, #7
    3034:	f422 5284 	bic.w	r2, r2, #4224	; 0x1080
    3038:	b2db      	uxtb	r3, r3
    303a:	4313      	orrs	r3, r2
    303c:	6023      	str	r3, [r4, #0]
        TRNG_WR_MCTL_OSC_DIV(base, userConfig->ringOscDiv);
    303e:	6822      	ldr	r2, [r4, #0]
    3040:	78ab      	ldrb	r3, [r5, #2]
    3042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3046:	009b      	lsls	r3, r3, #2
    3048:	f022 020c 	bic.w	r2, r2, #12
    304c:	f003 030c 	and.w	r3, r3, #12
    3050:	4313      	orrs	r3, r2
    3052:	6023      	str	r3, [r4, #0]
        TRNG_WR_MCTL_SAMP_MODE(base, userConfig->sampleMode);
    3054:	6822      	ldr	r2, [r4, #0]
    3056:	78eb      	ldrb	r3, [r5, #3]
    3058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    305c:	f022 0203 	bic.w	r2, r2, #3
    3060:	f003 0303 	and.w	r3, r3, #3
    3064:	4313      	orrs	r3, r2
    3066:	6023      	str	r3, [r4, #0]
        TRNG_WR_SDCTL_ENT_DLY(base, userConfig->entropyDelay);
    3068:	6923      	ldr	r3, [r4, #16]
    306a:	88aa      	ldrh	r2, [r5, #4]
    306c:	b29b      	uxth	r3, r3
    306e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3072:	6123      	str	r3, [r4, #16]
        TRNG_WR_SDCTL_SAMP_SIZE(base, userConfig->sampleSize);
    3074:	6923      	ldr	r3, [r4, #16]
    3076:	88ea      	ldrh	r2, [r5, #6]
    3078:	0c1b      	lsrs	r3, r3, #16
    307a:	041b      	lsls	r3, r3, #16
    307c:	4313      	orrs	r3, r2
    307e:	6123      	str	r3, [r4, #16]
        TRNG_WR_SBLIM_SB_LIM(base, userConfig->sparseBitLimit);
    3080:	6962      	ldr	r2, [r4, #20]
    3082:	892b      	ldrh	r3, [r5, #8]
    3084:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
    3088:	f022 0203 	bic.w	r2, r2, #3
    308c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3090:	4313      	orrs	r3, r2
    3092:	6163      	str	r3, [r4, #20]
        TRNG_WR_SCMISC_LRUN_MAX(base, userConfig->longRunMaxLimit);
    3094:	6863      	ldr	r3, [r4, #4]
    3096:	7aea      	ldrb	r2, [r5, #11]
    3098:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    309c:	4313      	orrs	r3, r2
    309e:	6063      	str	r3, [r4, #4]
            TRNG_WR_MCTL_PRGM(base, kTRNG_WorkModeRun);
    30a0:	6823      	ldr	r3, [r4, #0]
    30a2:	f423 3388 	bic.w	r3, r3, #69632	; 0x11000
    30a6:	6023      	str	r3, [r4, #0]
            TRNG_WR_MCTL_TRNG_ACC(base, 1);
    30a8:	6823      	ldr	r3, [r4, #0]
    30aa:	f423 5381 	bic.w	r3, r3, #4128	; 0x1020
    30ae:	f043 0320 	orr.w	r3, r3, #32
    30b2:	6023      	str	r3, [r4, #0]
            if (userConfig->lock == 1) /* Disable programmability of TRNG registers. */
    30b4:	782b      	ldrb	r3, [r5, #0]
    30b6:	b12b      	cbz	r3, 30c4 <TRNG_Init+0x178>
                TRNG_WR_SEC_CFG_NO_PRGM(base, 1);
    30b8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    30bc:	f043 0302 	orr.w	r3, r3, #2
    30c0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    }

    return result;
}
    30c4:	bd38      	pop	{r3, r4, r5, pc}
    30c6:	bf00      	nop
    30c8:	40048030 	.word	0x40048030

000030cc <DSPI_CommonIRQHandler>:
        handle->errorCount++;
    }
}

static void DSPI_CommonIRQHandler(SPI_Type *base, void *param)
{
    30cc:	b508      	push	{r3, lr}
 * @param base DSPI peripheral address.
 * @return Returns true if the module is in master mode or false if the module is in slave mode.
 */
static inline bool DSPI_IsMaster(SPI_Type *base)
{
    return (bool)((base->MCR) & SPI_MCR_MSTR_MASK);
    30ce:	6803      	ldr	r3, [r0, #0]
    if (DSPI_IsMaster(base))
    30d0:	2b00      	cmp	r3, #0
    {
        s_dspiMasterIsr(base, (dspi_master_handle_t *)param);
    30d2:	bfb4      	ite	lt
    30d4:	4b03      	ldrlt	r3, [pc, #12]	; (30e4 <DSPI_CommonIRQHandler+0x18>)
    }
    else
    {
        s_dspiSlaveIsr(base, (dspi_slave_handle_t *)param);
    30d6:	4b04      	ldrge	r3, [pc, #16]	; (30e8 <DSPI_CommonIRQHandler+0x1c>)
    30d8:	681b      	ldr	r3, [r3, #0]
    30da:	4798      	blx	r3
    30dc:	f3bf 8f4f 	dsb	sy
    30e0:	bd08      	pop	{r3, pc}
    30e2:	bf00      	nop
    30e4:	1fff0358 	.word	0x1fff0358
    30e8:	1fff035c 	.word	0x1fff035c

000030ec <SPI0_DriverIRQHandler>:
#endif
}

#if defined(SPI0)
void SPI0_DriverIRQHandler(void)
{
    30ec:	b508      	push	{r3, lr}
    assert(g_dspiHandle[0]);
    30ee:	4b07      	ldr	r3, [pc, #28]	; (310c <SPI0_DriverIRQHandler+0x20>)
    30f0:	6819      	ldr	r1, [r3, #0]
    30f2:	b931      	cbnz	r1, 3102 <SPI0_DriverIRQHandler+0x16>
    30f4:	4b06      	ldr	r3, [pc, #24]	; (3110 <SPI0_DriverIRQHandler+0x24>)
    30f6:	4a07      	ldr	r2, [pc, #28]	; (3114 <SPI0_DriverIRQHandler+0x28>)
    30f8:	4807      	ldr	r0, [pc, #28]	; (3118 <SPI0_DriverIRQHandler+0x2c>)
    30fa:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
    30fe:	f7fd fadb 	bl	6b8 <__assert_func>
    DSPI_CommonIRQHandler(SPI0, g_dspiHandle[0]);
    3102:	4806      	ldr	r0, [pc, #24]	; (311c <SPI0_DriverIRQHandler+0x30>)
}
    3104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DSPI_CommonIRQHandler(SPI0, g_dspiHandle[0]);
    3108:	f7ff bfe0 	b.w	30cc <DSPI_CommonIRQHandler>
    310c:	1fff034c 	.word	0x1fff034c
    3110:	0000429e 	.word	0x0000429e
    3114:	000042ce 	.word	0x000042ce
    3118:	00004285 	.word	0x00004285
    311c:	4002c000 	.word	0x4002c000

00003120 <SPI1_DriverIRQHandler>:
#endif

#if defined(SPI1)
void SPI1_DriverIRQHandler(void)
{
    3120:	b508      	push	{r3, lr}
    assert(g_dspiHandle[1]);
    3122:	4b07      	ldr	r3, [pc, #28]	; (3140 <SPI1_DriverIRQHandler+0x20>)
    3124:	6859      	ldr	r1, [r3, #4]
    3126:	b931      	cbnz	r1, 3136 <SPI1_DriverIRQHandler+0x16>
    3128:	4b06      	ldr	r3, [pc, #24]	; (3144 <SPI1_DriverIRQHandler+0x24>)
    312a:	4a07      	ldr	r2, [pc, #28]	; (3148 <SPI1_DriverIRQHandler+0x28>)
    312c:	4807      	ldr	r0, [pc, #28]	; (314c <SPI1_DriverIRQHandler+0x2c>)
    312e:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
    3132:	f7fd fac1 	bl	6b8 <__assert_func>
    DSPI_CommonIRQHandler(SPI1, g_dspiHandle[1]);
    3136:	4806      	ldr	r0, [pc, #24]	; (3150 <SPI1_DriverIRQHandler+0x30>)
}
    3138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DSPI_CommonIRQHandler(SPI1, g_dspiHandle[1]);
    313c:	f7ff bfc6 	b.w	30cc <DSPI_CommonIRQHandler>
    3140:	1fff034c 	.word	0x1fff034c
    3144:	000042ae 	.word	0x000042ae
    3148:	000042e4 	.word	0x000042e4
    314c:	00004285 	.word	0x00004285
    3150:	4002d000 	.word	0x4002d000

00003154 <SPI2_DriverIRQHandler>:
#endif

#if defined(SPI2)
void SPI2_DriverIRQHandler(void)
{
    3154:	b508      	push	{r3, lr}
    assert(g_dspiHandle[2]);
    3156:	4b07      	ldr	r3, [pc, #28]	; (3174 <SPI2_DriverIRQHandler+0x20>)
    3158:	6899      	ldr	r1, [r3, #8]
    315a:	b931      	cbnz	r1, 316a <SPI2_DriverIRQHandler+0x16>
    315c:	4b06      	ldr	r3, [pc, #24]	; (3178 <SPI2_DriverIRQHandler+0x24>)
    315e:	4a07      	ldr	r2, [pc, #28]	; (317c <SPI2_DriverIRQHandler+0x28>)
    3160:	4807      	ldr	r0, [pc, #28]	; (3180 <SPI2_DriverIRQHandler+0x2c>)
    3162:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
    3166:	f7fd faa7 	bl	6b8 <__assert_func>
    DSPI_CommonIRQHandler(SPI2, g_dspiHandle[2]);
    316a:	4806      	ldr	r0, [pc, #24]	; (3184 <SPI2_DriverIRQHandler+0x30>)
}
    316c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DSPI_CommonIRQHandler(SPI2, g_dspiHandle[2]);
    3170:	f7ff bfac 	b.w	30cc <DSPI_CommonIRQHandler>
    3174:	1fff034c 	.word	0x1fff034c
    3178:	000042be 	.word	0x000042be
    317c:	000042fa 	.word	0x000042fa
    3180:	00004285 	.word	0x00004285
    3184:	400ac000 	.word	0x400ac000

00003188 <CLOCK_SetSimConfig>:
    return freq;
}

void CLOCK_SetSimConfig(sim_clock_config_t const *config)
{
    SIM->CLKDIV1 = config->clkdiv1;
    3188:	4912      	ldr	r1, [pc, #72]	; (31d4 <CLOCK_SetSimConfig+0x4c>)
    318a:	6842      	ldr	r2, [r0, #4]
    318c:	f241 0344 	movw	r3, #4164	; 0x1044
{
    3190:	b570      	push	{r4, r5, r6, lr}
    SIM->CLKDIV1 = config->clkdiv1;
    3192:	50ca      	str	r2, [r1, r3]
 *
 * @param src The value to set PLLFLLSEL clock source.
 */
static inline void CLOCK_SetPllFllSelClock(uint32_t src, uint32_t divValue, uint32_t fracValue)
{
    SIM->SOPT2 = ((SIM->SOPT2 & ~SIM_SOPT2_PLLFLLSEL_MASK) | SIM_SOPT2_PLLFLLSEL(src));
    3194:	f241 0604 	movw	r6, #4100	; 0x1004
    CLOCK_SetPllFllSelClock(config->pllFllSel, config->pllFllDiv, config->pllFllFrac);
    3198:	7802      	ldrb	r2, [r0, #0]
    319a:	598d      	ldr	r5, [r1, r6]
    319c:	7843      	ldrb	r3, [r0, #1]
    319e:	7884      	ldrb	r4, [r0, #2]
    31a0:	0412      	lsls	r2, r2, #16
    31a2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    31a6:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    31aa:	432a      	orrs	r2, r5
    SIM->CLKDIV3 = SIM_CLKDIV3_PLLFLLDIV(divValue) | SIM_CLKDIV3_PLLFLLFRAC(fracValue);
    31ac:	005b      	lsls	r3, r3, #1
    SIM->SOPT2 = ((SIM->SOPT2 & ~SIM_SOPT2_PLLFLLSEL_MASK) | SIM_SOPT2_PLLFLLSEL(src));
    31ae:	518a      	str	r2, [r1, r6]
    SIM->CLKDIV3 = SIM_CLKDIV3_PLLFLLDIV(divValue) | SIM_CLKDIV3_PLLFLLFRAC(fracValue);
    31b0:	f003 030e 	and.w	r3, r3, #14
    31b4:	f004 0201 	and.w	r2, r4, #1
    31b8:	4313      	orrs	r3, r2
    31ba:	f241 0264 	movw	r2, #4196	; 0x1064
    31be:	508b      	str	r3, [r1, r2]
    CLOCK_SetEr32kClock(config->er32kSrc);
    31c0:	78c3      	ldrb	r3, [r0, #3]
    SIM->SOPT1 = ((SIM->SOPT1 & ~SIM_SOPT1_OSC32KSEL_MASK) | SIM_SOPT1_OSC32KSEL(src));
    31c2:	680a      	ldr	r2, [r1, #0]
    31c4:	049b      	lsls	r3, r3, #18
    31c6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    31ca:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    31ce:	4313      	orrs	r3, r2
    31d0:	600b      	str	r3, [r1, #0]
    31d2:	bd70      	pop	{r4, r5, r6, pc}
    31d4:	40047000 	.word	0x40047000

000031d8 <CLOCK_SetExternalRefClkConfig>:
    mcgpll0clk >>= 1U;
    return mcgpll0clk;
}

status_t CLOCK_SetExternalRefClkConfig(mcg_oscsel_t oscsel)
{
    31d8:	b510      	push	{r4, lr}
    {
        return kStatus_MCG_SourceUsed;
    }
#endif /* MCG_CONFIG_CHECK_PARAM */

    if (MCG_C7_OSCSEL_VAL != oscsel)
    31da:	490a      	ldr	r1, [pc, #40]	; (3204 <CLOCK_SetExternalRefClkConfig+0x2c>)
    31dc:	7b0a      	ldrb	r2, [r1, #12]
    else
    {
        needDelay = false;
    }

    MCG->C7 = (MCG->C7 & ~MCG_C7_OSCSEL_MASK) | MCG_C7_OSCSEL(oscsel);
    31de:	7b0b      	ldrb	r3, [r1, #12]
    31e0:	f000 0403 	and.w	r4, r0, #3
    31e4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    31e8:	4323      	orrs	r3, r4
    31ea:	730b      	strb	r3, [r1, #12]
    if (needDelay)
    31ec:	f002 0303 	and.w	r3, r2, #3
    31f0:	4283      	cmp	r3, r0
    31f2:	d003      	beq.n	31fc <CLOCK_SetExternalRefClkConfig+0x24>
    31f4:	f240 53dd 	movw	r3, #1501	; 0x5dd
    {
        /* ERR009878 Delay at least 50 micro-seconds for external clock change valid. */
        i = 1500U;
        while (i--)
    31f8:	3b01      	subs	r3, #1
    31fa:	d101      	bne.n	3200 <CLOCK_SetExternalRefClkConfig+0x28>
            __NOP();
        }
    }

    return kStatus_Success;
}
    31fc:	2000      	movs	r0, #0
    31fe:	bd10      	pop	{r4, pc}
            __NOP();
    3200:	bf00      	nop
    3202:	e7f9      	b.n	31f8 <CLOCK_SetExternalRefClkConfig+0x20>
    3204:	40064000 	.word	0x40064000

00003208 <CLOCK_InitOsc0>:
    }
}

void CLOCK_InitOsc0(osc_config_t const *config)
{
    uint8_t range = CLOCK_GetOscRangeFromFreq(config->freq);
    3208:	6803      	ldr	r3, [r0, #0]
    if (freq <= 39063U)
    320a:	f649 0297 	movw	r2, #39063	; 0x9897
    320e:	4293      	cmp	r3, r2
{
    3210:	b510      	push	{r4, lr}
    if (freq <= 39063U)
    3212:	d926      	bls.n	3262 <CLOCK_InitOsc0+0x5a>
        range = 2U;
    3214:	4c14      	ldr	r4, [pc, #80]	; (3268 <CLOCK_InitOsc0+0x60>)
    3216:	42a3      	cmp	r3, r4
    3218:	bf94      	ite	ls
    321a:	2401      	movls	r4, #1
    321c:	2402      	movhi	r4, #2
   OSC_SetCapLoad(OSC, kOSC_Cap2P | kOSC_Cap8P);
   @endcode
 */
static inline void OSC_SetCapLoad(OSC_Type *base, uint8_t capLoad)
{
    uint8_t reg = base->CR;
    321e:	4a13      	ldr	r2, [pc, #76]	; (326c <CLOCK_InitOsc0+0x64>)

    reg &= ~(OSC_CR_SC2P_MASK | OSC_CR_SC4P_MASK | OSC_CR_SC8P_MASK | OSC_CR_SC16P_MASK);
    reg |= capLoad;
    3220:	7901      	ldrb	r1, [r0, #4]
    uint8_t reg = base->CR;
    3222:	7813      	ldrb	r3, [r2, #0]
    reg &= ~(OSC_CR_SC2P_MASK | OSC_CR_SC4P_MASK | OSC_CR_SC8P_MASK | OSC_CR_SC16P_MASK);
    3224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    reg |= capLoad;
    3228:	430b      	orrs	r3, r1

    base->CR = reg;
    322a:	7013      	strb	r3, [r2, #0]
    uint8_t reg = base->CR;
    322c:	7813      	ldrb	r3, [r2, #0]
    reg |= config->enableMode;
    322e:	7981      	ldrb	r1, [r0, #6]
    reg &= ~(OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK);
    3230:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    reg |= config->enableMode;
    3234:	430b      	orrs	r3, r1
    base->CR = reg;
    3236:	7013      	strb	r3, [r2, #0]
    base->DIV = OSC_DIV_ERPS(config->erclkDiv);
    3238:	79c3      	ldrb	r3, [r0, #7]

    OSC_SetCapLoad(OSC0, config->capLoad);
    OSC_SetExtRefClkConfig(OSC0, &config->oscerConfig);

    MCG->C2 = ((MCG->C2 & ~OSC_MODE_MASK) | MCG_C2_RANGE(range) | (uint8_t)config->workMode);
    323a:	490d      	ldr	r1, [pc, #52]	; (3270 <CLOCK_InitOsc0+0x68>)
    323c:	019b      	lsls	r3, r3, #6
    323e:	b2db      	uxtb	r3, r3
    3240:	7093      	strb	r3, [r2, #2]
    3242:	784b      	ldrb	r3, [r1, #1]
    3244:	7940      	ldrb	r0, [r0, #5]
    3246:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
    324a:	4303      	orrs	r3, r0
    324c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    3250:	704b      	strb	r3, [r1, #1]

    if ((kOSC_ModeExt != config->workMode) && (OSC0->CR & OSC_CR_ERCLKEN_MASK))
    3252:	b128      	cbz	r0, 3260 <CLOCK_InitOsc0+0x58>
    3254:	7813      	ldrb	r3, [r2, #0]
    3256:	061a      	lsls	r2, r3, #24
    3258:	d502      	bpl.n	3260 <CLOCK_InitOsc0+0x58>
    {
        /* Wait for stable. */
        while (!(MCG->S & MCG_S_OSCINIT0_MASK))
    325a:	798b      	ldrb	r3, [r1, #6]
    325c:	079b      	lsls	r3, r3, #30
    325e:	d5fc      	bpl.n	325a <CLOCK_InitOsc0+0x52>
    3260:	bd10      	pop	{r4, pc}
        range = 0U;
    3262:	2400      	movs	r4, #0
    3264:	e7db      	b.n	321e <CLOCK_InitOsc0+0x16>
    3266:	bf00      	nop
    3268:	007a1200 	.word	0x007a1200
    326c:	40065000 	.word	0x40065000
    3270:	40064000 	.word	0x40064000

00003274 <CLOCK_SetFbeMode>:

    return kStatus_Success;
}

status_t CLOCK_SetFbeMode(uint8_t frdiv, mcg_dmx32_t dmx32, mcg_drs_t drs, void (*fllStableDelay)(void))
{
    3274:	b570      	push	{r4, r5, r6, lr}
        return kStatus_MCG_ModeUnreachable;
    }
#endif

    /* Change to FLL mode. */
    MCG->C6 &= ~MCG_C6_PLLS_MASK;
    3276:	4a1e      	ldr	r2, [pc, #120]	; (32f0 <CLOCK_SetFbeMode+0x7c>)
    3278:	7951      	ldrb	r1, [r2, #5]
    327a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    327e:	7151      	strb	r1, [r2, #5]
    while (MCG->S & MCG_S_PLLST_MASK)
    3280:	7991      	ldrb	r1, [r2, #6]
    3282:	068d      	lsls	r5, r1, #26
    3284:	d4fc      	bmi.n	3280 <CLOCK_SetFbeMode+0xc>
    {
    }

    /* Set LP bit to enable the FLL */
    MCG->C2 &= ~MCG_C2_LP_MASK;
    3286:	7851      	ldrb	r1, [r2, #1]
    3288:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    328c:	7051      	strb	r1, [r2, #1]

    mcg_c4 = MCG->C4;
    328e:	78d6      	ldrb	r6, [r2, #3]
       Errata: ERR007993
       Workaround: Invert MCG_C4[DMX32] or change MCG_C4[DRST_DRS] before
       reference clock source changes, then reset to previous value after
       reference clock changes.
     */
    if (kMCG_FllSrcInternal == MCG_S_IREFST_VAL)
    3290:	7991      	ldrb	r1, [r2, #6]
    3292:	f3c1 1100 	ubfx	r1, r1, #4, #1
    mcg_c4 = MCG->C4;
    3296:	b2f6      	uxtb	r6, r6
    if (kMCG_FllSrcInternal == MCG_S_IREFST_VAL)
    3298:	b341      	cbz	r1, 32ec <CLOCK_SetFbeMode+0x78>
    {
        change_drs = true;
        /* Change the LSB of DRST_DRS. */
        MCG->C4 ^= (1U << MCG_C4_DRST_DRS_SHIFT);
    329a:	78d1      	ldrb	r1, [r2, #3]
    329c:	f081 0120 	eor.w	r1, r1, #32
    32a0:	70d1      	strb	r1, [r2, #3]
        change_drs = true;
    32a2:	2201      	movs	r2, #1
    }

    /* Set CLKS and IREFS. */
    MCG->C1 = ((MCG->C1 & ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK)) |
    32a4:	4912      	ldr	r1, [pc, #72]	; (32f0 <CLOCK_SetFbeMode+0x7c>)
    32a6:	780c      	ldrb	r4, [r1, #0]
               (MCG_C1_CLKS(kMCG_ClkOutSrcExternal)    /* CLKS = 2 */
                | MCG_C1_FRDIV(frdiv)                  /* FRDIV = frdiv */
    32a8:	00c0      	lsls	r0, r0, #3
    32aa:	f000 0538 	and.w	r5, r0, #56	; 0x38
    MCG->C1 = ((MCG->C1 & ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK)) |
    32ae:	f004 0003 	and.w	r0, r4, #3
    32b2:	4328      	orrs	r0, r5
    32b4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    32b8:	7008      	strb	r0, [r1, #0]
                | MCG_C1_IREFS(kMCG_FllSrcExternal))); /* IREFS = 0 */

    /* If use external crystal as clock source, wait for it stable. */
    if (MCG_C7_OSCSEL(kMCG_OscselOsc) == (MCG->C7 & MCG_C7_OSCSEL_MASK))
    32ba:	7b08      	ldrb	r0, [r1, #12]
    32bc:	0784      	lsls	r4, r0, #30
    32be:	d105      	bne.n	32cc <CLOCK_SetFbeMode+0x58>
    {
        if (MCG->C2 & MCG_C2_EREFS_MASK)
    32c0:	7848      	ldrb	r0, [r1, #1]
    32c2:	0740      	lsls	r0, r0, #29
    32c4:	d502      	bpl.n	32cc <CLOCK_SetFbeMode+0x58>
        {
            while (!(MCG->S & MCG_S_OSCINIT0_MASK))
    32c6:	7988      	ldrb	r0, [r1, #6]
    32c8:	0785      	lsls	r5, r0, #30
    32ca:	d5fc      	bpl.n	32c6 <CLOCK_SetFbeMode+0x52>
            }
        }
    }

    /* Wait for Reference clock Status bit to clear */
    while (kMCG_FllSrcExternal != MCG_S_IREFST_VAL)
    32cc:	4908      	ldr	r1, [pc, #32]	; (32f0 <CLOCK_SetFbeMode+0x7c>)
    32ce:	4608      	mov	r0, r1
    32d0:	798c      	ldrb	r4, [r1, #6]
    32d2:	06e4      	lsls	r4, r4, #27
    32d4:	d4fc      	bmi.n	32d0 <CLOCK_SetFbeMode+0x5c>
    {
    }

    /* Errata: ERR007993 */
    if (change_drs)
    32d6:	b102      	cbz	r2, 32da <CLOCK_SetFbeMode+0x66>
    {
        MCG->C4 = mcg_c4;
    32d8:	70ce      	strb	r6, [r1, #3]

    /* Set DRST_DRS and DMX32. */
    mcg_c4 = ((mcg_c4 & ~(MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) | (MCG_C4_DMX32(dmx32) | MCG_C4_DRST_DRS(drs)));

    /* Wait for clock status bits to show clock source is ext ref clk */
    while (kMCG_ClkOutStatExt != MCG_S_CLKST_VAL)
    32da:	7982      	ldrb	r2, [r0, #6]
    32dc:	f3c2 0281 	ubfx	r2, r2, #2, #2
    32e0:	2a02      	cmp	r2, #2
    32e2:	d1fa      	bne.n	32da <CLOCK_SetFbeMode+0x66>
    {
    }

    /* Wait for fll stable time. */
    if (fllStableDelay)
    32e4:	b103      	cbz	r3, 32e8 <CLOCK_SetFbeMode+0x74>
    {
        fllStableDelay();
    32e6:	4798      	blx	r3
    }

    return kStatus_Success;
}
    32e8:	2000      	movs	r0, #0
    32ea:	bd70      	pop	{r4, r5, r6, pc}
    bool change_drs = false;
    32ec:	460a      	mov	r2, r1
    32ee:	e7d9      	b.n	32a4 <CLOCK_SetFbeMode+0x30>
    32f0:	40064000 	.word	0x40064000

000032f4 <SDHC_DriverIRQHandler>:
    SDHC_ClearInterruptStatusFlags(base, interruptFlags);
}

#if defined(SDHC)
void SDHC_DriverIRQHandler(void)
{
    32f4:	b508      	push	{r3, lr}
    assert(s_sdhcHandle[0]);
    32f6:	4b08      	ldr	r3, [pc, #32]	; (3318 <SDHC_DriverIRQHandler+0x24>)
    32f8:	6819      	ldr	r1, [r3, #0]
    32fa:	b931      	cbnz	r1, 330a <SDHC_DriverIRQHandler+0x16>
    32fc:	4b07      	ldr	r3, [pc, #28]	; (331c <SDHC_DriverIRQHandler+0x28>)
    32fe:	4a08      	ldr	r2, [pc, #32]	; (3320 <SDHC_DriverIRQHandler+0x2c>)
    3300:	4808      	ldr	r0, [pc, #32]	; (3324 <SDHC_DriverIRQHandler+0x30>)
    3302:	f240 5194 	movw	r1, #1428	; 0x594
    3306:	f7fd f9d7 	bl	6b8 <__assert_func>

    s_sdhcIsr(SDHC, s_sdhcHandle[0]);
    330a:	4b07      	ldr	r3, [pc, #28]	; (3328 <SDHC_DriverIRQHandler+0x34>)
    330c:	4807      	ldr	r0, [pc, #28]	; (332c <SDHC_DriverIRQHandler+0x38>)
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	4798      	blx	r3
    3312:	f3bf 8f4f 	dsb	sy
    3316:	bd08      	pop	{r3, pc}
    3318:	1fff0364 	.word	0x1fff0364
    331c:	00004310 	.word	0x00004310
    3320:	0000435d 	.word	0x0000435d
    3324:	00004327 	.word	0x00004327
    3328:	1fff0368 	.word	0x1fff0368
    332c:	400b1000 	.word	0x400b1000

00003330 <etmtrace_enable>:
    #define PORT_PCR_DSE_ENABLE       (1<<6)  /* Port Configuration Register, Drive Strength Enable (DSE) bit */
    #define PORT_PCR_MUX_ALTERNATE_4  (4<<8) /* Port Configuration Register, Alternate 4 function (mux as trace pin) */
    #define PORT_PCR_CONFIG_FOR_TRACE (PORT_PCR_DSE_ENABLE|PORT_PCR_DSE_ENABLE|PORT_PCR_MUX_ALTERNATE_4) /* for trace, mux it with function 5 and high drive strength */

    /* check and enable clocking of PORTE */
    value = SIM->SCGC5; /* read SIM_SCGC5 at 0x40048038 */
    3330:	4b1b      	ldr	r3, [pc, #108]	; (33a0 <etmtrace_enable+0x70>)
    3332:	f241 0238 	movw	r2, #4152	; 0x1038
    3336:	5899      	ldr	r1, [r3, r2]
    if ((value & (1<<13)) == 0) { /* Bit13 in SCGC5 is the PortE clock gate control bit. Clock not already enabled? */
    3338:	0488      	lsls	r0, r1, #18
        SIM->SCGC5 |= (1<<13);    /* Enabling clock gate for Port E */
    333a:	bf5e      	ittt	pl
    333c:	5899      	ldrpl	r1, [r3, r2]
    333e:	f441 5100 	orrpl.w	r1, r1, #8192	; 0x2000
    3342:	5099      	strpl	r1, [r3, r2]
    }
    value = SIM->SOPT2; /* SIM_SOPT2 at 0x40048004 */
    3344:	f241 0204 	movw	r2, #4100	; 0x1004
    3348:	5899      	ldr	r1, [r3, r2]
    if ((value&(1<<12))==0) { /* Bit 12 enables the trace clock. Is the debug trace clock not already enabled? */
    334a:	04c9      	lsls	r1, r1, #19
        SIM->SOPT2 |= (1<<12); /* Debug trace clock select = Core/system clock */
    334c:	bf5e      	ittt	pl
    334e:	5899      	ldrpl	r1, [r3, r2]
    3350:	f441 5180 	orrpl.w	r1, r1, #4096	; 0x1000
    3354:	5099      	strpl	r1, [r3, r2]
    (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
    3356:	4a13      	ldr	r2, [pc, #76]	; (33a4 <etmtrace_enable+0x74>)
    3358:	6813      	ldr	r3, [r2, #0]
    335a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    335e:	6013      	str	r3, [r2, #0]
    3360:	4b11      	ldr	r3, [pc, #68]	; (33a8 <etmtrace_enable+0x78>)
    3362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3364:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    3368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    336c:	641a      	str	r2, [r3, #64]	; 0x40
    336e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3370:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    3374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3378:	63da      	str	r2, [r3, #60]	; 0x3c
    337a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    337c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    3380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3384:	639a      	str	r2, [r3, #56]	; 0x38
    3386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    338c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3390:	635a      	str	r2, [r3, #52]	; 0x34
    3392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3394:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
    3398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    339c:	631a      	str	r2, [r3, #48]	; 0x30
    339e:	4770      	bx	lr
    33a0:	40047000 	.word	0x40047000
    33a4:	40048038 	.word	0x40048038
    33a8:	40049000 	.word	0x40049000

000033ac <I2C_TransferCommonIRQHandler>:

    return result;
}

static void I2C_TransferCommonIRQHandler(I2C_Type *base, void *handle)
{
    33ac:	b510      	push	{r4, lr}
    /* Check if master interrupt. */
    if ((base->S & kI2C_ArbitrationLostFlag) || (base->C1 & I2C_C1_MST_MASK))
    33ae:	78c2      	ldrb	r2, [r0, #3]
    33b0:	06d2      	lsls	r2, r2, #27
{
    33b2:	4603      	mov	r3, r0
    33b4:	460c      	mov	r4, r1
    if ((base->S & kI2C_ArbitrationLostFlag) || (base->C1 & I2C_C1_MST_MASK))
    33b6:	d402      	bmi.n	33be <I2C_TransferCommonIRQHandler+0x12>
    33b8:	7882      	ldrb	r2, [r0, #2]
    33ba:	0692      	lsls	r2, r2, #26
    33bc:	d507      	bpl.n	33ce <I2C_TransferCommonIRQHandler+0x22>
    {
        s_i2cMasterIsr(base, handle);
    33be:	4a06      	ldr	r2, [pc, #24]	; (33d8 <I2C_TransferCommonIRQHandler+0x2c>)
    33c0:	4621      	mov	r1, r4
    33c2:	6812      	ldr	r2, [r2, #0]
    33c4:	4618      	mov	r0, r3
    33c6:	4790      	blx	r2
    33c8:	f3bf 8f4f 	dsb	sy
    33cc:	bd10      	pop	{r4, pc}
    }
    else
    {
        s_i2cSlaveIsr(base, handle);
    33ce:	4b03      	ldr	r3, [pc, #12]	; (33dc <I2C_TransferCommonIRQHandler+0x30>)
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	4798      	blx	r3
    33d4:	e7f8      	b.n	33c8 <I2C_TransferCommonIRQHandler+0x1c>
    33d6:	bf00      	nop
    33d8:	1fff037c 	.word	0x1fff037c
    33dc:	1fff0380 	.word	0x1fff0380

000033e0 <I2C0_DriverIRQHandler>:
}

#if defined(I2C0)
void I2C0_DriverIRQHandler(void)
{
    I2C_TransferCommonIRQHandler(I2C0, s_i2cHandle[0]);
    33e0:	4b02      	ldr	r3, [pc, #8]	; (33ec <I2C0_DriverIRQHandler+0xc>)
    33e2:	4803      	ldr	r0, [pc, #12]	; (33f0 <I2C0_DriverIRQHandler+0x10>)
    33e4:	6819      	ldr	r1, [r3, #0]
    33e6:	f7ff bfe1 	b.w	33ac <I2C_TransferCommonIRQHandler>
    33ea:	bf00      	nop
    33ec:	1fff036c 	.word	0x1fff036c
    33f0:	40066000 	.word	0x40066000

000033f4 <I2C1_DriverIRQHandler>:
#endif

#if defined(I2C1)
void I2C1_DriverIRQHandler(void)
{
    I2C_TransferCommonIRQHandler(I2C1, s_i2cHandle[1]);
    33f4:	4b02      	ldr	r3, [pc, #8]	; (3400 <I2C1_DriverIRQHandler+0xc>)
    33f6:	4803      	ldr	r0, [pc, #12]	; (3404 <I2C1_DriverIRQHandler+0x10>)
    33f8:	6859      	ldr	r1, [r3, #4]
    33fa:	f7ff bfd7 	b.w	33ac <I2C_TransferCommonIRQHandler>
    33fe:	bf00      	nop
    3400:	1fff036c 	.word	0x1fff036c
    3404:	40067000 	.word	0x40067000

00003408 <I2C2_DriverIRQHandler>:
#endif

#if defined(I2C2)
void I2C2_DriverIRQHandler(void)
{
    I2C_TransferCommonIRQHandler(I2C2, s_i2cHandle[2]);
    3408:	4b02      	ldr	r3, [pc, #8]	; (3414 <I2C2_DriverIRQHandler+0xc>)
    340a:	4803      	ldr	r0, [pc, #12]	; (3418 <I2C2_DriverIRQHandler+0x10>)
    340c:	6899      	ldr	r1, [r3, #8]
    340e:	f7ff bfcd 	b.w	33ac <I2C_TransferCommonIRQHandler>
    3412:	bf00      	nop
    3414:	1fff036c 	.word	0x1fff036c
    3418:	400e6000 	.word	0x400e6000

0000341c <I2C3_DriverIRQHandler>:
#endif

#if defined(I2C3)
void I2C3_DriverIRQHandler(void)
{
    I2C_TransferCommonIRQHandler(I2C3, s_i2cHandle[3]);
    341c:	4b02      	ldr	r3, [pc, #8]	; (3428 <I2C3_DriverIRQHandler+0xc>)
    341e:	4803      	ldr	r0, [pc, #12]	; (342c <I2C3_DriverIRQHandler+0x10>)
    3420:	68d9      	ldr	r1, [r3, #12]
    3422:	f7ff bfc3 	b.w	33ac <I2C_TransferCommonIRQHandler>
    3426:	bf00      	nop
    3428:	1fff036c 	.word	0x1fff036c
    342c:	400e7000 	.word	0x400e7000

00003430 <SystemInitHook>:

/* ----------------------------------------------------------------------------
   -- SystemInitHook()
   ---------------------------------------------------------------------------- */

__attribute__ ((weak)) void SystemInitHook (void) {
    3430:	4770      	bx	lr
    3432:	0000      	movs	r0, r0

00003434 <SystemInit>:
void SystemInit (void) {
    3434:	b508      	push	{r3, lr}
  WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xC520); /* Key 1 */
    3436:	4b06      	ldr	r3, [pc, #24]	; (3450 <SystemInit+0x1c>)
    3438:	f24c 5220 	movw	r2, #50464	; 0xc520
    343c:	81da      	strh	r2, [r3, #14]
  WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xD928); /* Key 2 */
    343e:	f64d 1228 	movw	r2, #55592	; 0xd928
    3442:	81da      	strh	r2, [r3, #14]
  WDOG->STCTRLH = WDOG_STCTRLH_BYTESEL(0x00) |
    3444:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
    3448:	801a      	strh	r2, [r3, #0]
  SystemInitHook();
    344a:	f7ff fff1 	bl	3430 <SystemInitHook>
    344e:	bd08      	pop	{r3, pc}
    3450:	40052000 	.word	0x40052000

00003454 <CLOCK_CONFIG_FllStableDelay>:
 *
 *END**************************************************************************/
static void CLOCK_CONFIG_FllStableDelay(void)
{
    uint32_t i = 30000U;
    while (i--)
    3454:	f247 5331 	movw	r3, #30001	; 0x7531
    3458:	3b01      	subs	r3, #1
    345a:	d100      	bne.n	345e <CLOCK_CONFIG_FllStableDelay+0xa>
    {
        __NOP();
    }
}
    345c:	4770      	bx	lr
        __NOP();
    345e:	bf00      	nop
    3460:	e7fa      	b.n	3458 <CLOCK_CONFIG_FllStableDelay+0x4>
    3462:	0000      	movs	r0, r0

00003464 <BOARD_BootClockRUN>:

/*******************************************************************************
 * Code for BOARD_BootClockRUN configuration
 ******************************************************************************/
void BOARD_BootClockRUN(void)
{
    3464:	b538      	push	{r3, r4, r5, lr}
    SIM->CLKDIV1 = 0x01140000U;
    3466:	4c15      	ldr	r4, [pc, #84]	; (34bc <BOARD_BootClockRUN+0x58>)
    /* Set the system clock dividers in SIM to safe value. */
    CLOCK_SetSimSafeDivs();
    /* Initializes OSC0 according to board configuration. */
    CLOCK_InitOsc0(&oscConfig_BOARD_BootClockRUN);
    3468:	4815      	ldr	r0, [pc, #84]	; (34c0 <BOARD_BootClockRUN+0x5c>)
 *
 * @param freq The XTAL0/EXTAL0 input clock frequency in Hz.
 */
static inline void CLOCK_SetXtal0Freq(uint32_t freq)
{
    g_xtal0Freq = freq;
    346a:	4d16      	ldr	r5, [pc, #88]	; (34c4 <BOARD_BootClockRUN+0x60>)
    SIM->CLKDIV1 = 0x01140000U;
    346c:	f241 0344 	movw	r3, #4164	; 0x1044
    3470:	f04f 728a 	mov.w	r2, #18087936	; 0x1140000
    3474:	50e2      	str	r2, [r4, r3]
    3476:	f7ff fec7 	bl	3208 <CLOCK_InitOsc0>
    g_xtal0Freq = freq;
    347a:	4b13      	ldr	r3, [pc, #76]	; (34c8 <BOARD_BootClockRUN+0x64>)
    CLOCK_SetXtal0Freq(oscConfig_BOARD_BootClockRUN.freq);
    /* Set MCG to FBE mode. */
    CLOCK_SetExternalRefClkConfig(mcgConfig_BOARD_BootClockRUN.oscsel);
    347c:	2000      	movs	r0, #0
    347e:	601d      	str	r5, [r3, #0]
    3480:	f7ff feaa 	bl	31d8 <CLOCK_SetExternalRefClkConfig>
    CLOCK_SetFbeMode(mcgConfig_BOARD_BootClockRUN.frdiv,
    3484:	4b11      	ldr	r3, [pc, #68]	; (34cc <BOARD_BootClockRUN+0x68>)
    3486:	2200      	movs	r2, #0
    3488:	2101      	movs	r1, #1
    348a:	2003      	movs	r0, #3
    348c:	f7ff fef2 	bl	3274 <CLOCK_SetFbeMode>
                     mcgConfig_BOARD_BootClockRUN.dmx32,
                     mcgConfig_BOARD_BootClockRUN.drs,
                     CLOCK_CONFIG_FllStableDelay);
    /* Set the clock configuration in SIM module. */
    CLOCK_SetSimConfig(&simConfig_BOARD_BootClockRUN);
    3490:	480f      	ldr	r0, [pc, #60]	; (34d0 <BOARD_BootClockRUN+0x6c>)
    3492:	f7ff fe79 	bl	3188 <CLOCK_SetSimConfig>
    /* Set SystemCoreClock variable. */
    SystemCoreClock = BOARD_BOOTCLOCKRUN_CORE_CLOCK;
    3496:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <BOARD_BootClockRUN+0x70>)
    SIM->SOPT2 = ((SIM->SOPT2 & ~SIM_SOPT2_LPUARTSRC_MASK) | SIM_SOPT2_LPUARTSRC(src));
    3498:	f241 0204 	movw	r2, #4100	; 0x1004
    349c:	601d      	str	r5, [r3, #0]
    349e:	58a3      	ldr	r3, [r4, r2]
    34a0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    34a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    34a8:	50a3      	str	r3, [r4, r2]
    SIM->SOPT2 = ((SIM->SOPT2 & ~SIM_SOPT2_TRACECLKSEL_MASK) | SIM_SOPT2_TRACECLKSEL(src));
    34aa:	58a3      	ldr	r3, [r4, r2]
    34ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    34b0:	50a3      	str	r3, [r4, r2]
    SIM->CLKDIV4 = SIM_CLKDIV4_TRACEDIV(divValue) | SIM_CLKDIV4_TRACEFRAC(fracValue);
    34b2:	f241 0368 	movw	r3, #4200	; 0x1068
    34b6:	2200      	movs	r2, #0
    34b8:	50e2      	str	r2, [r4, r3]
    34ba:	bd38      	pop	{r3, r4, r5, pc}
    34bc:	40047000 	.word	0x40047000
    34c0:	00004374 	.word	0x00004374
    34c4:	00707510 	.word	0x00707510
    34c8:	1fff0360 	.word	0x1fff0360
    34cc:	00003455 	.word	0x00003455
    34d0:	0000437c 	.word	0x0000437c
    34d4:	1fff0068 	.word	0x1fff0068

000034d8 <FLEXIO_CommonIRQHandler>:
        return kStatus_Success;
    }
}

void FLEXIO_CommonIRQHandler(void)
{
    34d8:	b510      	push	{r4, lr}
    uint8_t index;

    for (index = 0; index < FLEXIO_HANDLE_COUNT; index++)
    {
        if (s_flexioHandle[index])
    34da:	4c09      	ldr	r4, [pc, #36]	; (3500 <FLEXIO_CommonIRQHandler+0x28>)
    34dc:	6821      	ldr	r1, [r4, #0]
    34de:	b121      	cbz	r1, 34ea <FLEXIO_CommonIRQHandler+0x12>
        {
            s_flexioIsr[index](s_flexioType[index], s_flexioHandle[index]);
    34e0:	4b08      	ldr	r3, [pc, #32]	; (3504 <FLEXIO_CommonIRQHandler+0x2c>)
    34e2:	4a09      	ldr	r2, [pc, #36]	; (3508 <FLEXIO_CommonIRQHandler+0x30>)
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	6810      	ldr	r0, [r2, #0]
    34e8:	4798      	blx	r3
        if (s_flexioHandle[index])
    34ea:	6861      	ldr	r1, [r4, #4]
    34ec:	b121      	cbz	r1, 34f8 <FLEXIO_CommonIRQHandler+0x20>
            s_flexioIsr[index](s_flexioType[index], s_flexioHandle[index]);
    34ee:	4b05      	ldr	r3, [pc, #20]	; (3504 <FLEXIO_CommonIRQHandler+0x2c>)
    34f0:	4a05      	ldr	r2, [pc, #20]	; (3508 <FLEXIO_CommonIRQHandler+0x30>)
    34f2:	685b      	ldr	r3, [r3, #4]
    34f4:	6850      	ldr	r0, [r2, #4]
    34f6:	4798      	blx	r3
    34f8:	f3bf 8f4f 	dsb	sy
    34fc:	bd10      	pop	{r4, pc}
    34fe:	bf00      	nop
    3500:	1fff0384 	.word	0x1fff0384
    3504:	1fff038c 	.word	0x1fff038c
    3508:	1fff0394 	.word	0x1fff0394

0000350c <FLEXIO0_DriverIRQHandler>:
    350c:	f7ff bfe4 	b.w	34d8 <FLEXIO_CommonIRQHandler>

00003510 <EDMA_GetChannelStatusFlags>:
    return remainingCount;
}

uint32_t EDMA_GetChannelStatusFlags(DMA_Type *base, uint32_t channel)
{
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    3510:	291f      	cmp	r1, #31
{
    3512:	b508      	push	{r3, lr}
    assert(channel < FSL_FEATURE_EDMA_MODULE_CHANNEL);
    3514:	d906      	bls.n	3524 <EDMA_GetChannelStatusFlags+0x14>
    3516:	4b0d      	ldr	r3, [pc, #52]	; (354c <EDMA_GetChannelStatusFlags+0x3c>)
    3518:	4a0d      	ldr	r2, [pc, #52]	; (3550 <EDMA_GetChannelStatusFlags+0x40>)
    351a:	480e      	ldr	r0, [pc, #56]	; (3554 <EDMA_GetChannelStatusFlags+0x44>)
    351c:	f240 11c1 	movw	r1, #449	; 0x1c1
    3520:	f7fd f8ca 	bl	6b8 <__assert_func>

    uint32_t retval = 0;

    /* Get DONE bit flag */
    retval |= ((base->TCD[channel].CSR & DMA_CSR_DONE_MASK) >> DMA_CSR_DONE_SHIFT);
    3524:	eb00 1241 	add.w	r2, r0, r1, lsl #5
    3528:	f241 031c 	movw	r3, #4124	; 0x101c
    352c:	5ad2      	ldrh	r2, [r2, r3]
    /* Get ERROR bit flag */
    retval |= (((base->ERR >> channel) & 0x1U) << 1U);
    352e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    /* Get INT bit flag */
    retval |= (((base->INT >> channel) & 0x1U) << 2U);
    3530:	6a40      	ldr	r0, [r0, #36]	; 0x24
    retval |= (((base->ERR >> channel) & 0x1U) << 1U);
    3532:	40cb      	lsrs	r3, r1
    retval |= (((base->INT >> channel) & 0x1U) << 2U);
    3534:	40c8      	lsrs	r0, r1
    retval |= (((base->ERR >> channel) & 0x1U) << 1U);
    3536:	005b      	lsls	r3, r3, #1
    retval |= (((base->INT >> channel) & 0x1U) << 2U);
    3538:	0080      	lsls	r0, r0, #2
    353a:	f000 0004 	and.w	r0, r0, #4
    retval |= (((base->ERR >> channel) & 0x1U) << 1U);
    353e:	f003 0302 	and.w	r3, r3, #2
    retval |= (((base->INT >> channel) & 0x1U) << 2U);
    3542:	4303      	orrs	r3, r0
    retval |= ((base->TCD[channel].CSR & DMA_CSR_DONE_MASK) >> DMA_CSR_DONE_SHIFT);
    3544:	f3c2 10c0 	ubfx	r0, r2, #7, #1

    return retval;
}
    3548:	4318      	orrs	r0, r3
    354a:	bd08      	pop	{r3, pc}
    354c:	000043cf 	.word	0x000043cf
    3550:	00004422 	.word	0x00004422
    3554:	000043b6 	.word	0x000043b6

00003558 <EDMA_HandleIRQ>:
        handle->tcdUsed = 0;
    }
}

void EDMA_HandleIRQ(edma_handle_t *handle)
{
    3558:	b570      	push	{r4, r5, r6, lr}
    assert(handle != NULL);
    355a:	4605      	mov	r5, r0
    355c:	b930      	cbnz	r0, 356c <EDMA_HandleIRQ+0x14>
    355e:	4b27      	ldr	r3, [pc, #156]	; (35fc <EDMA_HandleIRQ+0xa4>)
    3560:	4a27      	ldr	r2, [pc, #156]	; (3600 <EDMA_HandleIRQ+0xa8>)
    3562:	4828      	ldr	r0, [pc, #160]	; (3604 <EDMA_HandleIRQ+0xac>)
    3564:	f44f 7155 	mov.w	r1, #852	; 0x354
    3568:	f7fd f8a6 	bl	6b8 <__assert_func>

    /* Clear EDMA interrupt flag */
    handle->base->CINT = handle->channel;
    356c:	6882      	ldr	r2, [r0, #8]
    356e:	7c01      	ldrb	r1, [r0, #16]
    3570:	77d1      	strb	r1, [r2, #31]
    if ((handle->tcdPool == NULL) && (handle->callback != NULL))
    3572:	68c3      	ldr	r3, [r0, #12]
    3574:	6804      	ldr	r4, [r0, #0]
    3576:	b933      	cbnz	r3, 3586 <EDMA_HandleIRQ+0x2e>
    3578:	b12c      	cbz	r4, 3586 <EDMA_HandleIRQ+0x2e>
    {
        (handle->callback)(handle, handle->userData, true, 0);
    357a:	6841      	ldr	r1, [r0, #4]
    357c:	2201      	movs	r2, #1
        /* Release TCD blocks. tcdUsed is the TCD number which can be used/loaded in the memory pool. */
        handle->tcdUsed -= tcds_done;
        /* Invoke callback function. */
        if (handle->callback)
        {
            (handle->callback)(handle, handle->userData, transfer_done, tcds_done);
    357e:	46a4      	mov	ip, r4
        }
    }
}
    3580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (handle->callback)(handle, handle->userData, transfer_done, tcds_done);
    3584:	4760      	bx	ip
        uint32_t sga = handle->base->TCD[handle->channel].DLAST_SGA;
    3586:	eb02 1241 	add.w	r2, r2, r1, lsl #5
        transfer_done = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_DONE_MASK) != 0);
    358a:	f241 001c 	movw	r0, #4124	; 0x101c
        uint32_t sga = handle->base->TCD[handle->channel].DLAST_SGA;
    358e:	f241 0118 	movw	r1, #4120	; 0x1018
    3592:	5851      	ldr	r1, [r2, r1]
        transfer_done = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_DONE_MASK) != 0);
    3594:	5a12      	ldrh	r2, [r2, r0]
    3596:	f002 0280 	and.w	r2, r2, #128	; 0x80
    359a:	2a00      	cmp	r2, #0
        sga -= (uint32_t)handle->tcdPool;
    359c:	eba1 0103 	sub.w	r1, r1, r3
        transfer_done = ((handle->base->TCD[handle->channel].CSR & DMA_CSR_DONE_MASK) != 0);
    35a0:	bf14      	ite	ne
    35a2:	2201      	movne	r2, #1
    35a4:	2200      	moveq	r2, #0
        sga_index = sga / sizeof(edma_tcd_t);
    35a6:	ea4f 1151 	mov.w	r1, r1, lsr #5
        if (transfer_done)
    35aa:	d014      	beq.n	35d6 <EDMA_HandleIRQ+0x7e>
            new_header = sga_index ? sga_index - 1U : handle->tcdSize - 1U;
    35ac:	b2c9      	uxtb	r1, r1
        if (new_header == handle->header)
    35ae:	7c6b      	ldrb	r3, [r5, #17]
    35b0:	b25b      	sxtb	r3, r3
    35b2:	4299      	cmp	r1, r3
    35b4:	d117      	bne.n	35e6 <EDMA_HandleIRQ+0x8e>
            if (handle->tcdUsed == handle->tcdSize)
    35b6:	7ceb      	ldrb	r3, [r5, #19]
    35b8:	7d28      	ldrb	r0, [r5, #20]
    35ba:	4298      	cmp	r0, r3
    35bc:	d11b      	bne.n	35f6 <EDMA_HandleIRQ+0x9e>
                tcds_done = handle->tcdUsed;
    35be:	7ceb      	ldrb	r3, [r5, #19]
    35c0:	b25b      	sxtb	r3, r3
        handle->header = new_header;
    35c2:	b249      	sxtb	r1, r1
    35c4:	7469      	strb	r1, [r5, #17]
        handle->tcdUsed -= tcds_done;
    35c6:	7ce9      	ldrb	r1, [r5, #19]
    35c8:	1ac9      	subs	r1, r1, r3
    35ca:	b249      	sxtb	r1, r1
    35cc:	74e9      	strb	r1, [r5, #19]
        if (handle->callback)
    35ce:	b1a4      	cbz	r4, 35fa <EDMA_HandleIRQ+0xa2>
            (handle->callback)(handle, handle->userData, transfer_done, tcds_done);
    35d0:	6869      	ldr	r1, [r5, #4]
    35d2:	4628      	mov	r0, r5
    35d4:	e7d3      	b.n	357e <EDMA_HandleIRQ+0x26>
            new_header = sga_index ? sga_index - 1U : handle->tcdSize - 1U;
    35d6:	b109      	cbz	r1, 35dc <EDMA_HandleIRQ+0x84>
    35d8:	3901      	subs	r1, #1
    35da:	e7e7      	b.n	35ac <EDMA_HandleIRQ+0x54>
    35dc:	7d29      	ldrb	r1, [r5, #20]
    35de:	3901      	subs	r1, #1
    35e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    35e4:	e7e3      	b.n	35ae <EDMA_HandleIRQ+0x56>
            tcds_done = new_header - handle->header;
    35e6:	7c6b      	ldrb	r3, [r5, #17]
    35e8:	b25b      	sxtb	r3, r3
            if (tcds_done < 0)
    35ea:	1acb      	subs	r3, r1, r3
    35ec:	d5e9      	bpl.n	35c2 <EDMA_HandleIRQ+0x6a>
                tcds_done += handle->tcdSize;
    35ee:	7d28      	ldrb	r0, [r5, #20]
    35f0:	fa43 f380 	sxtab	r3, r3, r0
    35f4:	e7e5      	b.n	35c2 <EDMA_HandleIRQ+0x6a>
                tcds_done = 0;
    35f6:	2300      	movs	r3, #0
    35f8:	e7e3      	b.n	35c2 <EDMA_HandleIRQ+0x6a>
    35fa:	bd70      	pop	{r4, r5, r6, pc}
    35fc:	00004384 	.word	0x00004384
    3600:	0000443d 	.word	0x0000443d
    3604:	000043b6 	.word	0x000043b6

00003608 <DMA0_DMA16_DriverIRQHandler>:

/* 32 channels (Shared): k80 */
#if defined(FSL_FEATURE_EDMA_MODULE_CHANNEL) && FSL_FEATURE_EDMA_MODULE_CHANNEL == 32U

void DMA0_DMA16_DriverIRQHandler(void)
{
    3608:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 0U) & kEDMA_InterruptFlag) != 0U)
    360a:	2100      	movs	r1, #0
    360c:	480a      	ldr	r0, [pc, #40]	; (3638 <DMA0_DMA16_DriverIRQHandler+0x30>)
    360e:	f7ff ff7f 	bl	3510 <EDMA_GetChannelStatusFlags>
    3612:	0742      	lsls	r2, r0, #29
    3614:	d503      	bpl.n	361e <DMA0_DMA16_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[0]);
    3616:	4b09      	ldr	r3, [pc, #36]	; (363c <DMA0_DMA16_DriverIRQHandler+0x34>)
    3618:	6818      	ldr	r0, [r3, #0]
    361a:	f7ff ff9d 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 16U) & kEDMA_InterruptFlag) != 0U)
    361e:	2110      	movs	r1, #16
    3620:	4805      	ldr	r0, [pc, #20]	; (3638 <DMA0_DMA16_DriverIRQHandler+0x30>)
    3622:	f7ff ff75 	bl	3510 <EDMA_GetChannelStatusFlags>
    3626:	0743      	lsls	r3, r0, #29
    3628:	d503      	bpl.n	3632 <DMA0_DMA16_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[16]);
    362a:	4b04      	ldr	r3, [pc, #16]	; (363c <DMA0_DMA16_DriverIRQHandler+0x34>)
    362c:	6c18      	ldr	r0, [r3, #64]	; 0x40
    362e:	f7ff ff93 	bl	3558 <EDMA_HandleIRQ>
    3632:	f3bf 8f4f 	dsb	sy
    3636:	bd08      	pop	{r3, pc}
    3638:	40008000 	.word	0x40008000
    363c:	1fff039c 	.word	0x1fff039c

00003640 <DMA1_DMA17_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA1_DMA17_DriverIRQHandler(void)
{
    3640:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 1U) & kEDMA_InterruptFlag) != 0U)
    3642:	2101      	movs	r1, #1
    3644:	480a      	ldr	r0, [pc, #40]	; (3670 <DMA1_DMA17_DriverIRQHandler+0x30>)
    3646:	f7ff ff63 	bl	3510 <EDMA_GetChannelStatusFlags>
    364a:	0742      	lsls	r2, r0, #29
    364c:	d503      	bpl.n	3656 <DMA1_DMA17_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[1]);
    364e:	4b09      	ldr	r3, [pc, #36]	; (3674 <DMA1_DMA17_DriverIRQHandler+0x34>)
    3650:	6858      	ldr	r0, [r3, #4]
    3652:	f7ff ff81 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 17U) & kEDMA_InterruptFlag) != 0U)
    3656:	2111      	movs	r1, #17
    3658:	4805      	ldr	r0, [pc, #20]	; (3670 <DMA1_DMA17_DriverIRQHandler+0x30>)
    365a:	f7ff ff59 	bl	3510 <EDMA_GetChannelStatusFlags>
    365e:	0743      	lsls	r3, r0, #29
    3660:	d503      	bpl.n	366a <DMA1_DMA17_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[17]);
    3662:	4b04      	ldr	r3, [pc, #16]	; (3674 <DMA1_DMA17_DriverIRQHandler+0x34>)
    3664:	6c58      	ldr	r0, [r3, #68]	; 0x44
    3666:	f7ff ff77 	bl	3558 <EDMA_HandleIRQ>
    366a:	f3bf 8f4f 	dsb	sy
    366e:	bd08      	pop	{r3, pc}
    3670:	40008000 	.word	0x40008000
    3674:	1fff039c 	.word	0x1fff039c

00003678 <DMA2_DMA18_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA2_DMA18_DriverIRQHandler(void)
{
    3678:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 2U) & kEDMA_InterruptFlag) != 0U)
    367a:	2102      	movs	r1, #2
    367c:	480a      	ldr	r0, [pc, #40]	; (36a8 <DMA2_DMA18_DriverIRQHandler+0x30>)
    367e:	f7ff ff47 	bl	3510 <EDMA_GetChannelStatusFlags>
    3682:	0742      	lsls	r2, r0, #29
    3684:	d503      	bpl.n	368e <DMA2_DMA18_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[2]);
    3686:	4b09      	ldr	r3, [pc, #36]	; (36ac <DMA2_DMA18_DriverIRQHandler+0x34>)
    3688:	6898      	ldr	r0, [r3, #8]
    368a:	f7ff ff65 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 18U) & kEDMA_InterruptFlag) != 0U)
    368e:	2112      	movs	r1, #18
    3690:	4805      	ldr	r0, [pc, #20]	; (36a8 <DMA2_DMA18_DriverIRQHandler+0x30>)
    3692:	f7ff ff3d 	bl	3510 <EDMA_GetChannelStatusFlags>
    3696:	0743      	lsls	r3, r0, #29
    3698:	d503      	bpl.n	36a2 <DMA2_DMA18_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[18]);
    369a:	4b04      	ldr	r3, [pc, #16]	; (36ac <DMA2_DMA18_DriverIRQHandler+0x34>)
    369c:	6c98      	ldr	r0, [r3, #72]	; 0x48
    369e:	f7ff ff5b 	bl	3558 <EDMA_HandleIRQ>
    36a2:	f3bf 8f4f 	dsb	sy
    36a6:	bd08      	pop	{r3, pc}
    36a8:	40008000 	.word	0x40008000
    36ac:	1fff039c 	.word	0x1fff039c

000036b0 <DMA3_DMA19_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA3_DMA19_DriverIRQHandler(void)
{
    36b0:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 3U) & kEDMA_InterruptFlag) != 0U)
    36b2:	2103      	movs	r1, #3
    36b4:	480a      	ldr	r0, [pc, #40]	; (36e0 <DMA3_DMA19_DriverIRQHandler+0x30>)
    36b6:	f7ff ff2b 	bl	3510 <EDMA_GetChannelStatusFlags>
    36ba:	0742      	lsls	r2, r0, #29
    36bc:	d503      	bpl.n	36c6 <DMA3_DMA19_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[3]);
    36be:	4b09      	ldr	r3, [pc, #36]	; (36e4 <DMA3_DMA19_DriverIRQHandler+0x34>)
    36c0:	68d8      	ldr	r0, [r3, #12]
    36c2:	f7ff ff49 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 19U) & kEDMA_InterruptFlag) != 0U)
    36c6:	2113      	movs	r1, #19
    36c8:	4805      	ldr	r0, [pc, #20]	; (36e0 <DMA3_DMA19_DriverIRQHandler+0x30>)
    36ca:	f7ff ff21 	bl	3510 <EDMA_GetChannelStatusFlags>
    36ce:	0743      	lsls	r3, r0, #29
    36d0:	d503      	bpl.n	36da <DMA3_DMA19_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[19]);
    36d2:	4b04      	ldr	r3, [pc, #16]	; (36e4 <DMA3_DMA19_DriverIRQHandler+0x34>)
    36d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    36d6:	f7ff ff3f 	bl	3558 <EDMA_HandleIRQ>
    36da:	f3bf 8f4f 	dsb	sy
    36de:	bd08      	pop	{r3, pc}
    36e0:	40008000 	.word	0x40008000
    36e4:	1fff039c 	.word	0x1fff039c

000036e8 <DMA4_DMA20_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA4_DMA20_DriverIRQHandler(void)
{
    36e8:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 4U) & kEDMA_InterruptFlag) != 0U)
    36ea:	2104      	movs	r1, #4
    36ec:	480a      	ldr	r0, [pc, #40]	; (3718 <DMA4_DMA20_DriverIRQHandler+0x30>)
    36ee:	f7ff ff0f 	bl	3510 <EDMA_GetChannelStatusFlags>
    36f2:	0742      	lsls	r2, r0, #29
    36f4:	d503      	bpl.n	36fe <DMA4_DMA20_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[4]);
    36f6:	4b09      	ldr	r3, [pc, #36]	; (371c <DMA4_DMA20_DriverIRQHandler+0x34>)
    36f8:	6918      	ldr	r0, [r3, #16]
    36fa:	f7ff ff2d 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 20U) & kEDMA_InterruptFlag) != 0U)
    36fe:	2114      	movs	r1, #20
    3700:	4805      	ldr	r0, [pc, #20]	; (3718 <DMA4_DMA20_DriverIRQHandler+0x30>)
    3702:	f7ff ff05 	bl	3510 <EDMA_GetChannelStatusFlags>
    3706:	0743      	lsls	r3, r0, #29
    3708:	d503      	bpl.n	3712 <DMA4_DMA20_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[20]);
    370a:	4b04      	ldr	r3, [pc, #16]	; (371c <DMA4_DMA20_DriverIRQHandler+0x34>)
    370c:	6d18      	ldr	r0, [r3, #80]	; 0x50
    370e:	f7ff ff23 	bl	3558 <EDMA_HandleIRQ>
    3712:	f3bf 8f4f 	dsb	sy
    3716:	bd08      	pop	{r3, pc}
    3718:	40008000 	.word	0x40008000
    371c:	1fff039c 	.word	0x1fff039c

00003720 <DMA5_DMA21_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA5_DMA21_DriverIRQHandler(void)
{
    3720:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 5U) & kEDMA_InterruptFlag) != 0U)
    3722:	2105      	movs	r1, #5
    3724:	480a      	ldr	r0, [pc, #40]	; (3750 <DMA5_DMA21_DriverIRQHandler+0x30>)
    3726:	f7ff fef3 	bl	3510 <EDMA_GetChannelStatusFlags>
    372a:	0742      	lsls	r2, r0, #29
    372c:	d503      	bpl.n	3736 <DMA5_DMA21_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[5]);
    372e:	4b09      	ldr	r3, [pc, #36]	; (3754 <DMA5_DMA21_DriverIRQHandler+0x34>)
    3730:	6958      	ldr	r0, [r3, #20]
    3732:	f7ff ff11 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 21U) & kEDMA_InterruptFlag) != 0U)
    3736:	2115      	movs	r1, #21
    3738:	4805      	ldr	r0, [pc, #20]	; (3750 <DMA5_DMA21_DriverIRQHandler+0x30>)
    373a:	f7ff fee9 	bl	3510 <EDMA_GetChannelStatusFlags>
    373e:	0743      	lsls	r3, r0, #29
    3740:	d503      	bpl.n	374a <DMA5_DMA21_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[21]);
    3742:	4b04      	ldr	r3, [pc, #16]	; (3754 <DMA5_DMA21_DriverIRQHandler+0x34>)
    3744:	6d58      	ldr	r0, [r3, #84]	; 0x54
    3746:	f7ff ff07 	bl	3558 <EDMA_HandleIRQ>
    374a:	f3bf 8f4f 	dsb	sy
    374e:	bd08      	pop	{r3, pc}
    3750:	40008000 	.word	0x40008000
    3754:	1fff039c 	.word	0x1fff039c

00003758 <DMA6_DMA22_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA6_DMA22_DriverIRQHandler(void)
{
    3758:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 6U) & kEDMA_InterruptFlag) != 0U)
    375a:	2106      	movs	r1, #6
    375c:	480a      	ldr	r0, [pc, #40]	; (3788 <DMA6_DMA22_DriverIRQHandler+0x30>)
    375e:	f7ff fed7 	bl	3510 <EDMA_GetChannelStatusFlags>
    3762:	0742      	lsls	r2, r0, #29
    3764:	d503      	bpl.n	376e <DMA6_DMA22_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[6]);
    3766:	4b09      	ldr	r3, [pc, #36]	; (378c <DMA6_DMA22_DriverIRQHandler+0x34>)
    3768:	6998      	ldr	r0, [r3, #24]
    376a:	f7ff fef5 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 22U) & kEDMA_InterruptFlag) != 0U)
    376e:	2116      	movs	r1, #22
    3770:	4805      	ldr	r0, [pc, #20]	; (3788 <DMA6_DMA22_DriverIRQHandler+0x30>)
    3772:	f7ff fecd 	bl	3510 <EDMA_GetChannelStatusFlags>
    3776:	0743      	lsls	r3, r0, #29
    3778:	d503      	bpl.n	3782 <DMA6_DMA22_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[22]);
    377a:	4b04      	ldr	r3, [pc, #16]	; (378c <DMA6_DMA22_DriverIRQHandler+0x34>)
    377c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    377e:	f7ff feeb 	bl	3558 <EDMA_HandleIRQ>
    3782:	f3bf 8f4f 	dsb	sy
    3786:	bd08      	pop	{r3, pc}
    3788:	40008000 	.word	0x40008000
    378c:	1fff039c 	.word	0x1fff039c

00003790 <DMA7_DMA23_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA7_DMA23_DriverIRQHandler(void)
{
    3790:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 7U) & kEDMA_InterruptFlag) != 0U)
    3792:	2107      	movs	r1, #7
    3794:	480a      	ldr	r0, [pc, #40]	; (37c0 <DMA7_DMA23_DriverIRQHandler+0x30>)
    3796:	f7ff febb 	bl	3510 <EDMA_GetChannelStatusFlags>
    379a:	0742      	lsls	r2, r0, #29
    379c:	d503      	bpl.n	37a6 <DMA7_DMA23_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[7]);
    379e:	4b09      	ldr	r3, [pc, #36]	; (37c4 <DMA7_DMA23_DriverIRQHandler+0x34>)
    37a0:	69d8      	ldr	r0, [r3, #28]
    37a2:	f7ff fed9 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 23U) & kEDMA_InterruptFlag) != 0U)
    37a6:	2117      	movs	r1, #23
    37a8:	4805      	ldr	r0, [pc, #20]	; (37c0 <DMA7_DMA23_DriverIRQHandler+0x30>)
    37aa:	f7ff feb1 	bl	3510 <EDMA_GetChannelStatusFlags>
    37ae:	0743      	lsls	r3, r0, #29
    37b0:	d503      	bpl.n	37ba <DMA7_DMA23_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[23]);
    37b2:	4b04      	ldr	r3, [pc, #16]	; (37c4 <DMA7_DMA23_DriverIRQHandler+0x34>)
    37b4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    37b6:	f7ff fecf 	bl	3558 <EDMA_HandleIRQ>
    37ba:	f3bf 8f4f 	dsb	sy
    37be:	bd08      	pop	{r3, pc}
    37c0:	40008000 	.word	0x40008000
    37c4:	1fff039c 	.word	0x1fff039c

000037c8 <DMA8_DMA24_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA8_DMA24_DriverIRQHandler(void)
{
    37c8:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 8U) & kEDMA_InterruptFlag) != 0U)
    37ca:	2108      	movs	r1, #8
    37cc:	480a      	ldr	r0, [pc, #40]	; (37f8 <DMA8_DMA24_DriverIRQHandler+0x30>)
    37ce:	f7ff fe9f 	bl	3510 <EDMA_GetChannelStatusFlags>
    37d2:	0742      	lsls	r2, r0, #29
    37d4:	d503      	bpl.n	37de <DMA8_DMA24_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[8]);
    37d6:	4b09      	ldr	r3, [pc, #36]	; (37fc <DMA8_DMA24_DriverIRQHandler+0x34>)
    37d8:	6a18      	ldr	r0, [r3, #32]
    37da:	f7ff febd 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 24U) & kEDMA_InterruptFlag) != 0U)
    37de:	2118      	movs	r1, #24
    37e0:	4805      	ldr	r0, [pc, #20]	; (37f8 <DMA8_DMA24_DriverIRQHandler+0x30>)
    37e2:	f7ff fe95 	bl	3510 <EDMA_GetChannelStatusFlags>
    37e6:	0743      	lsls	r3, r0, #29
    37e8:	d503      	bpl.n	37f2 <DMA8_DMA24_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[24]);
    37ea:	4b04      	ldr	r3, [pc, #16]	; (37fc <DMA8_DMA24_DriverIRQHandler+0x34>)
    37ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
    37ee:	f7ff feb3 	bl	3558 <EDMA_HandleIRQ>
    37f2:	f3bf 8f4f 	dsb	sy
    37f6:	bd08      	pop	{r3, pc}
    37f8:	40008000 	.word	0x40008000
    37fc:	1fff039c 	.word	0x1fff039c

00003800 <DMA9_DMA25_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA9_DMA25_DriverIRQHandler(void)
{
    3800:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 9U) & kEDMA_InterruptFlag) != 0U)
    3802:	2109      	movs	r1, #9
    3804:	480a      	ldr	r0, [pc, #40]	; (3830 <DMA9_DMA25_DriverIRQHandler+0x30>)
    3806:	f7ff fe83 	bl	3510 <EDMA_GetChannelStatusFlags>
    380a:	0742      	lsls	r2, r0, #29
    380c:	d503      	bpl.n	3816 <DMA9_DMA25_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[9]);
    380e:	4b09      	ldr	r3, [pc, #36]	; (3834 <DMA9_DMA25_DriverIRQHandler+0x34>)
    3810:	6a58      	ldr	r0, [r3, #36]	; 0x24
    3812:	f7ff fea1 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 25U) & kEDMA_InterruptFlag) != 0U)
    3816:	2119      	movs	r1, #25
    3818:	4805      	ldr	r0, [pc, #20]	; (3830 <DMA9_DMA25_DriverIRQHandler+0x30>)
    381a:	f7ff fe79 	bl	3510 <EDMA_GetChannelStatusFlags>
    381e:	0743      	lsls	r3, r0, #29
    3820:	d503      	bpl.n	382a <DMA9_DMA25_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[25]);
    3822:	4b04      	ldr	r3, [pc, #16]	; (3834 <DMA9_DMA25_DriverIRQHandler+0x34>)
    3824:	6e58      	ldr	r0, [r3, #100]	; 0x64
    3826:	f7ff fe97 	bl	3558 <EDMA_HandleIRQ>
    382a:	f3bf 8f4f 	dsb	sy
    382e:	bd08      	pop	{r3, pc}
    3830:	40008000 	.word	0x40008000
    3834:	1fff039c 	.word	0x1fff039c

00003838 <DMA10_DMA26_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA10_DMA26_DriverIRQHandler(void)
{
    3838:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 10U) & kEDMA_InterruptFlag) != 0U)
    383a:	210a      	movs	r1, #10
    383c:	480a      	ldr	r0, [pc, #40]	; (3868 <DMA10_DMA26_DriverIRQHandler+0x30>)
    383e:	f7ff fe67 	bl	3510 <EDMA_GetChannelStatusFlags>
    3842:	0742      	lsls	r2, r0, #29
    3844:	d503      	bpl.n	384e <DMA10_DMA26_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[10]);
    3846:	4b09      	ldr	r3, [pc, #36]	; (386c <DMA10_DMA26_DriverIRQHandler+0x34>)
    3848:	6a98      	ldr	r0, [r3, #40]	; 0x28
    384a:	f7ff fe85 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 26U) & kEDMA_InterruptFlag) != 0U)
    384e:	211a      	movs	r1, #26
    3850:	4805      	ldr	r0, [pc, #20]	; (3868 <DMA10_DMA26_DriverIRQHandler+0x30>)
    3852:	f7ff fe5d 	bl	3510 <EDMA_GetChannelStatusFlags>
    3856:	0743      	lsls	r3, r0, #29
    3858:	d503      	bpl.n	3862 <DMA10_DMA26_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[26]);
    385a:	4b04      	ldr	r3, [pc, #16]	; (386c <DMA10_DMA26_DriverIRQHandler+0x34>)
    385c:	6e98      	ldr	r0, [r3, #104]	; 0x68
    385e:	f7ff fe7b 	bl	3558 <EDMA_HandleIRQ>
    3862:	f3bf 8f4f 	dsb	sy
    3866:	bd08      	pop	{r3, pc}
    3868:	40008000 	.word	0x40008000
    386c:	1fff039c 	.word	0x1fff039c

00003870 <DMA11_DMA27_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA11_DMA27_DriverIRQHandler(void)
{
    3870:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 11U) & kEDMA_InterruptFlag) != 0U)
    3872:	210b      	movs	r1, #11
    3874:	480a      	ldr	r0, [pc, #40]	; (38a0 <DMA11_DMA27_DriverIRQHandler+0x30>)
    3876:	f7ff fe4b 	bl	3510 <EDMA_GetChannelStatusFlags>
    387a:	0742      	lsls	r2, r0, #29
    387c:	d503      	bpl.n	3886 <DMA11_DMA27_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[11]);
    387e:	4b09      	ldr	r3, [pc, #36]	; (38a4 <DMA11_DMA27_DriverIRQHandler+0x34>)
    3880:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    3882:	f7ff fe69 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 27U) & kEDMA_InterruptFlag) != 0U)
    3886:	211b      	movs	r1, #27
    3888:	4805      	ldr	r0, [pc, #20]	; (38a0 <DMA11_DMA27_DriverIRQHandler+0x30>)
    388a:	f7ff fe41 	bl	3510 <EDMA_GetChannelStatusFlags>
    388e:	0743      	lsls	r3, r0, #29
    3890:	d503      	bpl.n	389a <DMA11_DMA27_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[27]);
    3892:	4b04      	ldr	r3, [pc, #16]	; (38a4 <DMA11_DMA27_DriverIRQHandler+0x34>)
    3894:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    3896:	f7ff fe5f 	bl	3558 <EDMA_HandleIRQ>
    389a:	f3bf 8f4f 	dsb	sy
    389e:	bd08      	pop	{r3, pc}
    38a0:	40008000 	.word	0x40008000
    38a4:	1fff039c 	.word	0x1fff039c

000038a8 <DMA12_DMA28_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA12_DMA28_DriverIRQHandler(void)
{
    38a8:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 12U) & kEDMA_InterruptFlag) != 0U)
    38aa:	210c      	movs	r1, #12
    38ac:	480a      	ldr	r0, [pc, #40]	; (38d8 <DMA12_DMA28_DriverIRQHandler+0x30>)
    38ae:	f7ff fe2f 	bl	3510 <EDMA_GetChannelStatusFlags>
    38b2:	0742      	lsls	r2, r0, #29
    38b4:	d503      	bpl.n	38be <DMA12_DMA28_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[12]);
    38b6:	4b09      	ldr	r3, [pc, #36]	; (38dc <DMA12_DMA28_DriverIRQHandler+0x34>)
    38b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
    38ba:	f7ff fe4d 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 28U) & kEDMA_InterruptFlag) != 0U)
    38be:	211c      	movs	r1, #28
    38c0:	4805      	ldr	r0, [pc, #20]	; (38d8 <DMA12_DMA28_DriverIRQHandler+0x30>)
    38c2:	f7ff fe25 	bl	3510 <EDMA_GetChannelStatusFlags>
    38c6:	0743      	lsls	r3, r0, #29
    38c8:	d503      	bpl.n	38d2 <DMA12_DMA28_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[28]);
    38ca:	4b04      	ldr	r3, [pc, #16]	; (38dc <DMA12_DMA28_DriverIRQHandler+0x34>)
    38cc:	6f18      	ldr	r0, [r3, #112]	; 0x70
    38ce:	f7ff fe43 	bl	3558 <EDMA_HandleIRQ>
    38d2:	f3bf 8f4f 	dsb	sy
    38d6:	bd08      	pop	{r3, pc}
    38d8:	40008000 	.word	0x40008000
    38dc:	1fff039c 	.word	0x1fff039c

000038e0 <DMA13_DMA29_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA13_DMA29_DriverIRQHandler(void)
{
    38e0:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 13U) & kEDMA_InterruptFlag) != 0U)
    38e2:	210d      	movs	r1, #13
    38e4:	480a      	ldr	r0, [pc, #40]	; (3910 <DMA13_DMA29_DriverIRQHandler+0x30>)
    38e6:	f7ff fe13 	bl	3510 <EDMA_GetChannelStatusFlags>
    38ea:	0742      	lsls	r2, r0, #29
    38ec:	d503      	bpl.n	38f6 <DMA13_DMA29_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[13]);
    38ee:	4b09      	ldr	r3, [pc, #36]	; (3914 <DMA13_DMA29_DriverIRQHandler+0x34>)
    38f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    38f2:	f7ff fe31 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 29U) & kEDMA_InterruptFlag) != 0U)
    38f6:	211d      	movs	r1, #29
    38f8:	4805      	ldr	r0, [pc, #20]	; (3910 <DMA13_DMA29_DriverIRQHandler+0x30>)
    38fa:	f7ff fe09 	bl	3510 <EDMA_GetChannelStatusFlags>
    38fe:	0743      	lsls	r3, r0, #29
    3900:	d503      	bpl.n	390a <DMA13_DMA29_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[29]);
    3902:	4b04      	ldr	r3, [pc, #16]	; (3914 <DMA13_DMA29_DriverIRQHandler+0x34>)
    3904:	6f58      	ldr	r0, [r3, #116]	; 0x74
    3906:	f7ff fe27 	bl	3558 <EDMA_HandleIRQ>
    390a:	f3bf 8f4f 	dsb	sy
    390e:	bd08      	pop	{r3, pc}
    3910:	40008000 	.word	0x40008000
    3914:	1fff039c 	.word	0x1fff039c

00003918 <DMA14_DMA30_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA14_DMA30_DriverIRQHandler(void)
{
    3918:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 14U) & kEDMA_InterruptFlag) != 0U)
    391a:	210e      	movs	r1, #14
    391c:	480a      	ldr	r0, [pc, #40]	; (3948 <DMA14_DMA30_DriverIRQHandler+0x30>)
    391e:	f7ff fdf7 	bl	3510 <EDMA_GetChannelStatusFlags>
    3922:	0742      	lsls	r2, r0, #29
    3924:	d503      	bpl.n	392e <DMA14_DMA30_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[14]);
    3926:	4b09      	ldr	r3, [pc, #36]	; (394c <DMA14_DMA30_DriverIRQHandler+0x34>)
    3928:	6b98      	ldr	r0, [r3, #56]	; 0x38
    392a:	f7ff fe15 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 30U) & kEDMA_InterruptFlag) != 0U)
    392e:	211e      	movs	r1, #30
    3930:	4805      	ldr	r0, [pc, #20]	; (3948 <DMA14_DMA30_DriverIRQHandler+0x30>)
    3932:	f7ff fded 	bl	3510 <EDMA_GetChannelStatusFlags>
    3936:	0743      	lsls	r3, r0, #29
    3938:	d503      	bpl.n	3942 <DMA14_DMA30_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[30]);
    393a:	4b04      	ldr	r3, [pc, #16]	; (394c <DMA14_DMA30_DriverIRQHandler+0x34>)
    393c:	6f98      	ldr	r0, [r3, #120]	; 0x78
    393e:	f7ff fe0b 	bl	3558 <EDMA_HandleIRQ>
    3942:	f3bf 8f4f 	dsb	sy
    3946:	bd08      	pop	{r3, pc}
    3948:	40008000 	.word	0x40008000
    394c:	1fff039c 	.word	0x1fff039c

00003950 <DMA15_DMA31_DriverIRQHandler>:
    __DSB();
#endif
}

void DMA15_DMA31_DriverIRQHandler(void)
{
    3950:	b508      	push	{r3, lr}
    if ((EDMA_GetChannelStatusFlags(DMA0, 15U) & kEDMA_InterruptFlag) != 0U)
    3952:	210f      	movs	r1, #15
    3954:	480a      	ldr	r0, [pc, #40]	; (3980 <DMA15_DMA31_DriverIRQHandler+0x30>)
    3956:	f7ff fddb 	bl	3510 <EDMA_GetChannelStatusFlags>
    395a:	0742      	lsls	r2, r0, #29
    395c:	d503      	bpl.n	3966 <DMA15_DMA31_DriverIRQHandler+0x16>
    {
        EDMA_HandleIRQ(s_EDMAHandle[15]);
    395e:	4b09      	ldr	r3, [pc, #36]	; (3984 <DMA15_DMA31_DriverIRQHandler+0x34>)
    3960:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    3962:	f7ff fdf9 	bl	3558 <EDMA_HandleIRQ>
    }
    if ((EDMA_GetChannelStatusFlags(DMA0, 31U) & kEDMA_InterruptFlag) != 0U)
    3966:	211f      	movs	r1, #31
    3968:	4805      	ldr	r0, [pc, #20]	; (3980 <DMA15_DMA31_DriverIRQHandler+0x30>)
    396a:	f7ff fdd1 	bl	3510 <EDMA_GetChannelStatusFlags>
    396e:	0743      	lsls	r3, r0, #29
    3970:	d503      	bpl.n	397a <DMA15_DMA31_DriverIRQHandler+0x2a>
    {
        EDMA_HandleIRQ(s_EDMAHandle[31]);
    3972:	4b04      	ldr	r3, [pc, #16]	; (3984 <DMA15_DMA31_DriverIRQHandler+0x34>)
    3974:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3976:	f7ff fdef 	bl	3558 <EDMA_HandleIRQ>
    397a:	f3bf 8f4f 	dsb	sy
    397e:	bd08      	pop	{r3, pc}
    3980:	40008000 	.word	0x40008000
    3984:	1fff039c 	.word	0x1fff039c

00003988 <LPUART_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t LPUART_GetInstance(LPUART_Type *base)
{
    3988:	b508      	push	{r3, lr}
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_lpuartBases); instance++)
    {
        if (s_lpuartBases[instance] == base)
    398a:	4b11      	ldr	r3, [pc, #68]	; (39d0 <LPUART_GetInstance+0x48>)
    398c:	4298      	cmp	r0, r3
    398e:	d015      	beq.n	39bc <LPUART_GetInstance+0x34>
    3990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    3994:	4298      	cmp	r0, r3
    3996:	d013      	beq.n	39c0 <LPUART_GetInstance+0x38>
    3998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    399c:	4298      	cmp	r0, r3
    399e:	d011      	beq.n	39c4 <LPUART_GetInstance+0x3c>
    39a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    39a4:	4298      	cmp	r0, r3
    39a6:	d00f      	beq.n	39c8 <LPUART_GetInstance+0x40>
    39a8:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
    39ac:	4298      	cmp	r0, r3
    39ae:	d00d      	beq.n	39cc <LPUART_GetInstance+0x44>
        {
            break;
        }
    }

    assert(instance < ARRAY_SIZE(s_lpuartBases));
    39b0:	4b08      	ldr	r3, [pc, #32]	; (39d4 <LPUART_GetInstance+0x4c>)
    39b2:	4a09      	ldr	r2, [pc, #36]	; (39d8 <LPUART_GetInstance+0x50>)
    39b4:	4809      	ldr	r0, [pc, #36]	; (39dc <LPUART_GetInstance+0x54>)
    39b6:	218e      	movs	r1, #142	; 0x8e
    39b8:	f7fc fe7e 	bl	6b8 <__assert_func>
    for (instance = 0; instance < ARRAY_SIZE(s_lpuartBases); instance++)
    39bc:	2000      	movs	r0, #0
    39be:	bd08      	pop	{r3, pc}
    39c0:	2001      	movs	r0, #1
    39c2:	bd08      	pop	{r3, pc}
    39c4:	2002      	movs	r0, #2
    39c6:	bd08      	pop	{r3, pc}
    39c8:	2003      	movs	r0, #3
    39ca:	bd08      	pop	{r3, pc}
    39cc:	2004      	movs	r0, #4

    return instance;
}
    39ce:	bd08      	pop	{r3, pc}
    39d0:	400c4000 	.word	0x400c4000
    39d4:	0000444c 	.word	0x0000444c
    39d8:	0000451f 	.word	0x0000451f
    39dc:	00004504 	.word	0x00004504

000039e0 <LPUART_Init>:
#endif
    }
}

status_t LPUART_Init(LPUART_Type *base, const lpuart_config_t *config, uint32_t srcClock_Hz)
{
    39e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39e4:	4604      	mov	r4, r0
    assert(config);
    39e6:	460d      	mov	r5, r1
    39e8:	b929      	cbnz	r1, 39f6 <LPUART_Init+0x16>
    39ea:	4b78      	ldr	r3, [pc, #480]	; (3bcc <LPUART_Init+0x1ec>)
    39ec:	4a78      	ldr	r2, [pc, #480]	; (3bd0 <LPUART_Init+0x1f0>)
    39ee:	21e4      	movs	r1, #228	; 0xe4
    assert(config->baudRate_Bps);
    39f0:	4878      	ldr	r0, [pc, #480]	; (3bd4 <LPUART_Init+0x1f4>)
    39f2:	f7fc fe61 	bl	6b8 <__assert_func>
    39f6:	680b      	ldr	r3, [r1, #0]
    39f8:	b91b      	cbnz	r3, 3a02 <LPUART_Init+0x22>
    39fa:	4b77      	ldr	r3, [pc, #476]	; (3bd8 <LPUART_Init+0x1f8>)
    39fc:	4a74      	ldr	r2, [pc, #464]	; (3bd0 <LPUART_Init+0x1f0>)
    39fe:	21e5      	movs	r1, #229	; 0xe5
    3a00:	e7f6      	b.n	39f0 <LPUART_Init+0x10>
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    assert(FSL_FEATURE_LPUART_FIFO_SIZEn(base) >= config->txFifoWatermark);
    3a02:	4976      	ldr	r1, [pc, #472]	; (3bdc <LPUART_Init+0x1fc>)
    3a04:	4288      	cmp	r0, r1
    3a06:	d019      	beq.n	3a3c <LPUART_Init+0x5c>
    3a08:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    3a0c:	4288      	cmp	r0, r1
    3a0e:	d015      	beq.n	3a3c <LPUART_Init+0x5c>
    3a10:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    3a14:	4288      	cmp	r0, r1
    3a16:	d013      	beq.n	3a40 <LPUART_Init+0x60>
    3a18:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    3a1c:	4288      	cmp	r0, r1
    3a1e:	d00f      	beq.n	3a40 <LPUART_Init+0x60>
    3a20:	f501 4170 	add.w	r1, r1, #61440	; 0xf000
    3a24:	4288      	cmp	r0, r1
    3a26:	bf14      	ite	ne
    3a28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    3a2c:	2101      	moveq	r1, #1
    3a2e:	7a28      	ldrb	r0, [r5, #8]
    3a30:	4281      	cmp	r1, r0
    3a32:	da07      	bge.n	3a44 <LPUART_Init+0x64>
    3a34:	4b6a      	ldr	r3, [pc, #424]	; (3be0 <LPUART_Init+0x200>)
    3a36:	4a66      	ldr	r2, [pc, #408]	; (3bd0 <LPUART_Init+0x1f0>)
    3a38:	21e7      	movs	r1, #231	; 0xe7
    3a3a:	e7d9      	b.n	39f0 <LPUART_Init+0x10>
    3a3c:	2108      	movs	r1, #8
    3a3e:	e7f6      	b.n	3a2e <LPUART_Init+0x4e>
    3a40:	2101      	movs	r1, #1
    3a42:	e7f4      	b.n	3a2e <LPUART_Init+0x4e>
    assert(FSL_FEATURE_LPUART_FIFO_SIZEn(base) >= config->rxFifoWatermark);
    3a44:	7a68      	ldrb	r0, [r5, #9]
    3a46:	4281      	cmp	r1, r0
    3a48:	da03      	bge.n	3a52 <LPUART_Init+0x72>
    3a4a:	4b66      	ldr	r3, [pc, #408]	; (3be4 <LPUART_Init+0x204>)
    3a4c:	4a60      	ldr	r2, [pc, #384]	; (3bd0 <LPUART_Init+0x1f0>)
    3a4e:	21e8      	movs	r1, #232	; 0xe8
    3a50:	e7ce      	b.n	39f0 <LPUART_Init+0x10>
    3a52:	2600      	movs	r6, #0
    3a54:	ea4f 0983 	mov.w	r9, r3, lsl #2
    3a58:	4698      	mov	r8, r3
    3a5a:	f04f 0e04 	mov.w	lr, #4
    3a5e:	4637      	mov	r7, r6
    osr = 0;
    sbr = 0;
    for (osrTemp = 4; osrTemp <= 32; osrTemp++)
    {
        /* calculate the temporary sbr value   */
        sbrTemp = (srcClock_Hz / (config->baudRate_Bps * osrTemp));
    3a60:	fbb2 f1f9 	udiv	r1, r2, r9
    3a64:	b289      	uxth	r1, r1
        /*set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate*/
        if (sbrTemp == 0)
        {
            sbrTemp = 1;
    3a66:	2900      	cmp	r1, #0
    3a68:	bf08      	it	eq
    3a6a:	2101      	moveq	r1, #1
        calculatedBaud = (srcClock_Hz / (osrTemp * sbrTemp));

        tempDiff = calculatedBaud - config->baudRate_Bps;

        /* Select the better value between srb and (sbr + 1) */
        if (tempDiff > (config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    3a6c:	f101 0a01 	add.w	sl, r1, #1
        calculatedBaud = (srcClock_Hz / (osrTemp * sbrTemp));
    3a70:	fb0e f001 	mul.w	r0, lr, r1
        if (tempDiff > (config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    3a74:	fb0e fc0a 	mul.w	ip, lr, sl
        calculatedBaud = (srcClock_Hz / (osrTemp * sbrTemp));
    3a78:	fbb2 f0f0 	udiv	r0, r2, r0
        if (tempDiff > (config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    3a7c:	fbb2 fcfc 	udiv	ip, r2, ip
        tempDiff = calculatedBaud - config->baudRate_Bps;
    3a80:	1ac0      	subs	r0, r0, r3
        if (tempDiff > (config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)))))
    3a82:	eba3 0c0c 	sub.w	ip, r3, ip
    3a86:	4560      	cmp	r0, ip
        {
            tempDiff = config->baudRate_Bps - (srcClock_Hz / (osrTemp * (sbrTemp + 1)));
            sbrTemp++;
    3a88:	bf84      	itt	hi
    3a8a:	4660      	movhi	r0, ip
    3a8c:	fa1f f18a 	uxthhi.w	r1, sl
        }

        if (tempDiff <= baudDiff)
    3a90:	4540      	cmp	r0, r8
    3a92:	bf98      	it	ls
    3a94:	4676      	movls	r6, lr
    for (osrTemp = 4; osrTemp <= 32; osrTemp++)
    3a96:	f10e 0e01 	add.w	lr, lr, #1
        if (tempDiff <= baudDiff)
    3a9a:	bf9c      	itt	ls
    3a9c:	4680      	movls	r8, r0
        {
            baudDiff = tempDiff;
            osr = osrTemp; /* update and store the best OSR value calculated */
            sbr = sbrTemp; /* update store the best SBR value calculated */
    3a9e:	460f      	movls	r7, r1
    for (osrTemp = 4; osrTemp <= 32; osrTemp++)
    3aa0:	f1be 0f21 	cmp.w	lr, #33	; 0x21
    3aa4:	4499      	add	r9, r3
    3aa6:	d1db      	bne.n	3a60 <LPUART_Init+0x80>
        }
    }

    /* Check to see if actual baud rate is within 3% of desired baud rate
     * based on the best calculate OSR value */
    if (baudDiff > ((config->baudRate_Bps / 100) * 3))
    3aa8:	2264      	movs	r2, #100	; 0x64
    3aaa:	fbb3 f3f2 	udiv	r3, r3, r2
    3aae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ab2:	4598      	cmp	r8, r3
    3ab4:	f200 8085 	bhi.w	3bc2 <LPUART_Init+0x1e2>
        return kStatus_LPUART_BaudrateNotSupport;
    }

#if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)

    uint32_t instance = LPUART_GetInstance(base);
    3ab8:	4620      	mov	r0, r4
    3aba:	f7ff ff65 	bl	3988 <LPUART_GetInstance>

    /* Enable lpuart clock */
    CLOCK_EnableClock(s_lpuartClock[instance]);
    3abe:	4b4a      	ldr	r3, [pc, #296]	; (3be8 <LPUART_Init+0x208>)
    3ac0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
    3ac4:	0c0b      	lsrs	r3, r1, #16
    3ac6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3aca:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
    (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
    3ace:	b289      	uxth	r1, r1
    3ad0:	6818      	ldr	r0, [r3, #0]
    3ad2:	2201      	movs	r2, #1
    3ad4:	408a      	lsls	r2, r1
    3ad6:	4302      	orrs	r2, r0
    3ad8:	601a      	str	r2, [r3, #0]
#if defined(FSL_FEATURE_LPUART_HAS_GLOBAL) && FSL_FEATURE_LPUART_HAS_GLOBAL
    /*Reset all internal logic and registers, except the Global Register */
    LPUART_SoftwareReset(base);
#else
    /* Disable LPUART TX RX before setting. */
    base->CTRL &= ~(LPUART_CTRL_TE_MASK | LPUART_CTRL_RE_MASK);
    3ada:	68a3      	ldr	r3, [r4, #8]
    temp = base->CTRL &
           ~(LPUART_CTRL_PE_MASK | LPUART_CTRL_PT_MASK | LPUART_CTRL_M_MASK | LPUART_CTRL_ILT_MASK |
             LPUART_CTRL_IDLECFG_MASK);

    temp |=
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    3adc:	7929      	ldrb	r1, [r5, #4]
    base->CTRL &= ~(LPUART_CTRL_TE_MASK | LPUART_CTRL_RE_MASK);
    3ade:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    3ae2:	60a3      	str	r3, [r4, #8]
    temp = base->BAUD;
    3ae4:	6823      	ldr	r3, [r4, #0]
    if ((osr > 3) && (osr < 8))
    3ae6:	1f32      	subs	r2, r6, #4
    3ae8:	2a03      	cmp	r2, #3
        temp |= LPUART_BAUD_BOTHEDGE_MASK;
    3aea:	bf98      	it	ls
    3aec:	f443 3300 	orrls.w	r3, r3, #131072	; 0x20000
    temp |= LPUART_BAUD_OSR(osr - 1);
    3af0:	3e01      	subs	r6, #1
    3af2:	0636      	lsls	r6, r6, #24
    3af4:	f023 231f 	bic.w	r3, r3, #520101632	; 0x1f001f00
    3af8:	f006 56f8 	and.w	r6, r6, #520093696	; 0x1f000000
    3afc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    temp &= ~LPUART_BAUD_SBR_MASK;
    3b00:	4333      	orrs	r3, r6
    base->BAUD = temp | LPUART_BAUD_SBR(sbr);
    3b02:	f3c7 070c 	ubfx	r7, r7, #0, #13
    3b06:	433b      	orrs	r3, r7
    3b08:	6023      	str	r3, [r4, #0]
    base->BAUD &= ~LPUART_BAUD_M10_MASK;
    3b0a:	6823      	ldr	r3, [r4, #0]
    3b0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3b10:	6023      	str	r3, [r4, #0]
    temp = base->CTRL &
    3b12:	68a2      	ldr	r2, [r4, #8]
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    3b14:	7beb      	ldrb	r3, [r5, #15]
    temp = base->CTRL &
    3b16:	f422 62e2 	bic.w	r2, r2, #1808	; 0x710
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    3b1a:	021b      	lsls	r3, r3, #8
    temp = base->CTRL &
    3b1c:	f022 0207 	bic.w	r2, r2, #7
        (uint8_t)config->parityMode | LPUART_CTRL_IDLECFG(config->rxIdleConfig) | LPUART_CTRL_ILT(config->rxIdleType);
    3b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3b24:	430a      	orrs	r2, r1
    3b26:	431a      	orrs	r2, r3
    3b28:	7bab      	ldrb	r3, [r5, #14]
    3b2a:	009b      	lsls	r3, r3, #2
    3b2c:	f003 0304 	and.w	r3, r3, #4
    temp |=
    3b30:	4313      	orrs	r3, r2
        }
    }
    else
#endif
    {
        if (kLPUART_ParityDisabled != config->parityMode)
    3b32:	b109      	cbz	r1, 3b38 <LPUART_Init+0x158>
        {
            temp |= LPUART_CTRL_M_MASK; /* Eight data bits and one parity bit */
    3b34:	f043 0310 	orr.w	r3, r3, #16
        }
    }

    base->CTRL = temp;
    3b38:	60a3      	str	r3, [r4, #8]

#if defined(FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT
    /* set stop bit per char */
    temp = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
    base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
    3b3a:	79eb      	ldrb	r3, [r5, #7]
    temp = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
    3b3c:	6822      	ldr	r2, [r4, #0]
    base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
    3b3e:	035b      	lsls	r3, r3, #13
    temp = base->BAUD & ~LPUART_BAUD_SBNS_MASK;
    3b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    base->BAUD = temp | LPUART_BAUD_SBNS((uint8_t)config->stopBitCount);
    3b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    3b48:	4313      	orrs	r3, r2
    3b4a:	6023      	str	r3, [r4, #0]
       mark larger than 1.
       For example, if RX FIFO water mark is 2, upper layer needs 5 bytes and
       5 bytes are received. the last byte will be saved in FIFO but not trigger
       RX interrupt because the water mark is 2.
     */
    base->WATER = (((uint32_t)(config->rxFifoWatermark) << 16) | config->txFifoWatermark);
    3b4c:	7a6a      	ldrb	r2, [r5, #9]
    3b4e:	7a2b      	ldrb	r3, [r5, #8]
    3b50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3b54:	61e3      	str	r3, [r4, #28]

    /* Enable tx/rx FIFO */
    base->FIFO |= (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXFE_MASK);
    3b56:	69a3      	ldr	r3, [r4, #24]
    temp |= (LPUART_STAT_MA1F_MASK | LPUART_STAT_MA2F_MASK);
#endif

#if defined(FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT) && FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT
    /* Set the CTS configuration/TX CTS source. */
    base->MODIR |= LPUART_MODIR_TXCTSC(config->txCtsConfig) | LPUART_MODIR_TXCTSSRC(config->txCtsSource);
    3b58:	7b2a      	ldrb	r2, [r5, #12]
    base->FIFO |= (LPUART_FIFO_TXFE_MASK | LPUART_FIFO_RXFE_MASK);
    3b5a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    3b5e:	61a3      	str	r3, [r4, #24]
    base->FIFO |= (LPUART_FIFO_TXFLUSH_MASK | LPUART_FIFO_RXFLUSH_MASK);
    3b60:	69a3      	ldr	r3, [r4, #24]
    3b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    3b66:	61a3      	str	r3, [r4, #24]
    base->MODIR |= LPUART_MODIR_TXCTSC(config->txCtsConfig) | LPUART_MODIR_TXCTSSRC(config->txCtsSource);
    3b68:	7b6b      	ldrb	r3, [r5, #13]
    3b6a:	6961      	ldr	r1, [r4, #20]
    3b6c:	011b      	lsls	r3, r3, #4
    3b6e:	0152      	lsls	r2, r2, #5
    3b70:	f003 0310 	and.w	r3, r3, #16
    3b74:	f002 0220 	and.w	r2, r2, #32
    3b78:	4313      	orrs	r3, r2
    3b7a:	430b      	orrs	r3, r1
    3b7c:	6163      	str	r3, [r4, #20]
    if (config->enableRxRTS)
    3b7e:	7aab      	ldrb	r3, [r5, #10]
    3b80:	b11b      	cbz	r3, 3b8a <LPUART_Init+0x1aa>
    {
        /* Enable the receiver RTS(request-to-send) function. */
        base->MODIR |= LPUART_MODIR_RXRTSE_MASK;
    3b82:	6963      	ldr	r3, [r4, #20]
    3b84:	f043 0308 	orr.w	r3, r3, #8
    3b88:	6163      	str	r3, [r4, #20]
    }
    if (config->enableTxCTS)
    3b8a:	7aeb      	ldrb	r3, [r5, #11]
    3b8c:	b11b      	cbz	r3, 3b96 <LPUART_Init+0x1b6>
    {
        /* Enable the CTS(clear-to-send) function. */
        base->MODIR |= LPUART_MODIR_TXCTSE_MASK;
    3b8e:	6963      	ldr	r3, [r4, #20]
    3b90:	f043 0301 	orr.w	r3, r3, #1
    3b94:	6163      	str	r3, [r4, #20]
    }
#endif

    /* Set data bits order. */
    if (config->isMsb)
    3b96:	79a9      	ldrb	r1, [r5, #6]
    {
        temp |= LPUART_STAT_MSBF_MASK;
    }
    else
    {
        temp &= ~LPUART_STAT_MSBF_MASK;
    3b98:	4a14      	ldr	r2, [pc, #80]	; (3bec <LPUART_Init+0x20c>)
    3b9a:	4b15      	ldr	r3, [pc, #84]	; (3bf0 <LPUART_Init+0x210>)
    3b9c:	2900      	cmp	r1, #0
    3b9e:	bf08      	it	eq
    3ba0:	4613      	moveq	r3, r2
    }

    base->STAT |= temp;
    3ba2:	6862      	ldr	r2, [r4, #4]
    3ba4:	4313      	orrs	r3, r2

    /* Enable TX/RX base on configure structure. */
    temp = base->CTRL;
    if (config->enableTx)
    3ba6:	7c2a      	ldrb	r2, [r5, #16]
    base->STAT |= temp;
    3ba8:	6063      	str	r3, [r4, #4]
    temp = base->CTRL;
    3baa:	68a3      	ldr	r3, [r4, #8]
    if (config->enableTx)
    3bac:	b10a      	cbz	r2, 3bb2 <LPUART_Init+0x1d2>
    {
        temp |= LPUART_CTRL_TE_MASK;
    3bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    }

    if (config->enableRx)
    3bb2:	7c6a      	ldrb	r2, [r5, #17]
    3bb4:	b10a      	cbz	r2, 3bba <LPUART_Init+0x1da>
    {
        temp |= LPUART_CTRL_RE_MASK;
    3bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    }

    base->CTRL = temp;
    3bba:	60a3      	str	r3, [r4, #8]

    return kStatus_Success;
    3bbc:	2000      	movs	r0, #0
    3bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return kStatus_LPUART_BaudrateNotSupport;
    3bc2:	f240 5021 	movw	r0, #1313	; 0x521
}
    3bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bca:	bf00      	nop
    3bcc:	00004171 	.word	0x00004171
    3bd0:	00004532 	.word	0x00004532
    3bd4:	00004504 	.word	0x00004504
    3bd8:	00004471 	.word	0x00004471
    3bdc:	400c4000 	.word	0x400c4000
    3be0:	00004486 	.word	0x00004486
    3be4:	000044c5 	.word	0x000044c5
    3be8:	00004580 	.word	0x00004580
    3bec:	c01fc000 	.word	0xc01fc000
    3bf0:	e01fc000 	.word	0xe01fc000

00003bf4 <LPUART_GetDefaultConfig>:

#endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
}

void LPUART_GetDefaultConfig(lpuart_config_t *config)
{
    3bf4:	b508      	push	{r3, lr}
    assert(config);
    3bf6:	b930      	cbnz	r0, 3c06 <LPUART_GetDefaultConfig+0x12>
    3bf8:	4b0c      	ldr	r3, [pc, #48]	; (3c2c <LPUART_GetDefaultConfig+0x38>)
    3bfa:	4a0d      	ldr	r2, [pc, #52]	; (3c30 <LPUART_GetDefaultConfig+0x3c>)
    3bfc:	480d      	ldr	r0, [pc, #52]	; (3c34 <LPUART_GetDefaultConfig+0x40>)
    3bfe:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
    3c02:	f7fc fd59 	bl	6b8 <__assert_func>

    config->baudRate_Bps = 115200U;
    3c06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    3c0a:	6003      	str	r3, [r0, #0]
    config->parityMode = kLPUART_ParityDisabled;
    3c0c:	2300      	movs	r3, #0
    config->isMsb = false;
#if defined(FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT) && FSL_FEATURE_LPUART_HAS_STOP_BIT_CONFIG_SUPPORT
    config->stopBitCount = kLPUART_OneStopBit;
#endif
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    config->txFifoWatermark = 0;
    3c0e:	7203      	strb	r3, [r0, #8]
    config->rxFifoWatermark = 0;
    3c10:	7243      	strb	r3, [r0, #9]
    config->parityMode = kLPUART_ParityDisabled;
    3c12:	7103      	strb	r3, [r0, #4]
    config->dataBitsCount = kLPUART_EightDataBits;
    3c14:	7143      	strb	r3, [r0, #5]
    config->isMsb = false;
    3c16:	7183      	strb	r3, [r0, #6]
    config->stopBitCount = kLPUART_OneStopBit;
    3c18:	71c3      	strb	r3, [r0, #7]
#endif
#if defined(FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT) && FSL_FEATURE_LPUART_HAS_MODEM_SUPPORT
    config->enableRxRTS = false;
    3c1a:	7283      	strb	r3, [r0, #10]
    config->enableTxCTS = false;
    3c1c:	72c3      	strb	r3, [r0, #11]
    config->txCtsConfig = kLPUART_CtsSampleAtStart;
    3c1e:	7343      	strb	r3, [r0, #13]
    config->txCtsSource = kLPUART_CtsSourcePin;
    3c20:	7303      	strb	r3, [r0, #12]
#endif
    config->rxIdleType = kLPUART_IdleTypeStartBit;
    3c22:	7383      	strb	r3, [r0, #14]
    config->rxIdleConfig = kLPUART_IdleCharacter1;
    3c24:	73c3      	strb	r3, [r0, #15]
    config->enableTx = false;
    3c26:	7403      	strb	r3, [r0, #16]
    config->enableRx = false;
    3c28:	7443      	strb	r3, [r0, #17]
    3c2a:	bd08      	pop	{r3, pc}
    3c2c:	00004171 	.word	0x00004171
    3c30:	0000453e 	.word	0x0000453e
    3c34:	00004504 	.word	0x00004504

00003c38 <LPUART_GetStatusFlags>:
}

uint32_t LPUART_GetStatusFlags(LPUART_Type *base)
{
    uint32_t temp;
    temp = base->STAT;
    3c38:	6842      	ldr	r2, [r0, #4]
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    temp |= (base->FIFO &
    3c3a:	6983      	ldr	r3, [r0, #24]
             (LPUART_FIFO_TXEMPT_MASK | LPUART_FIFO_RXEMPT_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) >>
    3c3c:	0c1b      	lsrs	r3, r3, #16
    3c3e:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
            16;
#endif
    return temp;
}
    3c42:	ea43 0002 	orr.w	r0, r3, r2
    3c46:	4770      	bx	lr

00003c48 <LPUART_ClearStatusFlags>:
status_t LPUART_ClearStatusFlags(LPUART_Type *base, uint32_t mask)
{
    uint32_t temp;
    status_t status;
#if defined(FSL_FEATURE_LPUART_HAS_FIFO) && FSL_FEATURE_LPUART_HAS_FIFO
    temp = (uint32_t)base->FIFO;
    3c48:	6982      	ldr	r2, [r0, #24]
    temp &= (uint32_t)(~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
    temp |= (mask << 16) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
    3c4a:	040b      	lsls	r3, r1, #16
    temp &= (uint32_t)(~(LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK));
    3c4c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    temp |= (mask << 16) & (LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK);
    3c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    3c54:	4313      	orrs	r3, r2
{
    3c56:	b510      	push	{r4, lr}
    base->FIFO = temp;
    3c58:	6183      	str	r3, [r0, #24]
#endif
    temp = (uint32_t)base->STAT;
    3c5a:	6843      	ldr	r3, [r0, #4]
#if defined(FSL_FEATURE_LPUART_HAS_LIN_BREAK_DETECT) && FSL_FEATURE_LPUART_HAS_LIN_BREAK_DETECT
    temp &= (uint32_t)(~(LPUART_STAT_LBKDIF_MASK));
    temp |= mask & LPUART_STAT_LBKDIF_MASK;
    3c5c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    3c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    3c64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
#endif
    temp &= (uint32_t)(~(LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_NF_MASK |
    3c68:	4313      	orrs	r3, r2
                         LPUART_STAT_FE_MASK | LPUART_STAT_PF_MASK));
    temp |= mask & (LPUART_STAT_RXEDGIF_MASK | LPUART_STAT_IDLE_MASK | LPUART_STAT_OR_MASK | LPUART_STAT_NF_MASK |
    3c6a:	4a08      	ldr	r2, [pc, #32]	; (3c8c <LPUART_ClearStatusFlags+0x44>)
    3c6c:	400a      	ands	r2, r1
    3c6e:	4313      	orrs	r3, r2
                    LPUART_STAT_FE_MASK | LPUART_STAT_PF_MASK);
#if defined(FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING) && FSL_FEATURE_LPUART_HAS_ADDRESS_MATCHING
    temp &= (uint32_t)(~(LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK));
    3c70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    temp |= mask & (LPUART_STAT_MA2F_MASK | LPUART_STAT_MA1F_MASK);
    3c74:	f401 4240 	and.w	r2, r1, #49152	; 0xc000
    3c78:	4313      	orrs	r3, r2
#endif
    base->STAT = temp;
    3c7a:	6043      	str	r3, [r0, #4]
    /* If some flags still pending. */
    if (mask & LPUART_GetStatusFlags(base))
    3c7c:	f7ff ffdc 	bl	3c38 <LPUART_GetStatusFlags>
    3c80:	4201      	tst	r1, r0
    {
        status = kStatus_Success;
    }

    return status;
}
    3c82:	f240 501a 	movw	r0, #1306	; 0x51a
    3c86:	bf08      	it	eq
    3c88:	2000      	moveq	r0, #0
    3c8a:	bd10      	pop	{r4, pc}
    3c8c:	401f0000 	.word	0x401f0000

00003c90 <LPUART_WriteBlocking>:

void LPUART_WriteBlocking(LPUART_Type *base, const uint8_t *data, size_t length)
{
    3c90:	b508      	push	{r3, lr}
    assert(data);
    3c92:	b119      	cbz	r1, 3c9c <LPUART_WriteBlocking+0xc>
    3c94:	440a      	add	r2, r1

    /* This API can only ensure that the data is written into the data buffer but can't
    ensure all data in the data buffer are sent into the transmit shift buffer. */
    while (length--)
    3c96:	4291      	cmp	r1, r2
    3c98:	d107      	bne.n	3caa <LPUART_WriteBlocking+0x1a>
        while (!(base->STAT & LPUART_STAT_TDRE_MASK))
        {
        }
        base->DATA = *(data++);
    }
}
    3c9a:	bd08      	pop	{r3, pc}
    assert(data);
    3c9c:	4b06      	ldr	r3, [pc, #24]	; (3cb8 <LPUART_WriteBlocking+0x28>)
    3c9e:	4a07      	ldr	r2, [pc, #28]	; (3cbc <LPUART_WriteBlocking+0x2c>)
    3ca0:	4807      	ldr	r0, [pc, #28]	; (3cc0 <LPUART_WriteBlocking+0x30>)
    3ca2:	f240 21a9 	movw	r1, #681	; 0x2a9
    3ca6:	f7fc fd07 	bl	6b8 <__assert_func>
        while (!(base->STAT & LPUART_STAT_TDRE_MASK))
    3caa:	6843      	ldr	r3, [r0, #4]
    3cac:	021b      	lsls	r3, r3, #8
    3cae:	d5fc      	bpl.n	3caa <LPUART_WriteBlocking+0x1a>
        base->DATA = *(data++);
    3cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
    3cb4:	60c3      	str	r3, [r0, #12]
    3cb6:	e7ee      	b.n	3c96 <LPUART_WriteBlocking+0x6>
    3cb8:	00004358 	.word	0x00004358
    3cbc:	00004556 	.word	0x00004556
    3cc0:	00004504 	.word	0x00004504

00003cc4 <LPUART_ReadBlocking>:

status_t LPUART_ReadBlocking(LPUART_Type *base, uint8_t *data, size_t length)
{
    3cc4:	b538      	push	{r3, r4, r5, lr}
    3cc6:	4604      	mov	r4, r0
    assert(data);
    3cc8:	b121      	cbz	r1, 3cd4 <LPUART_ReadBlocking+0x10>
    3cca:	188d      	adds	r5, r1, r2
    uint32_t ctrl = base->CTRL;
    bool isSevenDataBits =
        ((ctrl & LPUART_CTRL_M7_MASK) || ((!(ctrl & LPUART_CTRL_M_MASK)) && (ctrl & LPUART_CTRL_PE_MASK)));
#endif

    while (length--)
    3ccc:	42a9      	cmp	r1, r5
    3cce:	d133      	bne.n	3d38 <LPUART_ReadBlocking+0x74>
#else
        *(data++) = base->DATA;
#endif
    }

    return kStatus_Success;
    3cd0:	2000      	movs	r0, #0
}
    3cd2:	bd38      	pop	{r3, r4, r5, pc}
    assert(data);
    3cd4:	4b1c      	ldr	r3, [pc, #112]	; (3d48 <LPUART_ReadBlocking+0x84>)
    3cd6:	4a1d      	ldr	r2, [pc, #116]	; (3d4c <LPUART_ReadBlocking+0x88>)
    3cd8:	481d      	ldr	r0, [pc, #116]	; (3d50 <LPUART_ReadBlocking+0x8c>)
    3cda:	f44f 712e 	mov.w	r1, #696	; 0x2b8
    3cde:	f7fc fceb 	bl	6b8 <__assert_func>
            statusFlag = LPUART_GetStatusFlags(base);
    3ce2:	4620      	mov	r0, r4
    3ce4:	f7ff ffa8 	bl	3c38 <LPUART_GetStatusFlags>
            if (statusFlag & kLPUART_RxOverrunFlag)
    3ce8:	0302      	lsls	r2, r0, #12
    3cea:	d507      	bpl.n	3cfc <LPUART_ReadBlocking+0x38>
                LPUART_ClearStatusFlags(base, kLPUART_RxOverrunFlag);
    3cec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    3cf0:	4620      	mov	r0, r4
    3cf2:	f7ff ffa9 	bl	3c48 <LPUART_ClearStatusFlags>
                return kStatus_LPUART_RxHardwareOverrun;
    3cf6:	f240 501d 	movw	r0, #1309	; 0x51d
    3cfa:	bd38      	pop	{r3, r4, r5, pc}
            if (statusFlag & kLPUART_NoiseErrorFlag)
    3cfc:	0343      	lsls	r3, r0, #13
    3cfe:	d507      	bpl.n	3d10 <LPUART_ReadBlocking+0x4c>
                LPUART_ClearStatusFlags(base, kLPUART_NoiseErrorFlag);
    3d00:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    3d04:	4620      	mov	r0, r4
    3d06:	f7ff ff9f 	bl	3c48 <LPUART_ClearStatusFlags>
                return kStatus_LPUART_NoiseError;
    3d0a:	f240 501e 	movw	r0, #1310	; 0x51e
    3d0e:	bd38      	pop	{r3, r4, r5, pc}
            if (statusFlag & kLPUART_FramingErrorFlag)
    3d10:	0382      	lsls	r2, r0, #14
    3d12:	d507      	bpl.n	3d24 <LPUART_ReadBlocking+0x60>
                LPUART_ClearStatusFlags(base, kLPUART_FramingErrorFlag);
    3d14:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    3d18:	4620      	mov	r0, r4
    3d1a:	f7ff ff95 	bl	3c48 <LPUART_ClearStatusFlags>
                return kStatus_LPUART_FramingError;
    3d1e:	f240 501f 	movw	r0, #1311	; 0x51f
    3d22:	bd38      	pop	{r3, r4, r5, pc}
            if (statusFlag & kLPUART_ParityErrorFlag)
    3d24:	03c3      	lsls	r3, r0, #15
    3d26:	d507      	bpl.n	3d38 <LPUART_ReadBlocking+0x74>
                LPUART_ClearStatusFlags(base, kLPUART_ParityErrorFlag);
    3d28:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3d2c:	4620      	mov	r0, r4
    3d2e:	f7ff ff8b 	bl	3c48 <LPUART_ClearStatusFlags>
                return kStatus_LPUART_ParityError;
    3d32:	f44f 60a4 	mov.w	r0, #1312	; 0x520
    3d36:	bd38      	pop	{r3, r4, r5, pc}
        while (0 == ((base->WATER & LPUART_WATER_RXCOUNT_MASK) >> LPUART_WATER_RXCOUNT_SHIFT))
    3d38:	69e3      	ldr	r3, [r4, #28]
    3d3a:	0e1b      	lsrs	r3, r3, #24
    3d3c:	d0d1      	beq.n	3ce2 <LPUART_ReadBlocking+0x1e>
        *(data++) = base->DATA;
    3d3e:	68e3      	ldr	r3, [r4, #12]
    3d40:	f801 3b01 	strb.w	r3, [r1], #1
    3d44:	e7c2      	b.n	3ccc <LPUART_ReadBlocking+0x8>
    3d46:	bf00      	nop
    3d48:	00004358 	.word	0x00004358
    3d4c:	0000456b 	.word	0x0000456b
    3d50:	00004504 	.word	0x00004504

00003d54 <LPUART0_DriverIRQHandler>:
    __DSB();
#endif
}
#else
void LPUART0_DriverIRQHandler(void)
{
    3d54:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART0, s_lpuartHandle[0]);
    3d56:	4a04      	ldr	r2, [pc, #16]	; (3d68 <LPUART0_DriverIRQHandler+0x14>)
    3d58:	4b04      	ldr	r3, [pc, #16]	; (3d6c <LPUART0_DriverIRQHandler+0x18>)
    3d5a:	6811      	ldr	r1, [r2, #0]
    3d5c:	681b      	ldr	r3, [r3, #0]
    3d5e:	4804      	ldr	r0, [pc, #16]	; (3d70 <LPUART0_DriverIRQHandler+0x1c>)
    3d60:	4798      	blx	r3
    3d62:	f3bf 8f4f 	dsb	sy
    3d66:	bd08      	pop	{r3, pc}
    3d68:	1fff041c 	.word	0x1fff041c
    3d6c:	1fff0430 	.word	0x1fff0430
    3d70:	400c4000 	.word	0x400c4000

00003d74 <LPUART1_DriverIRQHandler>:
    __DSB();
#endif
}
#else
void LPUART1_DriverIRQHandler(void)
{
    3d74:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART1, s_lpuartHandle[1]);
    3d76:	4a04      	ldr	r2, [pc, #16]	; (3d88 <LPUART1_DriverIRQHandler+0x14>)
    3d78:	4b04      	ldr	r3, [pc, #16]	; (3d8c <LPUART1_DriverIRQHandler+0x18>)
    3d7a:	6851      	ldr	r1, [r2, #4]
    3d7c:	681b      	ldr	r3, [r3, #0]
    3d7e:	4804      	ldr	r0, [pc, #16]	; (3d90 <LPUART1_DriverIRQHandler+0x1c>)
    3d80:	4798      	blx	r3
    3d82:	f3bf 8f4f 	dsb	sy
    3d86:	bd08      	pop	{r3, pc}
    3d88:	1fff041c 	.word	0x1fff041c
    3d8c:	1fff0430 	.word	0x1fff0430
    3d90:	400c5000 	.word	0x400c5000

00003d94 <LPUART2_DriverIRQHandler>:
    __DSB();
#endif
}
#else
void LPUART2_DriverIRQHandler(void)
{
    3d94:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART2, s_lpuartHandle[2]);
    3d96:	4a04      	ldr	r2, [pc, #16]	; (3da8 <LPUART2_DriverIRQHandler+0x14>)
    3d98:	4b04      	ldr	r3, [pc, #16]	; (3dac <LPUART2_DriverIRQHandler+0x18>)
    3d9a:	6891      	ldr	r1, [r2, #8]
    3d9c:	681b      	ldr	r3, [r3, #0]
    3d9e:	4804      	ldr	r0, [pc, #16]	; (3db0 <LPUART2_DriverIRQHandler+0x1c>)
    3da0:	4798      	blx	r3
    3da2:	f3bf 8f4f 	dsb	sy
    3da6:	bd08      	pop	{r3, pc}
    3da8:	1fff041c 	.word	0x1fff041c
    3dac:	1fff0430 	.word	0x1fff0430
    3db0:	400c6000 	.word	0x400c6000

00003db4 <LPUART3_DriverIRQHandler>:
    __DSB();
#endif
}
#else
void LPUART3_DriverIRQHandler(void)
{
    3db4:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART3, s_lpuartHandle[3]);
    3db6:	4a04      	ldr	r2, [pc, #16]	; (3dc8 <LPUART3_DriverIRQHandler+0x14>)
    3db8:	4b04      	ldr	r3, [pc, #16]	; (3dcc <LPUART3_DriverIRQHandler+0x18>)
    3dba:	68d1      	ldr	r1, [r2, #12]
    3dbc:	681b      	ldr	r3, [r3, #0]
    3dbe:	4804      	ldr	r0, [pc, #16]	; (3dd0 <LPUART3_DriverIRQHandler+0x1c>)
    3dc0:	4798      	blx	r3
    3dc2:	f3bf 8f4f 	dsb	sy
    3dc6:	bd08      	pop	{r3, pc}
    3dc8:	1fff041c 	.word	0x1fff041c
    3dcc:	1fff0430 	.word	0x1fff0430
    3dd0:	400c7000 	.word	0x400c7000

00003dd4 <LPUART4_DriverIRQHandler>:
    __DSB();
#endif
}
#else
void LPUART4_DriverIRQHandler(void)
{
    3dd4:	b508      	push	{r3, lr}
    s_lpuartIsr(LPUART4, s_lpuartHandle[4]);
    3dd6:	4a04      	ldr	r2, [pc, #16]	; (3de8 <LPUART4_DriverIRQHandler+0x14>)
    3dd8:	4b04      	ldr	r3, [pc, #16]	; (3dec <LPUART4_DriverIRQHandler+0x18>)
    3dda:	6911      	ldr	r1, [r2, #16]
    3ddc:	681b      	ldr	r3, [r3, #0]
    3dde:	4804      	ldr	r0, [pc, #16]	; (3df0 <LPUART4_DriverIRQHandler+0x1c>)
    3de0:	4798      	blx	r3
    3de2:	f3bf 8f4f 	dsb	sy
    3de6:	bd08      	pop	{r3, pc}
    3de8:	1fff041c 	.word	0x1fff041c
    3dec:	1fff0430 	.word	0x1fff0430
    3df0:	400d6000 	.word	0x400d6000

00003df4 <KeyExpansion>:
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
    3df4:	4b2b      	ldr	r3, [pc, #172]	; (3ea4 <KeyExpansion+0xb0>)
    3df6:	681b      	ldr	r3, [r3, #0]
{
    3df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3dfa:	4a2b      	ldr	r2, [pc, #172]	; (3ea8 <KeyExpansion+0xb4>)
    3dfc:	f103 0110 	add.w	r1, r3, #16
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
    3e00:	7818      	ldrb	r0, [r3, #0]
    3e02:	7010      	strb	r0, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
    3e04:	7858      	ldrb	r0, [r3, #1]
    3e06:	7050      	strb	r0, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
    3e08:	7898      	ldrb	r0, [r3, #2]
    3e0a:	7090      	strb	r0, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
    3e0c:	78d8      	ldrb	r0, [r3, #3]
    3e0e:	70d0      	strb	r0, [r2, #3]
    3e10:	3304      	adds	r3, #4
  for(i = 0; i < Nk; ++i)
    3e12:	428b      	cmp	r3, r1
    3e14:	f102 0204 	add.w	r2, r2, #4
    3e18:	d1f2      	bne.n	3e00 <KeyExpansion+0xc>
    3e1a:	2104      	movs	r1, #4
    3e1c:	4b23      	ldr	r3, [pc, #140]	; (3eac <KeyExpansion+0xb8>)
  return sbox[num];
    3e1e:	4824      	ldr	r0, [pc, #144]	; (3eb0 <KeyExpansion+0xbc>)
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
    3e20:	4d24      	ldr	r5, [pc, #144]	; (3eb4 <KeyExpansion+0xc0>)
      tempa[j]=RoundKey[(i-1) * 4 + j];
    3e22:	eb0d 0401 	add.w	r4, sp, r1
{
    3e26:	2200      	movs	r2, #0
      tempa[j]=RoundKey[(i-1) * 4 + j];
    3e28:	5c9e      	ldrb	r6, [r3, r2]
    3e2a:	5516      	strb	r6, [r2, r4]
    for(j = 0; j < 4; ++j)
    3e2c:	3201      	adds	r2, #1
    3e2e:	2a04      	cmp	r2, #4
    3e30:	d1fa      	bne.n	3e28 <KeyExpansion+0x34>
    if (i % Nk == 0)
    3e32:	078a      	lsls	r2, r1, #30
    3e34:	d117      	bne.n	3e66 <KeyExpansion+0x72>
        k = tempa[0];
    3e36:	f89d 6004 	ldrb.w	r6, [sp, #4]
        tempa[2] = tempa[3];
    3e3a:	f89d 7007 	ldrb.w	r7, [sp, #7]
        tempa[3] = getSBoxValue(tempa[3]);
    3e3e:	5d86      	ldrb	r6, [r0, r6]
  return sbox[num];
    3e40:	f89d 2005 	ldrb.w	r2, [sp, #5]
        tempa[3] = getSBoxValue(tempa[3]);
    3e44:	f88d 6007 	strb.w	r6, [sp, #7]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
    3e48:	088e      	lsrs	r6, r1, #2
  return sbox[num];
    3e4a:	f89d e006 	ldrb.w	lr, [sp, #6]
    3e4e:	5c82      	ldrb	r2, [r0, r2]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
    3e50:	5dae      	ldrb	r6, [r5, r6]
        tempa[1] = getSBoxValue(tempa[1]);
    3e52:	f810 e00e 	ldrb.w	lr, [r0, lr]
        tempa[2] = getSBoxValue(tempa[2]);
    3e56:	5dc7      	ldrb	r7, [r0, r7]
        tempa[1] = getSBoxValue(tempa[1]);
    3e58:	f88d e005 	strb.w	lr, [sp, #5]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
    3e5c:	4072      	eors	r2, r6
        tempa[2] = getSBoxValue(tempa[2]);
    3e5e:	f88d 7006 	strb.w	r7, [sp, #6]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
    3e62:	f88d 2004 	strb.w	r2, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
    3e66:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    3e6a:	f89d 6004 	ldrb.w	r6, [sp, #4]
    3e6e:	4072      	eors	r2, r6
    3e70:	711a      	strb	r2, [r3, #4]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
    3e72:	f89d 6005 	ldrb.w	r6, [sp, #5]
    3e76:	f813 2c0b 	ldrb.w	r2, [r3, #-11]
    3e7a:	4072      	eors	r2, r6
    3e7c:	715a      	strb	r2, [r3, #5]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
    3e7e:	f89d 6006 	ldrb.w	r6, [sp, #6]
    3e82:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
    3e86:	4072      	eors	r2, r6
    3e88:	719a      	strb	r2, [r3, #6]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
    3e8a:	f89d 6007 	ldrb.w	r6, [sp, #7]
    3e8e:	f813 2c09 	ldrb.w	r2, [r3, #-9]
  for(; (i < (Nb * (Nr + 1))); ++i)
    3e92:	3101      	adds	r1, #1
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
    3e94:	4072      	eors	r2, r6
  for(; (i < (Nb * (Nr + 1))); ++i)
    3e96:	292c      	cmp	r1, #44	; 0x2c
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
    3e98:	71da      	strb	r2, [r3, #7]
    3e9a:	f103 0304 	add.w	r3, r3, #4
  for(; (i < (Nb * (Nr + 1))); ++i)
    3e9e:	d1c2      	bne.n	3e26 <KeyExpansion+0x32>
  }
}
    3ea0:	b003      	add	sp, #12
    3ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ea4:	1fff0434 	.word	0x1fff0434
    3ea8:	1fff0438 	.word	0x1fff0438
    3eac:	1fff0444 	.word	0x1fff0444
    3eb0:	1fff0077 	.word	0x1fff0077
    3eb4:	1fff006c 	.word	0x1fff006c

00003eb8 <AddRoundKey>:
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
    3eb8:	4b0b      	ldr	r3, [pc, #44]	; (3ee8 <AddRoundKey+0x30>)
{
    3eba:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ebc:	4e0b      	ldr	r6, [pc, #44]	; (3eec <AddRoundKey+0x34>)
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
    3ebe:	681f      	ldr	r7, [r3, #0]
    3ec0:	0100      	lsls	r0, r0, #4
    3ec2:	2300      	movs	r3, #0
    3ec4:	1819      	adds	r1, r3, r0
    3ec6:	18fc      	adds	r4, r7, r3
    3ec8:	4431      	add	r1, r6
{
    3eca:	2200      	movs	r2, #0
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
    3ecc:	f811 e002 	ldrb.w	lr, [r1, r2]
    3ed0:	7825      	ldrb	r5, [r4, #0]
    3ed2:	3201      	adds	r2, #1
    3ed4:	ea85 050e 	eor.w	r5, r5, lr
    for(j = 0; j < 4; ++j)
    3ed8:	2a04      	cmp	r2, #4
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
    3eda:	f804 5b01 	strb.w	r5, [r4], #1
    for(j = 0; j < 4; ++j)
    3ede:	d1f5      	bne.n	3ecc <AddRoundKey+0x14>
    3ee0:	3304      	adds	r3, #4
  for(i=0;i<4;++i)
    3ee2:	2b10      	cmp	r3, #16
    3ee4:	d1ee      	bne.n	3ec4 <AddRoundKey+0xc>
    3ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ee8:	1fff04f8 	.word	0x1fff04f8
    3eec:	1fff0438 	.word	0x1fff0438

00003ef0 <SubBytes>:
      if (input_save[4*i+j] & 0x02) {
        volatile int i = 1;
        i+=1;
      }
      #endif
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
    3ef0:	4b08      	ldr	r3, [pc, #32]	; (3f14 <SubBytes+0x24>)
  return sbox[num];
    3ef2:	4809      	ldr	r0, [pc, #36]	; (3f18 <SubBytes+0x28>)
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
    3ef4:	681b      	ldr	r3, [r3, #0]
{
    3ef6:	b510      	push	{r4, lr}
    3ef8:	1d19      	adds	r1, r3, #4
    3efa:	2200      	movs	r2, #0
  return sbox[num];
    3efc:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
    3f00:	5d04      	ldrb	r4, [r0, r4]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
    3f02:	f803 4022 	strb.w	r4, [r3, r2, lsl #2]
    3f06:	3201      	adds	r2, #1
    for(j = 0; j < 4; ++j)
    3f08:	2a04      	cmp	r2, #4
    3f0a:	d1f7      	bne.n	3efc <SubBytes+0xc>
    3f0c:	3301      	adds	r3, #1
  for(i = 0; i < 4; ++i)
    3f0e:	428b      	cmp	r3, r1
    3f10:	d1f3      	bne.n	3efa <SubBytes+0xa>
    3f12:	bd10      	pop	{r4, pc}
    3f14:	1fff04f8 	.word	0x1fff04f8
    3f18:	1fff0077 	.word	0x1fff0077

00003f1c <ShiftRows>:
        i += 1;
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][1];
    3f1c:	4b0d      	ldr	r3, [pc, #52]	; (3f54 <ShiftRows+0x38>)
    3f1e:	681b      	ldr	r3, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
    3f20:	7959      	ldrb	r1, [r3, #5]
  temp           = (*state)[0][1];
    3f22:	785a      	ldrb	r2, [r3, #1]
  (*state)[0][1] = (*state)[1][1];
    3f24:	7059      	strb	r1, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
    3f26:	7a59      	ldrb	r1, [r3, #9]
    3f28:	7159      	strb	r1, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
    3f2a:	7b59      	ldrb	r1, [r3, #13]
    3f2c:	7259      	strb	r1, [r3, #9]
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
    3f2e:	7a99      	ldrb	r1, [r3, #10]
  (*state)[3][1] = temp;
    3f30:	735a      	strb	r2, [r3, #13]
  temp           = (*state)[0][2];
    3f32:	789a      	ldrb	r2, [r3, #2]
  (*state)[0][2] = (*state)[2][2];
    3f34:	7099      	strb	r1, [r3, #2]
        i += 1;
      }
      #endif

  temp       = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
    3f36:	7b99      	ldrb	r1, [r3, #14]
  (*state)[2][2] = temp;
    3f38:	729a      	strb	r2, [r3, #10]
  temp       = (*state)[1][2];
    3f3a:	799a      	ldrb	r2, [r3, #6]
  (*state)[1][2] = (*state)[3][2];
    3f3c:	7199      	strb	r1, [r3, #6]
      #endif
  #ifdef JITTER_2
  #endif
  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
    3f3e:	7bd9      	ldrb	r1, [r3, #15]
  (*state)[3][2] = temp;
    3f40:	739a      	strb	r2, [r3, #14]
  temp       = (*state)[0][3];
    3f42:	78da      	ldrb	r2, [r3, #3]
  (*state)[0][3] = (*state)[3][3];
    3f44:	70d9      	strb	r1, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
    3f46:	7ad9      	ldrb	r1, [r3, #11]
    3f48:	73d9      	strb	r1, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
    3f4a:	79d9      	ldrb	r1, [r3, #7]
    3f4c:	72d9      	strb	r1, [r3, #11]
  (*state)[1][3] = temp;
    3f4e:	71da      	strb	r2, [r3, #7]
    3f50:	4770      	bx	lr
    3f52:	bf00      	nop
    3f54:	1fff04f8 	.word	0x1fff04f8

00003f58 <xtime>:
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
    3f58:	09c3      	lsrs	r3, r0, #7
    3f5a:	005a      	lsls	r2, r3, #1
    3f5c:	4413      	add	r3, r2
    3f5e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3f62:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    3f66:	b2c0      	uxtb	r0, r0
    3f68:	4770      	bx	lr
    3f6a:	0000      	movs	r0, r0

00003f6c <Cipher>:
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
    3f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
    3f70:	2000      	movs	r0, #0
    3f72:	f7ff ffa1 	bl	3eb8 <AddRoundKey>
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
    3f76:	2401      	movs	r4, #1
  {
    SubBytes();
    3f78:	f7ff ffba 	bl	3ef0 <SubBytes>
    ShiftRows();
    3f7c:	f7ff ffce 	bl	3f1c <ShiftRows>
    t   = (*state)[i][0];
    3f80:	4b1e      	ldr	r3, [pc, #120]	; (3ffc <Cipher+0x90>)
    3f82:	6819      	ldr	r1, [r3, #0]
    3f84:	f101 0b10 	add.w	fp, r1, #16
    3f88:	f891 a000 	ldrb.w	sl, [r1]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    3f8c:	784e      	ldrb	r6, [r1, #1]
    3f8e:	788d      	ldrb	r5, [r1, #2]
    3f90:	f891 9003 	ldrb.w	r9, [r1, #3]
    3f94:	ea8a 0006 	eor.w	r0, sl, r6
    3f98:	ea85 0809 	eor.w	r8, r5, r9
    3f9c:	ea80 0708 	eor.w	r7, r0, r8
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    3fa0:	f7ff ffda 	bl	3f58 <xtime>
    3fa4:	ea8a 0000 	eor.w	r0, sl, r0
    3fa8:	4078      	eors	r0, r7
    3faa:	7008      	strb	r0, [r1, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
    3fac:	ea86 0005 	eor.w	r0, r6, r5
    3fb0:	f7ff ffd2 	bl	3f58 <xtime>
    3fb4:	4070      	eors	r0, r6
    3fb6:	4078      	eors	r0, r7
    3fb8:	7048      	strb	r0, [r1, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
    3fba:	4640      	mov	r0, r8
    3fbc:	f7ff ffcc 	bl	3f58 <xtime>
    3fc0:	4068      	eors	r0, r5
    3fc2:	4078      	eors	r0, r7
    3fc4:	7088      	strb	r0, [r1, #2]
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
    3fc6:	ea8a 0009 	eor.w	r0, sl, r9
    3fca:	f7ff ffc5 	bl	3f58 <xtime>
    3fce:	ea89 0000 	eor.w	r0, r9, r0
    3fd2:	4047      	eors	r7, r0
    3fd4:	70cf      	strb	r7, [r1, #3]
    3fd6:	3104      	adds	r1, #4
  for(i = 0; i < 4; ++i)
    3fd8:	4559      	cmp	r1, fp
    3fda:	d1d5      	bne.n	3f88 <Cipher+0x1c>
    MixColumns();
    AddRoundKey(round);
    3fdc:	4620      	mov	r0, r4
  for(round = 1; round < Nr; ++round)
    3fde:	3401      	adds	r4, #1
    3fe0:	b2e4      	uxtb	r4, r4
    AddRoundKey(round);
    3fe2:	f7ff ff69 	bl	3eb8 <AddRoundKey>
  for(round = 1; round < Nr; ++round)
    3fe6:	2c0a      	cmp	r4, #10
    3fe8:	d1c6      	bne.n	3f78 <Cipher+0xc>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
    3fea:	f7ff ff81 	bl	3ef0 <SubBytes>
  ShiftRows();
    3fee:	f7ff ff95 	bl	3f1c <ShiftRows>
  AddRoundKey(Nr);
    3ff2:	4620      	mov	r0, r4
}
    3ff4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AddRoundKey(Nr);
    3ff8:	f7ff bf5e 	b.w	3eb8 <AddRoundKey>
    3ffc:	1fff04f8 	.word	0x1fff04f8

00004000 <BlockCopy>:
  InvSubBytes();
  AddRoundKey(0);
}

static void BlockCopy(uint8_t* output, const uint8_t* input)
{
    4000:	1e4b      	subs	r3, r1, #1
    4002:	3801      	subs	r0, #1
    4004:	310f      	adds	r1, #15
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
    4006:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    400a:	f800 2f01 	strb.w	r2, [r0, #1]!
  for (i=0;i<KEYLEN;++i)
    400e:	428b      	cmp	r3, r1
    4010:	d1f9      	bne.n	4006 <BlockCopy+0x6>
  }
}
    4012:	4770      	bx	lr

00004014 <AES128_ECB_indp_setkey>:
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t* key)
{
  Key = key;
    4014:	4b01      	ldr	r3, [pc, #4]	; (401c <AES128_ECB_indp_setkey+0x8>)
    4016:	6018      	str	r0, [r3, #0]
  KeyExpansion();
    4018:	f7ff beec 	b.w	3df4 <KeyExpansion>
    401c:	1fff0434 	.word	0x1fff0434

00004020 <AES128_ECB_indp_crypto>:
}

void AES128_ECB_indp_crypto(uint8_t* input)
{
    4020:	b508      	push	{r3, lr}
  state = (state_t*)input;
    4022:	4b05      	ldr	r3, [pc, #20]	; (4038 <AES128_ECB_indp_crypto+0x18>)
{
    4024:	4601      	mov	r1, r0
  state = (state_t*)input;
    4026:	6018      	str	r0, [r3, #0]
  BlockCopy(input_save, input);
    4028:	4804      	ldr	r0, [pc, #16]	; (403c <AES128_ECB_indp_crypto+0x1c>)
    402a:	f7ff ffe9 	bl	4000 <BlockCopy>
  Cipher();
}
    402e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Cipher();
    4032:	f7ff bf9b 	b.w	3f6c <Cipher>
    4036:	bf00      	nop
    4038:	1fff04f8 	.word	0x1fff04f8
    403c:	1fff04e8 	.word	0x1fff04e8

00004040 <aes_indep_init>:
#include "aes.h"

uint8_t enckey[16];

void aes_indep_init(void)
{
    4040:	4770      	bx	lr

00004042 <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
    AES128_ECB_indp_setkey(key);
    4042:	f7ff bfe7 	b.w	4014 <AES128_ECB_indp_setkey>

00004046 <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	AES128_ECB_indp_crypto(pt);
    4046:	f7ff bfeb 	b.w	4020 <AES128_ECB_indp_crypto>

0000404a <aes_indep_enc_pretrigger>:
    404a:	4770      	bx	lr

0000404c <aes_indep_enc_posttrigger>:
{
    ;
}

void aes_indep_enc_posttrigger(uint8_t * pt)
{
    404c:	4770      	bx	lr

0000404e <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
    404e:	4770      	bx	lr
    4050:	16157e2b 	.word	0x16157e2b
    4054:	a6d2ae28 	.word	0xa6d2ae28
    4058:	8815f7ab 	.word	0x8815f7ab
    405c:	3c4fcf09 	.word	0x3c4fcf09

00004060 <_global_impure_ptr>:
    4060:	1fff0004                                ....

00004064 <__sf_fake_stderr>:
    4064:	00000000 00000000 00000000 00000000     ................
    4074:	00000000 00000000 00000000 00000000     ................

00004084 <__sf_fake_stdout>:
    4084:	00000000 00000000 00000000 00000000     ................
    4094:	00000000 00000000 00000000 00000000     ................

000040a4 <__sf_fake_stdin>:
    40a4:	00000000 00000000 00000000 00000000     ................
    40b4:	00000000 00000000 00000000 00000000     ................
    40c4:	204d5449 76696c61 000a2165 6c756f43     ITM alive!..Coul
    40d4:	74276e64 69727020 0a21746e 69684300     dn't print!..Chi
    40e4:	69685770 72657073 73207265 6c706d69     pWhisperer simpl
    40f4:	72657365 2d6c6169 63617274 63202c65     eserial-trace, c
    4104:	69706d6f 2064656c 6c754a00 20372020     ompiled .Jul  7 
    4114:	32323032 00202c00 313a3131 30353a39     2022., .11:19:50
    4124:	32313000                                         .

00004125 <hex_lookup>:
    4125:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    4135:	74736e69 65636e61 41203c20 59415252     instance < ARRAY
    4145:	5a49535f 5f732845 6f697067 65736142     _SIZE(s_gpioBase
    4155:	2e002973 2f2e2f2e 2f6c6168 6632386b     s)..././hal/k82f
    4165:	6c73662f 6970675f 00632e6f 666e6f63     /fsl_gpio.c.conf
    4175:	47006769                                         ig.

00004178 <__func__.7154>:
    4178:	4f495047 6e69505f 74696e49 735f7300     GPIO_PinInit.s_s
    4188:	61486961 656c646e 5b5d305b 73005d31     aiHandle[0][1].s
    4198:	6961735f 646e6148 305b656c 5d305b5d     _saiHandle[0][0]
    41a8:	736e6900 636e6174 203c2065 41525241     .instance < ARRA
    41b8:	49535f59 7328455a 6961735f 65736142     Y_SIZE(s_saiBase
    41c8:	2e002973 2f2e2f2e 2f6c6168 6632386b     s)..././hal/k82f
    41d8:	6c73662f 6961735f 4900632e                       /fsl_sai.c.

000041e3 <__func__.7766>:
    41e3:	30533249 5f78545f 76697244 52497265     I2S0_Tx_DriverIR
    41f3:	6e614851 72656c64 53324900                       QHandler.

000041fc <__func__.7770>:
    41fc:	30533249 5f78525f 76697244 52497265     I2S0_Rx_DriverIR
    420c:	6e614851 72656c64 6e727400                       QHandler.

00004215 <__func__.7160>:
    4215:	676e7274 7465475f 74736e49 65636e61     trng_GetInstance
    4225:	736e6900 636e6174 203c2065 41525241     .instance < ARRA
    4235:	49535f59 7328455a 6e72745f 73614267     Y_SIZE(s_trngBas
    4245:	00297365 2e2f2e2e 6c61682f 32386b2f     es)..././hal/k82
    4255:	73662f66 72745f6c 632e676e 736e6900     f/fsl_trng.c.ins
    4265:	636e6174 203c2065 41525241 49535f59     tance < ARRAY_SI
    4275:	7328455a 7073645f 73614269 00297365     ZE(s_dspiBases).
    4285:	2e2f2e2e 6c61682f 32386b2f 73662f66     .././hal/k82f/fs
    4295:	73645f6c 632e6970 645f6700 48697073     l_dspi.c.g_dspiH
    42a5:	6c646e61 5d305b65 645f6700 48697073     andle[0].g_dspiH
    42b5:	6c646e61 5d315b65 645f6700 48697073     andle[1].g_dspiH
    42c5:	6c646e61 5d325b65 49505300                       andle[2].

000042ce <__func__.7809>:
    42ce:	30495053 6972445f 49726576 61485152     SPI0_DriverIRQHa
    42de:	656c646e 50530072                                ndler.

000042e4 <__func__.7813>:
    42e4:	31495053 6972445f 49726576 61485152     SPI1_DriverIRQHa
    42f4:	656c646e 50530072                                ndler.

000042fa <__func__.7817>:
    42fa:	32495053 6972445f 49726576 61485152     SPI2_DriverIRQHa
    430a:	656c646e 5f730072 63686473 646e6148     ndler.s_sdhcHand
    431a:	305b656c 6168005d 656c646e 2f2e2e00     le[0].handle.../
    432a:	61682f2e 386b2f6c 662f6632 735f6c73     ./hal/k82f/fsl_s
    433a:	2e636864 61680063 656c646e 6f633e2d     dhc.c.handle->co
    434a:	6e616d6d 61680064 656c646e 61643e2d     mmand.handle->da
    435a:	53006174                                         ta.

0000435d <__func__.7829>:
    435d:	43484453 6972445f 49726576 61485152     SDHC_DriverIRQHa
    436d:	656c646e 10000072                                ndler..

00004374 <oscConfig_BOARD_BootClockRUN>:
    4374:	00707510 00a00000                       .up.....

0000437c <simConfig_BOARD_BootClockRUN>:
    437c:	00000000 00000000 646e6168 2120656c     ........handle !
    438c:	554e203d 69004c4c 6174736e 2065636e     = NULL.instance 
    439c:	5241203c 5f594152 455a4953 655f7328     < ARRAY_SIZE(s_e
    43ac:	42616d64 73657361 2e2e0029 682f2e2f     dmaBases)..././h
    43bc:	6b2f6c61 2f663238 5f6c7366 616d6465     al/k82f/fsl_edma
    43cc:	6300632e 6e6e6168 3c206c65 4c534620     .c.channel < FSL
    43dc:	4145465f 45525554 4d44455f 4f4d5f41     _FEATURE_EDMA_MO
    43ec:	454c5544 4148435f 4c454e4e 64637400     DULE_CHANNEL.tcd
    43fc:	203d2120 4c4c554e 75282800 33746e69      != NULL.((uint3
    440c:	29745f32 20646374 78302026 29554631     2_t)tcd & 0x1FU)
    441c:	203d3d20 44450030                                 == 0.

00004422 <__func__.7508>:
    4422:	414d4445 7465475f 6e616843 536c656e     EDMA_GetChannelS
    4432:	75746174 616c4673 45007367                       tatusFlags.

0000443d <__func__.7599>:
    443d:	414d4445 6e61485f 49656c64 69005152     EDMA_HandleIRQ.i
    444d:	6174736e 2065636e 5241203c 5f594152     nstance < ARRAY_
    445d:	455a4953 6c5f7328 72617570 73614274     SIZE(s_lpuartBas
    446d:	00297365 666e6f63 3e2d6769 64756162     es).config->baud
    447d:	65746152 7370425f 4c534600 4145465f     Rate_Bps.FSL_FEA
    448d:	45525554 55504c5f 5f545241 4f464946     TURE_LPUART_FIFO
    449d:	5a49535f 62286e45 29657361 203d3e20     _SIZEn(base) >= 
    44ad:	666e6f63 3e2d6769 69467874 61576f66     config->txFifoWa
    44bd:	6d726574 006b7261 5f4c5346 54414546     termark.FSL_FEAT
    44cd:	5f455255 4155504c 465f5452 5f4f4649     URE_LPUART_FIFO_
    44dd:	455a4953 6162286e 20296573 63203d3e     SIZEn(base) >= c
    44ed:	69666e6f 723e2d67 66694678 7461576f     onfig->rxFifoWat
    44fd:	616d7265 2e006b72 2f2e2f2e 2f6c6168     ermark..././hal/
    450d:	6632386b 6c73662f 75706c5f 2e747261     k82f/fsl_lpuart.
    451d:	504c0063                                         c.

0000451f <__func__.7333>:
    451f:	4155504c 475f5452 6e497465 6e617473     LPUART_GetInstan
    452f:	4c006563                                         ce.

00004532 <__func__.7371>:
    4532:	4155504c 495f5452 0074696e              LPUART_Init.

0000453e <__func__.7398>:
    453e:	4155504c 475f5452 65447465 6c756166     LPUART_GetDefaul
    454e:	6e6f4374 00676966                       tConfig.

00004556 <__func__.7444>:
    4556:	4155504c 575f5452 65746972 636f6c42     LPUART_WriteBloc
    4566:	676e696b 55504c00                                king.

0000456b <__func__.7456>:
    456b:	4155504c 525f5452 42646165 6b636f6c     LPUART_ReadBlock
    457b:	00676e69 2c000400                                ing..

00004580 <s_lpuartClock>:
    4580:	102c0004 102c0005 102c0006 102c0007     ..,...,...,...,.
    4590:	102c0016 7566202c 6974636e 203a6e6f     ..,., function: 
    45a0:	00000000 65737361 6f697472 2522206e     ....assertion "%
    45b0:	66202273 656c6961 66203a64 20656c69     s" failed: file 
    45c0:	22732522 696c202c 2520656e 25732564     "%s", line %d%s%
    45d0:	00000a73 00000043 2b302d23 00000020     s...C...#-0+ ...
    45e0:	004c6c68 45676665 00004746 33323130     hlL.efgEFG..0123
    45f0:	37363534 42413938 46454443 00000000     456789ABCDEF....
    4600:	33323130 37363534 62613938 66656463     0123456789abcdef
    4610:	00000000                                ....

00004614 <_init>:
    4614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4616:	bf00      	nop
    4618:	bcf8      	pop	{r3, r4, r5, r6, r7}
    461a:	bc08      	pop	{r3}
    461c:	469e      	mov	lr, r3
    461e:	4770      	bx	lr

00004620 <_fini>:
    4620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4622:	bf00      	nop
    4624:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4626:	bc08      	pop	{r3}
    4628:	469e      	mov	lr, r3
    462a:	4770      	bx	lr
