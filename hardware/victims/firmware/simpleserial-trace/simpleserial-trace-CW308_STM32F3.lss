
simpleserial-trace-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001898  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001a20  08001a20  00011a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aa8  08001aa8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa8  08001aa8  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa8  08001aa8  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aac  08001aac  00011aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08001ab0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000020c  08001cbc  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000470  08001cbc  00020470  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000031  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c2b  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000012bc  00000000  00000000  00027e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000027b0  00000000  00000000  0002914e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000002d0  00000000  00000000  0002b8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000508  00000000  00000000  0002bbce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001824  00000000  00000000  0002c0d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00001d43  00000000  00000000  0002d8fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00000868  00000000  00000000  0002f640  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  0002fea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0002ffec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000020f 	.word	0x2000020f
 80001a0:	2000020c 	.word	0x2000020c
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	2000020c 	.word	0x2000020c
 80001c4:	2000020c 	.word	0x2000020c
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001a08 	.word	0x08001a08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000210 	.word	0x20000210
 8000220:	08001a08 	.word	0x08001a08
 8000224:	2000020c 	.word	0x2000020c
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f001 fbdb 	bl	8001a08 <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08001aa8 	.word	0x08001aa8
 8000270:	08001aa8 	.word	0x08001aa8
 8000274:	08001aac 	.word	0x08001aac
 8000278:	08001aa8 	.word	0x08001aa8

0800027c <setreg>:
uint8_t pcsamp_enable;

uint8_t setreg(uint8_t* x, uint8_t len)
{
        uint32_t val;
        val = x[4] + (x[3] << 8) + (x[2] << 16) + (x[1] << 24);
 800027c:	78c2      	ldrb	r2, [r0, #3]
 800027e:	7903      	ldrb	r3, [r0, #4]
 8000280:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000284:	7882      	ldrb	r2, [r0, #2]
 8000286:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800028a:	7842      	ldrb	r2, [r0, #1]
 800028c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
//8:  TPI->ACPR
//9:  TPI->SPPR
//10: TPI->FFCR
//11: TPI->CSPSR
//12: ITM->TCR
        if       (x[0] == 0)    {DWT->CTRL = val;}
 8000290:	7802      	ldrb	r2, [r0, #0]
 8000292:	b912      	cbnz	r2, 800029a <setreg+0x1e>
 8000294:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <setreg+0xd4>)
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
 8000296:	6013      	str	r3, [r2, #0]
 8000298:	e003      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
 800029a:	2a01      	cmp	r2, #1
 800029c:	d103      	bne.n	80002a6 <setreg+0x2a>
 800029e:	4a2c      	ldr	r2, [pc, #176]	; (8000350 <setreg+0xd4>)
 80002a0:	6213      	str	r3, [r2, #32]
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
        else if  (x[0] == 12)   {ITM->TCR     = val;}

	return 0x00;
}
 80002a2:	2000      	movs	r0, #0
 80002a4:	4770      	bx	lr
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
 80002a6:	2a02      	cmp	r2, #2
 80002a8:	d102      	bne.n	80002b0 <setreg+0x34>
 80002aa:	4a29      	ldr	r2, [pc, #164]	; (8000350 <setreg+0xd4>)
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
 80002ae:	e7f8      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
 80002b0:	2a03      	cmp	r2, #3
 80002b2:	d109      	bne.n	80002c8 <setreg+0x4c>
 80002b4:	4a27      	ldr	r2, [pc, #156]	; (8000354 <setreg+0xd8>)
 80002b6:	6811      	ldr	r1, [r2, #0]
 80002b8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002bc:	6011      	str	r1, [r2, #0]
 80002be:	6013      	str	r3, [r2, #0]
 80002c0:	6813      	ldr	r3, [r2, #0]
 80002c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002c6:	e7e6      	b.n	8000296 <setreg+0x1a>
        else if  (x[0] == 4)    {ETM_SetupMode(); ETM->TESSEICR = val; ETM_TraceMode();}
 80002c8:	2a04      	cmp	r2, #4
 80002ca:	d107      	bne.n	80002dc <setreg+0x60>
 80002cc:	4a21      	ldr	r2, [pc, #132]	; (8000354 <setreg+0xd8>)
 80002ce:	6811      	ldr	r1, [r2, #0]
 80002d0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002d4:	6011      	str	r1, [r2, #0]
 80002d6:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
 80002da:	e7f1      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 5)    {ETM_SetupMode(); ETM->TEEVR    = val; ETM_TraceMode();}
 80002dc:	2a05      	cmp	r2, #5
 80002de:	d106      	bne.n	80002ee <setreg+0x72>
 80002e0:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <setreg+0xd8>)
 80002e2:	6811      	ldr	r1, [r2, #0]
 80002e4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002e8:	6011      	str	r1, [r2, #0]
 80002ea:	6213      	str	r3, [r2, #32]
 80002ec:	e7e8      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 6)    {ETM_SetupMode(); ETM->TECR1    = val; ETM_TraceMode();}
 80002ee:	2a06      	cmp	r2, #6
 80002f0:	d106      	bne.n	8000300 <setreg+0x84>
 80002f2:	4a18      	ldr	r2, [pc, #96]	; (8000354 <setreg+0xd8>)
 80002f4:	6811      	ldr	r1, [r2, #0]
 80002f6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002fa:	6011      	str	r1, [r2, #0]
 80002fc:	6253      	str	r3, [r2, #36]	; 0x24
 80002fe:	e7df      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 7)    {ETM_SetupMode(); ETM->TRACEIDR = val; ETM_TraceMode();}
 8000300:	2a07      	cmp	r2, #7
 8000302:	d107      	bne.n	8000314 <setreg+0x98>
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <setreg+0xd8>)
 8000306:	6811      	ldr	r1, [r2, #0]
 8000308:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800030c:	6011      	str	r1, [r2, #0]
 800030e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000312:	e7d5      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 8)    {TPI->ACPR    = val;}
 8000314:	2a08      	cmp	r2, #8
 8000316:	d102      	bne.n	800031e <setreg+0xa2>
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <setreg+0xdc>)
 800031a:	6113      	str	r3, [r2, #16]
 800031c:	e7c1      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 9)    {TPI->SPPR    = val;}
 800031e:	2a09      	cmp	r2, #9
 8000320:	d103      	bne.n	800032a <setreg+0xae>
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <setreg+0xdc>)
 8000324:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000328:	e7bb      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
 800032a:	2a0a      	cmp	r2, #10
 800032c:	d103      	bne.n	8000336 <setreg+0xba>
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <setreg+0xdc>)
 8000330:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8000334:	e7b5      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
 8000336:	2a0b      	cmp	r2, #11
 8000338:	d102      	bne.n	8000340 <setreg+0xc4>
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <setreg+0xdc>)
 800033c:	6053      	str	r3, [r2, #4]
 800033e:	e7b0      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 12)   {ITM->TCR     = val;}
 8000340:	2a0c      	cmp	r2, #12
 8000342:	bf04      	itt	eq
 8000344:	f04f 4260 	moveq.w	r2, #3758096384	; 0xe0000000
 8000348:	f8c2 3e80 	streq.w	r3, [r2, #3712]	; 0xe80
 800034c:	e7a9      	b.n	80002a2 <setreg+0x26>
 800034e:	bf00      	nop
 8000350:	e0001000 	.word	0xe0001000
 8000354:	e0041000 	.word	0xe0041000
 8000358:	e0040000 	.word	0xe0040000

0800035c <reset>:

uint8_t reset(uint8_t* x, uint8_t len)
{
    // Reset key here if needed
    return 0x00;
}
 800035c:	2000      	movs	r0, #0
 800035e:	4770      	bx	lr

08000360 <getreg>:
{
 8000360:	b508      	push	{r3, lr}
        if       (x[0] == 0)    {val = DWT->CTRL;}
 8000362:	7803      	ldrb	r3, [r0, #0]
{
 8000364:	4602      	mov	r2, r0
        if       (x[0] == 0)    {val = DWT->CTRL;}
 8000366:	b913      	cbnz	r3, 800036e <getreg+0xe>
 8000368:	4b27      	ldr	r3, [pc, #156]	; (8000408 <getreg+0xa8>)
        else if  (x[0] == 3)    {val = ETM->CR;}
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	e008      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 1)    {val = DWT->COMP0;}
 800036e:	2b01      	cmp	r3, #1
 8000370:	d102      	bne.n	8000378 <getreg+0x18>
 8000372:	4b25      	ldr	r3, [pc, #148]	; (8000408 <getreg+0xa8>)
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
 8000374:	6a1b      	ldr	r3, [r3, #32]
 8000376:	e003      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 2)    {val = DWT->COMP1 ;}
 8000378:	2b02      	cmp	r3, #2
 800037a:	d10e      	bne.n	800039a <getreg+0x3a>
 800037c:	4b22      	ldr	r3, [pc, #136]	; (8000408 <getreg+0xa8>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        x[3] = val & 0xff;
 8000380:	70d3      	strb	r3, [r2, #3]
        x[2] = (val >> 8) & 0xff;
 8000382:	0a19      	lsrs	r1, r3, #8
 8000384:	7091      	strb	r1, [r2, #2]
        x[1] = (val >> 16) & 0xff;
 8000386:	0c19      	lsrs	r1, r3, #16
        x[0] = (val >> 24) & 0xff;
 8000388:	0e1b      	lsrs	r3, r3, #24
        x[1] = (val >> 16) & 0xff;
 800038a:	7051      	strb	r1, [r2, #1]
        x[0] = (val >> 24) & 0xff;
 800038c:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 4, x);
 800038e:	2104      	movs	r1, #4
 8000390:	2072      	movs	r0, #114	; 0x72
 8000392:	f000 fa33 	bl	80007fc <simpleserial_put>
}
 8000396:	2000      	movs	r0, #0
 8000398:	bd08      	pop	{r3, pc}
        else if  (x[0] == 3)    {val = ETM->CR;}
 800039a:	2b03      	cmp	r3, #3
 800039c:	d101      	bne.n	80003a2 <getreg+0x42>
 800039e:	4b1b      	ldr	r3, [pc, #108]	; (800040c <getreg+0xac>)
 80003a0:	e7e3      	b.n	800036a <getreg+0xa>
        else if  (x[0] == 4)    {val = ETM->TESSEICR;}
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d103      	bne.n	80003ae <getreg+0x4e>
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <getreg+0xac>)
 80003a8:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80003ac:	e7e8      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
 80003ae:	2b05      	cmp	r3, #5
 80003b0:	d101      	bne.n	80003b6 <getreg+0x56>
 80003b2:	4b16      	ldr	r3, [pc, #88]	; (800040c <getreg+0xac>)
 80003b4:	e7de      	b.n	8000374 <getreg+0x14>
        else if  (x[0] == 6)    {val = ETM->TECR1;}
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d102      	bne.n	80003c0 <getreg+0x60>
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <getreg+0xac>)
 80003bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003be:	e7df      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 7)    {val = ETM->TRACEIDR;}
 80003c0:	2b07      	cmp	r3, #7
 80003c2:	d103      	bne.n	80003cc <getreg+0x6c>
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <getreg+0xac>)
 80003c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80003ca:	e7d9      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 8)    {val = TPI->ACPR;}
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	d102      	bne.n	80003d6 <getreg+0x76>
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <getreg+0xb0>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	e7d4      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 9)    {val = TPI->SPPR;}
 80003d6:	2b09      	cmp	r3, #9
 80003d8:	d103      	bne.n	80003e2 <getreg+0x82>
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <getreg+0xb0>)
 80003dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80003e0:	e7ce      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 10)   {val = TPI->FFCR;}
 80003e2:	2b0a      	cmp	r3, #10
 80003e4:	d103      	bne.n	80003ee <getreg+0x8e>
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <getreg+0xb0>)
 80003e8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80003ec:	e7c8      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 11)   {val = TPI->CSPSR;}
 80003ee:	2b0b      	cmp	r3, #11
 80003f0:	d102      	bne.n	80003f8 <getreg+0x98>
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <getreg+0xb0>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	e7c3      	b.n	8000380 <getreg+0x20>
        else if  (x[0] == 12)   {val = ITM->TCR;}
 80003f8:	2b0c      	cmp	r3, #12
 80003fa:	bf0a      	itet	eq
 80003fc:	f04f 4360 	moveq.w	r3, #3758096384	; 0xe0000000
        else {val = 0;}
 8000400:	2300      	movne	r3, #0
        else if  (x[0] == 12)   {val = ITM->TCR;}
 8000402:	f8d3 3e80 	ldreq.w	r3, [r3, #3712]	; 0xe80
 8000406:	e7bb      	b.n	8000380 <getreg+0x20>
 8000408:	e0001000 	.word	0xe0001000
 800040c:	e0041000 	.word	0xe0041000
 8000410:	e0040000 	.word	0xe0040000

08000414 <set_pcsample_params>:
{
 8000414:	b570      	push	{r4, r5, r6, lr}
    pcsamp_enable = x[0] & 1;
 8000416:	7803      	ldrb	r3, [r0, #0]
 8000418:	4910      	ldr	r1, [pc, #64]	; (800045c <set_pcsample_params+0x48>)
    postreset = x[3] & 0xf;
 800041a:	78c4      	ldrb	r4, [r0, #3]
    pcsamp_enable = x[0] & 1;
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	700b      	strb	r3, [r1, #0]
    postinit  = x[2] & 0xf;
 8000422:	7881      	ldrb	r1, [r0, #2]
    cyctap = x[1] & 1;
 8000424:	7843      	ldrb	r3, [r0, #1]
{
 8000426:	4602      	mov	r2, r0
    postinit  = x[2] & 0xf;
 8000428:	f001 010f 	and.w	r1, r1, #15
    DWT->CTRL = 0;
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <set_pcsample_params+0x4c>)
    cyctap = x[1] & 1;
 800042e:	f003 0601 	and.w	r6, r3, #1
    DWT->CTRL = 0;
 8000432:	2500      	movs	r5, #0
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 8000434:	014b      	lsls	r3, r1, #5
    DWT->CTRL = 0;
 8000436:	6005      	str	r5, [r0, #0]
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 8000438:	6003      	str	r3, [r0, #0]
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
 800043a:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 800043e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    postreset = x[3] & 0xf;
 8000442:	f004 040f 	and.w	r4, r4, #15
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    DWT->CTRL = (cyctap << DWT_CTRL_CYCTAP_Pos)
 800044e:	6003      	str	r3, [r0, #0]
    simpleserial_put('r', 4, x);
 8000450:	2104      	movs	r1, #4
 8000452:	2072      	movs	r0, #114	; 0x72
 8000454:	f000 f9d2 	bl	80007fc <simpleserial_put>
}
 8000458:	4628      	mov	r0, r5
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	200003fc 	.word	0x200003fc
 8000460:	e0001000 	.word	0xe0001000

08000464 <get_mask>:
{
 8000464:	b508      	push	{r3, lr}
  aes_indep_mask(m, len);
 8000466:	f001 faa8 	bl	80019ba <aes_indep_mask>
}
 800046a:	2000      	movs	r0, #0
 800046c:	bd08      	pop	{r3, pc}

0800046e <get_key>:
{
 800046e:	b508      	push	{r3, lr}
    aes_indep_key(k);
 8000470:	f001 fa9d 	bl	80019ae <aes_indep_key>
}
 8000474:	2000      	movs	r0, #0
 8000476:	bd08      	pop	{r3, pc}

08000478 <enable_trace>:
       DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 8000478:	4a2b      	ldr	r2, [pc, #172]	; (8000528 <enable_trace+0xb0>)
 800047a:	6853      	ldr	r3, [r2, #4]
 800047c:	f043 0320 	orr.w	r3, r3, #32
{
 8000480:	b510      	push	{r4, lr}
       DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 8000482:	6053      	str	r3, [r2, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 8000484:	f5a2 324c 	sub.w	r2, r2, #208896	; 0x33000
 8000488:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
       TPI->SPPR = 2; // default to SWO with NRZ encoding
 800048c:	2102      	movs	r1, #2
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 800048e:	68d3      	ldr	r3, [r2, #12]
    ITM->LAR = 0xC5ACCE55;
 8000490:	4c26      	ldr	r4, [pc, #152]	; (800052c <enable_trace+0xb4>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 8000492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000496:	60d3      	str	r3, [r2, #12]
    TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
 8000498:	4b25      	ldr	r3, [pc, #148]	; (8000530 <enable_trace+0xb8>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
    TPI->CSPSR =0x00000008; // 4 trace lanes
 800049e:	2008      	movs	r0, #8
       TPI->SPPR = 2; // default to SWO with NRZ encoding
 80004a0:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    TPI->FFCR = 0x102; // packet framing enabled
 80004a4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80004a8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    TPI->CSPSR =0x00000008; // 4 trace lanes
 80004ac:	6058      	str	r0, [r3, #4]
    ITM->LAR = 0xC5ACCE55;
 80004ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 80004b2:	4920      	ldr	r1, [pc, #128]	; (8000534 <enable_trace+0xbc>)
    ITM->LAR = 0xC5ACCE55;
 80004b4:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 80004b8:	f8c3 1e80 	str.w	r1, [r3, #3712]	; 0xe80
    ITM->TER = 0xFFFFFFFF; // Enable all stimulus ports
 80004bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004c0:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ITM->TPR = 0x00000000; // allow unpriviledged access
 80004c4:	f8c3 2e40 	str.w	r2, [r3, #3648]	; 0xe40
    DWT->CTRL = (0xf << DWT_CTRL_POSTINIT_Pos);// countdown counter for PC sampling, must be written
 80004c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004cc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80004d0:	6019      	str	r1, [r3, #0]
    DWT->CTRL |=(1 << DWT_CTRL_CYCTAP_Pos)     // Prescaler for PC sampling: 0 = x32, 1 = x512
 80004d2:	6819      	ldr	r1, [r3, #0]
 80004d4:	f441 61c2 	orr.w	r1, r1, #1552	; 0x610
 80004d8:	f041 0101 	orr.w	r1, r1, #1
 80004dc:	6019      	str	r1, [r3, #0]
    DWT->COMP0 = 0x00001d60; // AES subbytes
 80004de:	f44f 51eb 	mov.w	r1, #7520	; 0x1d60
 80004e2:	6219      	str	r1, [r3, #32]
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
 80004e4:	f641 5168 	movw	r1, #7528	; 0x1d68
    DWT->MASK0 = 0;
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
    DWT->FUNCTION0 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 80004ea:	6298      	str	r0, [r3, #40]	; 0x28
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
 80004ec:	6319      	str	r1, [r3, #48]	; 0x30
    DWT->MASK1 = 0;
 80004ee:	635a      	str	r2, [r3, #52]	; 0x34
    DWT->FUNCTION1 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 80004f0:	6398      	str	r0, [r3, #56]	; 0x38
    ETM->LAR = 0xC5ACCE55;
 80004f2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80004f6:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ETM_SetupMode();
 80004fa:	6819      	ldr	r1, [r3, #0]
 80004fc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000500:	6019      	str	r1, [r3, #0]
    ETM->CR = ETM_CR_ETMEN; // Enable ETM output port
 8000502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000506:	6019      	str	r1, [r3, #0]
    ETM->TRACEIDR = 1; // Trace bus ID for TPIU
 8000508:	2101      	movs	r1, #1
 800050a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
 800050e:	490a      	ldr	r1, [pc, #40]	; (8000538 <enable_trace+0xc0>)
    ETM->FFLR = 0; // Stall processor when FIFO is full
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
 8000512:	6219      	str	r1, [r3, #32]
    ETM->TESSEICR = 0xf; // set EmbeddedICE watchpoint 0 as a TraceEnable start resource.
 8000514:	210f      	movs	r1, #15
 8000516:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
    ETM->TECR1 = 0; // tracing is unaffected by the trace start/stop logic
 800051a:	625a      	str	r2, [r3, #36]	; 0x24
    ETM_TraceMode();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	bd10      	pop	{r4, pc}
 8000526:	bf00      	nop
 8000528:	e0042000 	.word	0xe0042000
 800052c:	c5acce55 	.word	0xc5acce55
 8000530:	e0040000 	.word	0xe0040000
 8000534:	00010009 	.word	0x00010009
 8000538:	000150a0 	.word	0x000150a0

0800053c <reenable_trace>:
{
 800053c:	b508      	push	{r3, lr}
        enable_trace();
 800053e:	f7ff ff9b 	bl	8000478 <enable_trace>
}
 8000542:	2000      	movs	r0, #0
 8000544:	bd08      	pop	{r3, pc}

08000546 <print>:
{
 8000546:	b510      	push	{r4, lr}
 8000548:	1e44      	subs	r4, r0, #1
    while (*ptr != (char)0)
 800054a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800054e:	b900      	cbnz	r0, 8000552 <print+0xc>
}
 8000550:	bd10      	pop	{r4, pc}
        putch(*ptr);
 8000552:	f000 fad5 	bl	8000b00 <putch>
 8000556:	e7f8      	b.n	800054a <print+0x4>

08000558 <info>:
{
 8000558:	b508      	push	{r3, lr}
        print("ChipWhisperer simpleserial-trace, compiled ");
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <info+0x24>)
 800055c:	f7ff fff3 	bl	8000546 <print>
        print(__DATE__);
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <info+0x28>)
 8000562:	f7ff fff0 	bl	8000546 <print>
        print(", ");
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <info+0x2c>)
 8000568:	f7ff ffed 	bl	8000546 <print>
        print(__TIME__);
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <info+0x30>)
 800056e:	f7ff ffea 	bl	8000546 <print>
        print("\n");
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <info+0x34>)
 8000574:	f7ff ffe7 	bl	8000546 <print>
}
 8000578:	2000      	movs	r0, #0
 800057a:	bd08      	pop	{r3, pc}
 800057c:	08001a44 	.word	0x08001a44
 8000580:	08001a70 	.word	0x08001a70
 8000584:	08001a7c 	.word	0x08001a7c
 8000588:	08001a7f 	.word	0x08001a7f
 800058c:	08001a92 	.word	0x08001a92

08000590 <ITM_Print>:
    if ((ITM->TCR & ITM_TCR_ITMENA_Msk) && (ITM->TER & (1UL << port)))
 8000590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000594:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8000598:	07d2      	lsls	r2, r2, #31
 800059a:	d513      	bpl.n	80005c4 <ITM_Print+0x34>
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	40c3      	lsrs	r3, r0
 80005a2:	07db      	lsls	r3, r3, #31
 80005a4:	d50e      	bpl.n	80005c4 <ITM_Print+0x34>
 80005a6:	0080      	lsls	r0, r0, #2
 80005a8:	3901      	subs	r1, #1
 80005aa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
        while (*p)
 80005ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80005b2:	b913      	cbnz	r3, 80005ba <ITM_Print+0x2a>
        print("ITM alive!\n");
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <ITM_Print+0x38>)
    else {print("Couldn't print!\n");}
 80005b6:	f7ff bfc6 	b.w	8000546 <print>
            while (ITM->PORT[port].u32 == 0);
 80005ba:	6802      	ldr	r2, [r0, #0]
 80005bc:	2a00      	cmp	r2, #0
 80005be:	d0fc      	beq.n	80005ba <ITM_Print+0x2a>
            ITM->PORT[port].u8 = *p++;
 80005c0:	7003      	strb	r3, [r0, #0]
 80005c2:	e7f4      	b.n	80005ae <ITM_Print+0x1e>
    else {print("Couldn't print!\n");}
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <ITM_Print+0x3c>)
 80005c6:	e7f6      	b.n	80005b6 <ITM_Print+0x26>
 80005c8:	08001a88 	.word	0x08001a88
 80005cc:	08001a94 	.word	0x08001a94

080005d0 <test_itm>:
{
 80005d0:	b508      	push	{r3, lr}
    ITM_Print(x[0], "ITM alive!\n");
 80005d2:	4903      	ldr	r1, [pc, #12]	; (80005e0 <test_itm+0x10>)
 80005d4:	7800      	ldrb	r0, [r0, #0]
 80005d6:	f7ff ffdb 	bl	8000590 <ITM_Print>
}
 80005da:	2000      	movs	r0, #0
 80005dc:	bd08      	pop	{r3, pc}
 80005de:	bf00      	nop
 80005e0:	08001a88 	.word	0x08001a88

080005e4 <trigger_high_pcsamp>:
    if (pcsamp_enable == 1)
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <trigger_high_pcsamp+0x18>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
        DWT->CTRL |= (1 << DWT_CTRL_PCSAMPLENA_Pos); // enable PC sampling
 80005ea:	bf01      	itttt	eq
 80005ec:	4a04      	ldreq	r2, [pc, #16]	; (8000600 <trigger_high_pcsamp+0x1c>)
 80005ee:	6813      	ldreq	r3, [r2, #0]
 80005f0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80005f4:	6013      	streq	r3, [r2, #0]
    trigger_high();
 80005f6:	f000 ba5b 	b.w	8000ab0 <trigger_high>
 80005fa:	bf00      	nop
 80005fc:	200003fc 	.word	0x200003fc
 8000600:	e0001000 	.word	0xe0001000

08000604 <trigger_low_pcsamp>:
{
 8000604:	b508      	push	{r3, lr}
    trigger_low();
 8000606:	f000 fa5a 	bl	8000abe <trigger_low>
    DWT->CTRL &= ~(1 << DWT_CTRL_PCSAMPLENA_Pos); // disable PC sampling
 800060a:	4a03      	ldr	r2, [pc, #12]	; (8000618 <trigger_low_pcsamp+0x14>)
 800060c:	6813      	ldr	r3, [r2, #0]
 800060e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	bd08      	pop	{r3, pc}
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000

0800061c <get_pt>:
{
 800061c:	b510      	push	{r4, lr}
 800061e:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
 8000620:	f001 f9c9 	bl	80019b6 <aes_indep_enc_pretrigger>
    trigger_high_pcsamp();
 8000624:	f7ff ffde 	bl	80005e4 <trigger_high_pcsamp>
    aes_indep_enc(pt); /* encrypting the data block */
 8000628:	4620      	mov	r0, r4
 800062a:	f001 f9c2 	bl	80019b2 <aes_indep_enc>
    trigger_low_pcsamp();
 800062e:	f7ff ffe9 	bl	8000604 <trigger_low_pcsamp>
    aes_indep_enc_posttrigger(pt);
 8000632:	4620      	mov	r0, r4
 8000634:	f001 f9c0 	bl	80019b8 <aes_indep_enc_posttrigger>
    simpleserial_put('r', 16, pt);
 8000638:	4622      	mov	r2, r4
 800063a:	2110      	movs	r1, #16
 800063c:	2072      	movs	r0, #114	; 0x72
 800063e:	f000 f8dd 	bl	80007fc <simpleserial_put>
}
 8000642:	2000      	movs	r0, #0
 8000644:	bd10      	pop	{r4, pc}
 8000646:	0000      	movs	r0, r0

08000648 <main>:

int main(void)
{
 8000648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <main+0xa8>)
 800064c:	466a      	mov	r2, sp
 800064e:	f103 0610 	add.w	r6, r3, #16
 8000652:	466d      	mov	r5, sp
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	6859      	ldr	r1, [r3, #4]
 8000658:	4614      	mov	r4, r2
 800065a:	c403      	stmia	r4!, {r0, r1}
 800065c:	3308      	adds	r3, #8
 800065e:	42b3      	cmp	r3, r6
 8000660:	4622      	mov	r2, r4
 8000662:	d1f7      	bne.n	8000654 <main+0xc>

    platform_init();
 8000664:	f000 f984 	bl	8000970 <platform_init>
    init_uart();
 8000668:	f000 f9c2 	bl	80009f0 <init_uart>
    trigger_setup();
 800066c:	f000 f9fc 	bl	8000a68 <trigger_setup>

    aes_indep_init();
 8000670:	f001 f99c 	bl	80019ac <aes_indep_init>
    aes_indep_key(tmp);
 8000674:	4628      	mov	r0, r5
 8000676:	f001 f99a 	bl	80019ae <aes_indep_key>

    simpleserial_init();
 800067a:	f000 f8a7 	bl	80007cc <simpleserial_init>
    simpleserial_addcmd('k', 16, get_key);
 800067e:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <main+0xac>)
 8000680:	2110      	movs	r1, #16
 8000682:	206b      	movs	r0, #107	; 0x6b
 8000684:	f000 f89e 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16, get_pt);
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <main+0xb0>)
 800068a:	2110      	movs	r1, #16
 800068c:	2070      	movs	r0, #112	; 0x70
 800068e:	f000 f899 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('x', 0, reset);
 8000692:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <main+0xb4>)
 8000694:	2100      	movs	r1, #0
 8000696:	2078      	movs	r0, #120	; 0x78
 8000698:	f000 f894 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 800069c:	2301      	movs	r3, #1
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <main+0xb8>)
 80006a0:	2112      	movs	r1, #18
 80006a2:	206d      	movs	r0, #109	; 0x6d
 80006a4:	f000 f878 	bl	8000798 <simpleserial_addcmd_flags>
    simpleserial_addcmd('i', 0, info);
 80006a8:	4a16      	ldr	r2, [pc, #88]	; (8000704 <main+0xbc>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	2069      	movs	r0, #105	; 0x69
 80006ae:	f000 f889 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('e', 0, reenable_trace);
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <main+0xc0>)
 80006b4:	2100      	movs	r1, #0
 80006b6:	2065      	movs	r0, #101	; 0x65
 80006b8:	f000 f884 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('t', 1, test_itm);
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <main+0xc4>)
 80006be:	2101      	movs	r1, #1
 80006c0:	2074      	movs	r0, #116	; 0x74
 80006c2:	f000 f87f 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('s', 5, setreg);
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <main+0xc8>)
 80006c8:	2105      	movs	r1, #5
 80006ca:	2073      	movs	r0, #115	; 0x73
 80006cc:	f000 f87a 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('g', 5, getreg);
 80006d0:	4a10      	ldr	r2, [pc, #64]	; (8000714 <main+0xcc>)
 80006d2:	2105      	movs	r1, #5
 80006d4:	2067      	movs	r0, #103	; 0x67
 80006d6:	f000 f875 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('c', 4, set_pcsample_params);
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <main+0xd0>)
 80006dc:	2104      	movs	r1, #4
 80006de:	2063      	movs	r0, #99	; 0x63
 80006e0:	f000 f870 	bl	80007c4 <simpleserial_addcmd>

    enable_trace();
 80006e4:	f7ff fec8 	bl	8000478 <enable_trace>

    while(1)
        simpleserial_get();
 80006e8:	f000 f8e2 	bl	80008b0 <simpleserial_get>
 80006ec:	e7fc      	b.n	80006e8 <main+0xa0>
 80006ee:	bf00      	nop
 80006f0:	08001a20 	.word	0x08001a20
 80006f4:	0800046f 	.word	0x0800046f
 80006f8:	0800061d 	.word	0x0800061d
 80006fc:	0800035d 	.word	0x0800035d
 8000700:	08000465 	.word	0x08000465
 8000704:	08000559 	.word	0x08000559
 8000708:	0800053d 	.word	0x0800053d
 800070c:	080005d1 	.word	0x080005d1
 8000710:	0800027d 	.word	0x0800027d
 8000714:	08000361 	.word	0x08000361
 8000718:	08000415 	.word	0x08000415

0800071c <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 800071c:	2001      	movs	r0, #1
 800071e:	4770      	bx	lr

08000720 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
 8000724:	4613      	mov	r3, r2
 8000726:	1a9c      	subs	r4, r3, r2
 8000728:	42a0      	cmp	r0, r4
 800072a:	dc01      	bgt.n	8000730 <hex_decode+0x10>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 800072c:	2000      	movs	r0, #0
}
 800072e:	bd70      	pop	{r4, r5, r6, pc}
		char n_lo = ascii_buf[2*i+1];
 8000730:	780d      	ldrb	r5, [r1, #0]
		char n_hi = ascii_buf[2*i];
 8000732:	f811 4c01 	ldrb.w	r4, [r1, #-1]
		if(n_lo >= '0' && n_lo <= '9')
 8000736:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 800073a:	b2f6      	uxtb	r6, r6
 800073c:	2e09      	cmp	r6, #9
 800073e:	d80c      	bhi.n	800075a <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 8000740:	701e      	strb	r6, [r3, #0]
		if(n_hi >= '0' && n_hi <= '9')
 8000742:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8000746:	b2ee      	uxtb	r6, r5
 8000748:	2e09      	cmp	r6, #9
 800074a:	d815      	bhi.n	8000778 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 800074c:	781c      	ldrb	r4, [r3, #0]
 800074e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000752:	701c      	strb	r4, [r3, #0]
 8000754:	3102      	adds	r1, #2
 8000756:	3301      	adds	r3, #1
 8000758:	e7e5      	b.n	8000726 <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 800075a:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 800075e:	2e05      	cmp	r6, #5
 8000760:	d802      	bhi.n	8000768 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 8000762:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8000764:	701d      	strb	r5, [r3, #0]
 8000766:	e7ec      	b.n	8000742 <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8000768:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 800076c:	2e05      	cmp	r6, #5
 800076e:	d901      	bls.n	8000774 <hex_decode+0x54>
			return 1;
 8000770:	2001      	movs	r0, #1
 8000772:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8000774:	3d57      	subs	r5, #87	; 0x57
 8000776:	e7f5      	b.n	8000764 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8000778:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 800077c:	2d05      	cmp	r5, #5
 800077e:	d802      	bhi.n	8000786 <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000780:	f1a4 0537 	sub.w	r5, r4, #55	; 0x37
 8000784:	e7e2      	b.n	800074c <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8000786:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 800078a:	2d05      	cmp	r5, #5
 800078c:	d8f0      	bhi.n	8000770 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 800078e:	781d      	ldrb	r5, [r3, #0]
 8000790:	3c57      	subs	r4, #87	; 0x57
 8000792:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 8000796:	e7dc      	b.n	8000752 <hex_decode+0x32>

08000798 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8000798:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 800079a:	4e09      	ldr	r6, [pc, #36]	; (80007c0 <simpleserial_addcmd_flags+0x28>)
 800079c:	6834      	ldr	r4, [r6, #0]
 800079e:	2c0f      	cmp	r4, #15
 80007a0:	dc0b      	bgt.n	80007ba <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 80007a2:	29bf      	cmp	r1, #191	; 0xbf
 80007a4:	d809      	bhi.n	80007ba <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 80007a6:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	commands[num_commands].flags = fl;
	num_commands++;
 80007aa:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 80007ac:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 80007ae:	742b      	strb	r3, [r5, #16]
	commands[num_commands].len = len;
 80007b0:	60a9      	str	r1, [r5, #8]
	commands[num_commands].fp  = fp;
 80007b2:	60ea      	str	r2, [r5, #12]
	num_commands++;
 80007b4:	6034      	str	r4, [r6, #0]

	return 0;
 80007b6:	2000      	movs	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 80007ba:	2001      	movs	r0, #1
}
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	bf00      	nop
 80007c0:	20000228 	.word	0x20000228

080007c4 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 80007c4:	2300      	movs	r3, #0
 80007c6:	f7ff bfe7 	b.w	8000798 <simpleserial_addcmd_flags>
 80007ca:	0000      	movs	r0, r0

080007cc <simpleserial_init>:
{
 80007cc:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <simpleserial_init+0x24>)
 80007d0:	2100      	movs	r1, #0
 80007d2:	2076      	movs	r0, #118	; 0x76
 80007d4:	f7ff fff6 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <simpleserial_init+0x28>)
 80007da:	2100      	movs	r1, #0
 80007dc:	2077      	movs	r0, #119	; 0x77
 80007de:	f7ff fff1 	bl	80007c4 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <simpleserial_init+0x2c>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	2079      	movs	r0, #121	; 0x79
}
 80007e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 80007ec:	f7ff bfea 	b.w	80007c4 <simpleserial_addcmd>
 80007f0:	0800071d 	.word	0x0800071d
 80007f4:	08000861 	.word	0x08000861
 80007f8:	08000841 	.word	0x08000841

080007fc <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80007fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000800:	4615      	mov	r5, r2
 8000802:	460f      	mov	r7, r1
	// Write first character
	putch(c);
 8000804:	f000 f97c 	bl	8000b00 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000808:	4e0c      	ldr	r6, [pc, #48]	; (800083c <simpleserial_put+0x40>)
	for(int i = 0; i < size; i++)
 800080a:	462c      	mov	r4, r5
 800080c:	1b63      	subs	r3, r4, r5
 800080e:	429f      	cmp	r7, r3
 8000810:	dc04      	bgt.n	800081c <simpleserial_put+0x20>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 8000812:	200a      	movs	r0, #10
}
 8000814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	putch('\n');
 8000818:	f000 b972 	b.w	8000b00 <putch>
 800081c:	46a0      	mov	r8, r4
		putch(hex_lookup[output[i] >> 4 ]);
 800081e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000822:	091b      	lsrs	r3, r3, #4
 8000824:	5cf0      	ldrb	r0, [r6, r3]
 8000826:	f000 f96b 	bl	8000b00 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 800082a:	f898 3000 	ldrb.w	r3, [r8]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	5cf0      	ldrb	r0, [r6, r3]
 8000834:	f000 f964 	bl	8000b00 <putch>
 8000838:	e7e8      	b.n	800080c <simpleserial_put+0x10>
 800083a:	bf00      	nop
 800083c:	08001a30 	.word	0x08001a30

08000840 <ss_num_commands>:
{
 8000840:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <ss_num_commands+0x1c>)
 8000844:	aa02      	add	r2, sp, #8
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f802 3d01 	strb.w	r3, [r2, #-1]!
    simpleserial_put('r', 0x01, &ncmds);
 800084c:	2101      	movs	r1, #1
 800084e:	2072      	movs	r0, #114	; 0x72
 8000850:	f7ff ffd4 	bl	80007fc <simpleserial_put>
}
 8000854:	2000      	movs	r0, #0
 8000856:	b003      	add	sp, #12
 8000858:	f85d fb04 	ldr.w	pc, [sp], #4
 800085c:	20000228 	.word	0x20000228

08000860 <ss_get_commands>:
{
 8000860:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000862:	4812      	ldr	r0, [pc, #72]	; (80008ac <ss_get_commands+0x4c>)
 8000864:	6801      	ldr	r1, [r0, #0]
{
 8000866:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000868:	b2cd      	uxtb	r5, r1
 800086a:	2400      	movs	r4, #0
 800086c:	b2e3      	uxtb	r3, r4
 800086e:	42ab      	cmp	r3, r5
 8000870:	f104 0401 	add.w	r4, r4, #1
 8000874:	db09      	blt.n	800088a <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8000876:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800087a:	466a      	mov	r2, sp
 800087c:	b2c9      	uxtb	r1, r1
 800087e:	2072      	movs	r0, #114	; 0x72
 8000880:	f7ff ffbc 	bl	80007fc <simpleserial_put>
}
 8000884:	2000      	movs	r0, #0
 8000886:	b00c      	add	sp, #48	; 0x30
 8000888:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 800088a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800088e:	ae0c      	add	r6, sp, #48	; 0x30
 8000890:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8000894:	4432      	add	r2, r6
 8000896:	791e      	ldrb	r6, [r3, #4]
 8000898:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 800089c:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 800089e:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 80008a0:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 80008a4:	f802 3c2e 	strb.w	r3, [r2, #-46]
 80008a8:	e7e0      	b.n	800086c <ss_get_commands+0xc>
 80008aa:	bf00      	nop
 80008ac:	20000228 	.word	0x20000228

080008b0 <simpleserial_get>:
{
 80008b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 80008b4:	4c2d      	ldr	r4, [pc, #180]	; (800096c <simpleserial_get+0xbc>)
{
 80008b6:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
	c = getch();
 80008ba:	f000 f907 	bl	8000acc <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 80008be:	6822      	ldr	r2, [r4, #0]
 80008c0:	2300      	movs	r3, #0
		if(commands[cmd].c == c)
 80008c2:	1d21      	adds	r1, r4, #4
	for(cmd = 0; cmd < num_commands; cmd++)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	db04      	blt.n	80008d2 <simpleserial_get+0x22>
	if(cmd == num_commands)
 80008c8:	d107      	bne.n	80008da <simpleserial_get+0x2a>
}
 80008ca:	f50d 7d12 	add.w	sp, sp, #584	; 0x248
 80008ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 80008d2:	011d      	lsls	r5, r3, #4
 80008d4:	5c6d      	ldrb	r5, [r5, r1]
 80008d6:	4285      	cmp	r5, r0
 80008d8:	d13c      	bne.n	8000954 <simpleserial_get+0xa4>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 80008da:	011d      	lsls	r5, r3, #4
 80008dc:	1966      	adds	r6, r4, r5
 80008de:	7c33      	ldrb	r3, [r6, #16]
 80008e0:	07db      	lsls	r3, r3, #31
 80008e2:	d514      	bpl.n	800090e <simpleserial_get+0x5e>
		uint8_t l = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 80008ea:	f000 f8ef 	bl	8000acc <getch>
 80008ee:	f88d 00c8 	strb.w	r0, [sp, #200]	; 0xc8
		buff[1] = getch();
 80008f2:	f000 f8eb 	bl	8000acc <getch>
		if (hex_decode(1, buff, &l))
 80008f6:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 80008f8:	f88d 00c9 	strb.w	r0, [sp, #201]	; 0xc9
		if (hex_decode(1, buff, &l))
 80008fc:	a932      	add	r1, sp, #200	; 0xc8
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff ff0e 	bl	8000720 <hex_decode>
 8000904:	2800      	cmp	r0, #0
 8000906:	d1e0      	bne.n	80008ca <simpleserial_get+0x1a>
		commands[cmd].len = l;
 8000908:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800090c:	60b3      	str	r3, [r6, #8]
	for(cmd = 0; cmd < num_commands; cmd++)
 800090e:	2600      	movs	r6, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000910:	1967      	adds	r7, r4, r5
		ascii_buf[i] = c;
 8000912:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 800091c:	d31c      	bcc.n	8000958 <simpleserial_get+0xa8>
	c = getch();
 800091e:	f000 f8d5 	bl	8000acc <getch>
	if(c != '\n' && c != '\r')
 8000922:	280a      	cmp	r0, #10
 8000924:	d001      	beq.n	800092a <simpleserial_get+0x7a>
 8000926:	280d      	cmp	r0, #13
 8000928:	d1cf      	bne.n	80008ca <simpleserial_get+0x1a>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 800092a:	442c      	add	r4, r5
 800092c:	aa02      	add	r2, sp, #8
 800092e:	68a5      	ldr	r5, [r4, #8]
 8000930:	a932      	add	r1, sp, #200	; 0xc8
 8000932:	4628      	mov	r0, r5
 8000934:	f7ff fef4 	bl	8000720 <hex_decode>
 8000938:	2800      	cmp	r0, #0
 800093a:	d1c6      	bne.n	80008ca <simpleserial_get+0x1a>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800093c:	b2e9      	uxtb	r1, r5
 800093e:	68e3      	ldr	r3, [r4, #12]
 8000940:	a802      	add	r0, sp, #8
 8000942:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 8000944:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8000946:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 800094a:	2101      	movs	r1, #1
 800094c:	207a      	movs	r0, #122	; 0x7a
 800094e:	f7ff ff55 	bl	80007fc <simpleserial_put>
 8000952:	e7ba      	b.n	80008ca <simpleserial_get+0x1a>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000954:	3301      	adds	r3, #1
 8000956:	e7b5      	b.n	80008c4 <simpleserial_get+0x14>
		c = getch();
 8000958:	f000 f8b8 	bl	8000acc <getch>
		if(c == '\n' || c == '\r')
 800095c:	280a      	cmp	r0, #10
 800095e:	d0b4      	beq.n	80008ca <simpleserial_get+0x1a>
 8000960:	280d      	cmp	r0, #13
 8000962:	d0b2      	beq.n	80008ca <simpleserial_get+0x1a>
		ascii_buf[i] = c;
 8000964:	f806 0008 	strb.w	r0, [r6, r8]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000968:	3601      	adds	r6, #1
 800096a:	e7d4      	b.n	8000916 <simpleserial_get+0x66>
 800096c:	20000228 	.word	0x20000228

08000970 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000974:	2400      	movs	r4, #0
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000976:	2603      	movs	r6, #3
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000978:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800097c:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800097e:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000980:	930d      	str	r3, [sp, #52]	; 0x34
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000982:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000984:	9414      	str	r4, [sp, #80]	; 0x50
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000986:	960c      	str	r6, [sp, #48]	; 0x30
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000988:	f000 f8d2 	bl	8000b30 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800098c:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 800098e:	4621      	mov	r1, r4
 8000990:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000992:	9302      	str	r3, [sp, #8]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000994:	9404      	str	r4, [sp, #16]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000996:	9405      	str	r4, [sp, #20]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000998:	9406      	str	r4, [sp, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800099a:	9503      	str	r5, [sp, #12]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 800099c:	f000 fb38 	bl	8001010 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <platform_init+0x78>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
 80009ac:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80009b2:	4c0e      	ldr	r4, [pc, #56]	; (80009ec <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	9b01      	ldr	r3, [sp, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80009b8:	9508      	str	r5, [sp, #32]
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80009ba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80009be:	a907      	add	r1, sp, #28
 80009c0:	4620      	mov	r0, r4
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80009c2:	9307      	str	r3, [sp, #28]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80009c4:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80009c6:	f000 fbc9 	bl	800115c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80009ca:	462a      	mov	r2, r5
 80009cc:	4620      	mov	r0, r4
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	f000 fc85 	bl	80012e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80009d6:	462a      	mov	r2, r5
 80009d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009dc:	4620      	mov	r0, r4
 80009de:	f000 fc7f 	bl	80012e0 <HAL_GPIO_WritePin>
#endif
}
 80009e2:	b016      	add	sp, #88	; 0x58
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800

080009f0 <init_uart>:

void init_uart(void)
{
 80009f0:	b510      	push	{r4, lr}
 80009f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80009f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f8:	9303      	str	r3, [sp, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	9304      	str	r3, [sp, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	9305      	str	r3, [sp, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2303      	movs	r3, #3
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000a04:	4c15      	ldr	r4, [pc, #84]	; (8000a5c <init_uart+0x6c>)
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a06:	9306      	str	r3, [sp, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000a0c:	6963      	ldr	r3, [r4, #20]
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a12:	6163      	str	r3, [r4, #20]
 8000a14:	6963      	ldr	r3, [r4, #20]
 8000a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a1c:	a903      	add	r1, sp, #12
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000a22:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a24:	f000 fb9a 	bl	800115c <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <init_uart+0x70>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <init_uart+0x74>)
 8000a2c:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8000a30:	e880 4008 	stmia.w	r0, {r3, lr}
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000a34:	2300      	movs	r3, #0
 8000a36:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000a38:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000a3a:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000a3c:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000a42:	69a3      	ldr	r3, [r4, #24]
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	61a3      	str	r3, [r4, #24]
 8000a4a:	69a3      	ldr	r3, [r4, #24]
 8000a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000a54:	f000 fd98 	bl	8001588 <HAL_UART_Init>
}
 8000a58:	b008      	add	sp, #32
 8000a5a:	bd10      	pop	{r4, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	20000400 	.word	0x20000400
 8000a64:	40013800 	.word	0x40013800

08000a68 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <trigger_setup+0x44>)
{
 8000a6a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	695a      	ldr	r2, [r3, #20]
 8000a6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	695b      	ldr	r3, [r3, #20]
{
 8000a76:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
  GpioInit.Pin       = GPIO_PIN_12;
 8000a82:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a86:	9302      	str	r3, [sp, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000a88:	2500      	movs	r5, #0
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a8a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a8c:	a901      	add	r1, sp, #4
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a92:	9304      	str	r3, [sp, #16]
  GpioInit.Pin       = GPIO_PIN_12;
 8000a94:	9401      	str	r4, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
 8000a96:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a98:	f000 fb60 	bl	800115c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000a9c:	462a      	mov	r2, r5
 8000a9e:	4621      	mov	r1, r4
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fc1c 	bl	80012e0 <HAL_GPIO_WritePin>
}
 8000aa8:	b007      	add	sp, #28
 8000aaa:	bd30      	pop	{r4, r5, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 bc11 	b.w	80012e0 <HAL_GPIO_WritePin>

08000abe <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f000 bc0a 	b.w	80012e0 <HAL_GPIO_WritePin>

08000acc <getch>:
}

char getch(void)
{
 8000acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000ace:	4d0a      	ldr	r5, [pc, #40]	; (8000af8 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000ad2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f10d 0107 	add.w	r1, sp, #7
 8000adc:	4628      	mov	r0, r5
 8000ade:	f000 fdd5 	bl	800168c <HAL_UART_Receive>
 8000ae2:	b918      	cbnz	r0, 8000aec <getch+0x20>
  //putch(d);
  return d;
}
 8000ae4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ae8:	b003      	add	sp, #12
 8000aea:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8000aec:	6a23      	ldr	r3, [r4, #32]
 8000aee:	f043 0308 	orr.w	r3, r3, #8
 8000af2:	6223      	str	r3, [r4, #32]
 8000af4:	e7ed      	b.n	8000ad2 <getch+0x6>
 8000af6:	bf00      	nop
 8000af8:	20000400 	.word	0x20000400
 8000afc:	40013800 	.word	0x40013800

08000b00 <putch>:

void putch(char c)
{
 8000b00:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 8000b02:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b04:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000b08:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <putch+0x1c>)
 8000b10:	f000 fd65 	bl	80015de <HAL_UART_Transmit>
}
 8000b14:	b003      	add	sp, #12
 8000b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b1a:	bf00      	nop
 8000b1c:	20000400 	.word	0x20000400

08000b20 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <HAL_GetTick+0xc>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	1c42      	adds	r2, r0, #1
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	2000032c 	.word	0x2000032c

08000b30 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b30:	6803      	ldr	r3, [r0, #0]
{
 8000b32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b36:	07d9      	lsls	r1, r3, #31
{
 8000b38:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3a:	d411      	bmi.n	8000b60 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	079a      	lsls	r2, r3, #30
 8000b40:	f100 8086 	bmi.w	8000c50 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	071e      	lsls	r6, r3, #28
 8000b48:	f100 80f4 	bmi.w	8000d34 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	075d      	lsls	r5, r3, #29
 8000b50:	f100 813b 	bmi.w	8000dca <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b54:	69e2      	ldr	r2, [r4, #28]
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	f040 81cf 	bne.w	8000efa <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e021      	b.n	8000ba4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b60:	49b7      	ldr	r1, [pc, #732]	; (8000e40 <HAL_RCC_OscConfig+0x310>)
 8000b62:	684b      	ldr	r3, [r1, #4]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d007      	beq.n	8000b7c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6c:	684b      	ldr	r3, [r1, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d119      	bne.n	8000baa <HAL_RCC_OscConfig+0x7a>
 8000b76:	684b      	ldr	r3, [r1, #4]
 8000b78:	03db      	lsls	r3, r3, #15
 8000b7a:	d516      	bpl.n	8000baa <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b80:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b84:	6809      	ldr	r1, [r1, #0]
 8000b86:	fa93 f3a3 	rbit	r3, r3
 8000b8a:	fab3 f383 	clz	r3, r3
 8000b8e:	f003 031f 	and.w	r3, r3, #31
 8000b92:	2201      	movs	r2, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	420b      	tst	r3, r1
 8000b9a:	d0cf      	beq.n	8000b3c <HAL_RCC_OscConfig+0xc>
 8000b9c:	6863      	ldr	r3, [r4, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1cc      	bne.n	8000b3c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ba2:	2001      	movs	r0, #1
}
 8000ba4:	b003      	add	sp, #12
 8000ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000baa:	6862      	ldr	r2, [r4, #4]
 8000bac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000bb0:	d124      	bne.n	8000bfc <HAL_RCC_OscConfig+0xcc>
 8000bb2:	680b      	ldr	r3, [r1, #0]
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bba:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000bbc:	68a0      	ldr	r0, [r4, #8]
 8000bbe:	f023 030f 	bic.w	r3, r3, #15
 8000bc2:	4303      	orrs	r3, r0
 8000bc4:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc6:	b34a      	cbz	r2, 8000c1c <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000bc8:	f7ff ffaa 	bl	8000b20 <HAL_GetTick>
 8000bcc:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000bd0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	2601      	movs	r6, #1
 8000bd4:	fa95 f3a5 	rbit	r3, r5
 8000bd8:	680a      	ldr	r2, [r1, #0]
 8000bda:	fa95 f3a5 	rbit	r3, r5
 8000bde:	fab3 f383 	clz	r3, r3
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	fa06 f303 	lsl.w	r3, r6, r3
 8000bea:	4213      	tst	r3, r2
 8000bec:	d1a6      	bne.n	8000b3c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bee:	f7ff ff97 	bl	8000b20 <HAL_GetTick>
 8000bf2:	1bc0      	subs	r0, r0, r7
 8000bf4:	2864      	cmp	r0, #100	; 0x64
 8000bf6:	d9ed      	bls.n	8000bd4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	e7d3      	b.n	8000ba4 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfc:	680b      	ldr	r3, [r1, #0]
 8000bfe:	b932      	cbnz	r2, 8000c0e <HAL_RCC_OscConfig+0xde>
 8000c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c04:	600b      	str	r3, [r1, #0]
 8000c06:	680b      	ldr	r3, [r1, #0]
 8000c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0c:	e7d4      	b.n	8000bb8 <HAL_RCC_OscConfig+0x88>
 8000c0e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000c12:	d1f5      	bne.n	8000c00 <HAL_RCC_OscConfig+0xd0>
 8000c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c18:	600b      	str	r3, [r1, #0]
 8000c1a:	e7ca      	b.n	8000bb2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000c1c:	f7ff ff80 	bl	8000b20 <HAL_GetTick>
 8000c20:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000c24:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c26:	2601      	movs	r6, #1
 8000c28:	fa95 f3a5 	rbit	r3, r5
 8000c2c:	680a      	ldr	r2, [r1, #0]
 8000c2e:	fa95 f3a5 	rbit	r3, r5
 8000c32:	fab3 f383 	clz	r3, r3
 8000c36:	f003 031f 	and.w	r3, r3, #31
 8000c3a:	fa06 f303 	lsl.w	r3, r6, r3
 8000c3e:	4213      	tst	r3, r2
 8000c40:	f43f af7c 	beq.w	8000b3c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff ff6c 	bl	8000b20 <HAL_GetTick>
 8000c48:	1bc0      	subs	r0, r0, r7
 8000c4a:	2864      	cmp	r0, #100	; 0x64
 8000c4c:	d9ec      	bls.n	8000c28 <HAL_RCC_OscConfig+0xf8>
 8000c4e:	e7d3      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c50:	497b      	ldr	r1, [pc, #492]	; (8000e40 <HAL_RCC_OscConfig+0x310>)
 8000c52:	684b      	ldr	r3, [r1, #4]
 8000c54:	f013 0f0c 	tst.w	r3, #12
 8000c58:	d007      	beq.n	8000c6a <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c5a:	684b      	ldr	r3, [r1, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d121      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x178>
 8000c64:	684b      	ldr	r3, [r1, #4]
 8000c66:	03df      	lsls	r7, r3, #15
 8000c68:	d41e      	bmi.n	8000ca8 <HAL_RCC_OscConfig+0x178>
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c70:	6808      	ldr	r0, [r1, #0]
 8000c72:	fa93 f3a3 	rbit	r3, r3
 8000c76:	fab3 f383 	clz	r3, r3
 8000c7a:	f003 031f 	and.w	r3, r3, #31
 8000c7e:	2201      	movs	r2, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	4203      	tst	r3, r0
 8000c86:	d002      	beq.n	8000c8e <HAL_RCC_OscConfig+0x15e>
 8000c88:	6923      	ldr	r3, [r4, #16]
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d189      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8e:	6808      	ldr	r0, [r1, #0]
 8000c90:	23f8      	movs	r3, #248	; 0xf8
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	fab3 f283 	clz	r2, r3
 8000c9a:	6963      	ldr	r3, [r4, #20]
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
 8000ca6:	e74d      	b.n	8000b44 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca8:	6922      	ldr	r2, [r4, #16]
 8000caa:	2501      	movs	r5, #1
 8000cac:	b302      	cbz	r2, 8000cf0 <HAL_RCC_OscConfig+0x1c0>
 8000cae:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000cb2:	fab3 f383 	clz	r3, r3
 8000cb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	2602      	movs	r6, #2
 8000cc2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000cc4:	f7ff ff2c 	bl	8000b20 <HAL_GetTick>
 8000cc8:	4607      	mov	r7, r0
 8000cca:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	680a      	ldr	r2, [r1, #0]
 8000cd0:	fa96 f3a6 	rbit	r3, r6
 8000cd4:	fab3 f383 	clz	r3, r3
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	fa05 f303 	lsl.w	r3, r5, r3
 8000ce0:	4213      	tst	r3, r2
 8000ce2:	d1d4      	bne.n	8000c8e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff ff1c 	bl	8000b20 <HAL_GetTick>
 8000ce8:	1bc0      	subs	r0, r0, r7
 8000cea:	2802      	cmp	r0, #2
 8000cec:	d9ed      	bls.n	8000cca <HAL_RCC_OscConfig+0x19a>
 8000cee:	e783      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
 8000cf0:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000cf4:	fab3 f383 	clz	r3, r3
 8000cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	2602      	movs	r6, #2
 8000d04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d06:	f7ff ff0b 	bl	8000b20 <HAL_GetTick>
 8000d0a:	4607      	mov	r7, r0
 8000d0c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d10:	680a      	ldr	r2, [r1, #0]
 8000d12:	fa96 f3a6 	rbit	r3, r6
 8000d16:	fab3 f383 	clz	r3, r3
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	fa05 f303 	lsl.w	r3, r5, r3
 8000d22:	4213      	tst	r3, r2
 8000d24:	f43f af0e 	beq.w	8000b44 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d28:	f7ff fefa 	bl	8000b20 <HAL_GetTick>
 8000d2c:	1bc0      	subs	r0, r0, r7
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9ec      	bls.n	8000d0c <HAL_RCC_OscConfig+0x1dc>
 8000d32:	e761      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d34:	69a2      	ldr	r2, [r4, #24]
 8000d36:	4d42      	ldr	r5, [pc, #264]	; (8000e40 <HAL_RCC_OscConfig+0x310>)
 8000d38:	4842      	ldr	r0, [pc, #264]	; (8000e44 <HAL_RCC_OscConfig+0x314>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	b312      	cbz	r2, 8000d84 <HAL_RCC_OscConfig+0x254>
 8000d3e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8000d42:	fab3 f383 	clz	r3, r3
 8000d46:	4403      	add	r3, r0
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	2602      	movs	r6, #2
 8000d4c:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fee7 	bl	8000b20 <HAL_GetTick>
 8000d52:	4607      	mov	r7, r0
 8000d54:	fa96 f3a6 	rbit	r3, r6
 8000d58:	fa96 f3a6 	rbit	r3, r6
 8000d5c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d60:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000d62:	fa96 f3a6 	rbit	r3, r6
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	4213      	tst	r3, r2
 8000d74:	f47f aeea 	bne.w	8000b4c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fed2 	bl	8000b20 <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9e8      	bls.n	8000d54 <HAL_RCC_OscConfig+0x224>
 8000d82:	e739      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
 8000d84:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	4403      	add	r3, r0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	2602      	movs	r6, #2
 8000d92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d94:	f7ff fec4 	bl	8000b20 <HAL_GetTick>
 8000d98:	4607      	mov	r7, r0
 8000d9a:	fa96 f3a6 	rbit	r3, r6
 8000d9e:	fa96 f3a6 	rbit	r3, r6
 8000da2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000da8:	fa96 f3a6 	rbit	r3, r6
 8000dac:	fab3 f383 	clz	r3, r3
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	4213      	tst	r3, r2
 8000dba:	f43f aec7 	beq.w	8000b4c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dbe:	f7ff feaf 	bl	8000b20 <HAL_GetTick>
 8000dc2:	1bc0      	subs	r0, r0, r7
 8000dc4:	2802      	cmp	r0, #2
 8000dc6:	d9e8      	bls.n	8000d9a <HAL_RCC_OscConfig+0x26a>
 8000dc8:	e716      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dca:	491d      	ldr	r1, [pc, #116]	; (8000e40 <HAL_RCC_OscConfig+0x310>)
 8000dcc:	69cb      	ldr	r3, [r1, #28]
 8000dce:	00d8      	lsls	r0, r3, #3
 8000dd0:	d433      	bmi.n	8000e3a <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	69cb      	ldr	r3, [r1, #28]
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	61cb      	str	r3, [r1, #28]
 8000dda:	69cb      	ldr	r3, [r1, #28]
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000de4:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de6:	4e18      	ldr	r6, [pc, #96]	; (8000e48 <HAL_RCC_OscConfig+0x318>)
 8000de8:	6833      	ldr	r3, [r6, #0]
 8000dea:	05da      	lsls	r2, r3, #23
 8000dec:	d52e      	bpl.n	8000e4c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dee:	68e3      	ldr	r3, [r4, #12]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d13b      	bne.n	8000e6c <HAL_RCC_OscConfig+0x33c>
 8000df4:	6a0b      	ldr	r3, [r1, #32]
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fe90 	bl	8000b20 <HAL_GetTick>
 8000e00:	2602      	movs	r6, #2
 8000e02:	4681      	mov	r9, r0
 8000e04:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e06:	2701      	movs	r7, #1
 8000e08:	fa96 f3a6 	rbit	r3, r6
 8000e0c:	fa96 f3a6 	rbit	r3, r6
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d06a      	beq.n	8000eea <HAL_RCC_OscConfig+0x3ba>
 8000e14:	6a0a      	ldr	r2, [r1, #32]
 8000e16:	fa98 f3a8 	rbit	r3, r8
 8000e1a:	fab3 f383 	clz	r3, r3
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	fa07 f303 	lsl.w	r3, r7, r3
 8000e26:	4213      	tst	r3, r2
 8000e28:	d056      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	f43f ae92 	beq.w	8000b54 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e30:	69cb      	ldr	r3, [r1, #28]
 8000e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e36:	61cb      	str	r3, [r1, #28]
 8000e38:	e68c      	b.n	8000b54 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	e7d3      	b.n	8000de6 <HAL_RCC_OscConfig+0x2b6>
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000
 8000e44:	10908120 	.word	0x10908120
 8000e48:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4c:	6833      	ldr	r3, [r6, #0]
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e52:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e54:	f7ff fe64 	bl	8000b20 <HAL_GetTick>
 8000e58:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	6833      	ldr	r3, [r6, #0]
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	d4c6      	bmi.n	8000dee <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e60:	f7ff fe5e 	bl	8000b20 <HAL_GetTick>
 8000e64:	1bc0      	subs	r0, r0, r7
 8000e66:	2864      	cmp	r0, #100	; 0x64
 8000e68:	d9f7      	bls.n	8000e5a <HAL_RCC_OscConfig+0x32a>
 8000e6a:	e6c5      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6c:	bb33      	cbnz	r3, 8000ebc <HAL_RCC_OscConfig+0x38c>
 8000e6e:	6a0b      	ldr	r3, [r1, #32]
 8000e70:	f023 0301 	bic.w	r3, r3, #1
 8000e74:	620b      	str	r3, [r1, #32]
 8000e76:	6a0b      	ldr	r3, [r1, #32]
 8000e78:	f023 0304 	bic.w	r3, r3, #4
 8000e7c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fe4f 	bl	8000b20 <HAL_GetTick>
 8000e82:	2602      	movs	r6, #2
 8000e84:	4681      	mov	r9, r0
 8000e86:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e88:	2701      	movs	r7, #1
 8000e8a:	fa96 f3a6 	rbit	r3, r6
 8000e8e:	fa96 f3a6 	rbit	r3, r6
 8000e92:	b373      	cbz	r3, 8000ef2 <HAL_RCC_OscConfig+0x3c2>
 8000e94:	6a0a      	ldr	r2, [r1, #32]
 8000e96:	fa98 f3a8 	rbit	r3, r8
 8000e9a:	fab3 f383 	clz	r3, r3
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	fa07 f303 	lsl.w	r3, r7, r3
 8000ea6:	4213      	tst	r3, r2
 8000ea8:	d0bf      	beq.n	8000e2a <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fe39 	bl	8000b20 <HAL_GetTick>
 8000eae:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eb2:	eba0 0009 	sub.w	r0, r0, r9
 8000eb6:	4298      	cmp	r0, r3
 8000eb8:	d9e7      	bls.n	8000e8a <HAL_RCC_OscConfig+0x35a>
 8000eba:	e69d      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	6a0b      	ldr	r3, [r1, #32]
 8000ec0:	d103      	bne.n	8000eca <HAL_RCC_OscConfig+0x39a>
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	620b      	str	r3, [r1, #32]
 8000ec8:	e794      	b.n	8000df4 <HAL_RCC_OscConfig+0x2c4>
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	620b      	str	r3, [r1, #32]
 8000ed0:	6a0b      	ldr	r3, [r1, #32]
 8000ed2:	f023 0304 	bic.w	r3, r3, #4
 8000ed6:	e790      	b.n	8000dfa <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fe22 	bl	8000b20 <HAL_GetTick>
 8000edc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ee0:	eba0 0009 	sub.w	r0, r0, r9
 8000ee4:	4298      	cmp	r0, r3
 8000ee6:	d98f      	bls.n	8000e08 <HAL_RCC_OscConfig+0x2d8>
 8000ee8:	e686      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
 8000eea:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eee:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000ef0:	e791      	b.n	8000e16 <HAL_RCC_OscConfig+0x2e6>
 8000ef2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000ef8:	e7cd      	b.n	8000e96 <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000efa:	4943      	ldr	r1, [pc, #268]	; (8001008 <HAL_RCC_OscConfig+0x4d8>)
 8000efc:	684b      	ldr	r3, [r1, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	f43f ae4d 	beq.w	8000ba2 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f08:	2a02      	cmp	r2, #2
 8000f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f0e:	d154      	bne.n	8000fba <HAL_RCC_OscConfig+0x48a>
 8000f10:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f14:	fab3 f383 	clz	r3, r3
 8000f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f26:	f7ff fdfb 	bl	8000b20 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800100c <HAL_RCC_OscConfig+0x4dc>
        tickstart = HAL_GetTick();
 8000f2e:	4607      	mov	r7, r0
 8000f30:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f34:	2501      	movs	r5, #1
 8000f36:	fa96 f3a6 	rbit	r3, r6
 8000f3a:	680a      	ldr	r2, [r1, #0]
 8000f3c:	fa96 f3a6 	rbit	r3, r6
 8000f40:	fab3 f383 	clz	r3, r3
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	fa05 f303 	lsl.w	r3, r5, r3
 8000f4c:	4213      	tst	r3, r2
 8000f4e:	d12e      	bne.n	8000fae <HAL_RCC_OscConfig+0x47e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f50:	684a      	ldr	r2, [r1, #4]
 8000f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f54:	6a20      	ldr	r0, [r4, #32]
 8000f56:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
 8000f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f64:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f74:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f76:	4f25      	ldr	r7, [pc, #148]	; (800100c <HAL_RCC_OscConfig+0x4dc>)
        __HAL_RCC_PLL_ENABLE();
 8000f78:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fdd1 	bl	8000b20 <HAL_GetTick>
 8000f7e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000f82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f84:	2501      	movs	r5, #1
 8000f86:	fa94 f3a4 	rbit	r3, r4
 8000f8a:	680a      	ldr	r2, [r1, #0]
 8000f8c:	fa94 f3a4 	rbit	r3, r4
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa05 f303 	lsl.w	r3, r5, r3
 8000f9c:	4213      	tst	r3, r2
 8000f9e:	f47f addd 	bne.w	8000b5c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fdbd 	bl	8000b20 <HAL_GetTick>
 8000fa6:	1b80      	subs	r0, r0, r6
 8000fa8:	42b8      	cmp	r0, r7
 8000faa:	d9ec      	bls.n	8000f86 <HAL_RCC_OscConfig+0x456>
 8000fac:	e624      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fdb7 	bl	8000b20 <HAL_GetTick>
 8000fb2:	1bc0      	subs	r0, r0, r7
 8000fb4:	4540      	cmp	r0, r8
 8000fb6:	d9be      	bls.n	8000f36 <HAL_RCC_OscConfig+0x406>
 8000fb8:	e61e      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
 8000fba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fda6 	bl	8000b20 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd4:	4f0d      	ldr	r7, [pc, #52]	; (800100c <HAL_RCC_OscConfig+0x4dc>)
        tickstart = HAL_GetTick();
 8000fd6:	4606      	mov	r6, r0
 8000fd8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	2501      	movs	r5, #1
 8000fde:	fa94 f3a4 	rbit	r3, r4
 8000fe2:	680a      	ldr	r2, [r1, #0]
 8000fe4:	fa94 f3a4 	rbit	r3, r4
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	fa05 f303 	lsl.w	r3, r5, r3
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	f43f adb1 	beq.w	8000b5c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fd91 	bl	8000b20 <HAL_GetTick>
 8000ffe:	1b80      	subs	r0, r0, r6
 8001000:	42b8      	cmp	r0, r7
 8001002:	d9ec      	bls.n	8000fde <HAL_RCC_OscConfig+0x4ae>
 8001004:	e5f8      	b.n	8000bf8 <HAL_RCC_OscConfig+0xc8>
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	00030d40 	.word	0x00030d40

08001010 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <HAL_RCC_ClockConfig+0x144>)
{
 8001012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001014:	6813      	ldr	r3, [r2, #0]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	428b      	cmp	r3, r1
{
 800101c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800101e:	d31b      	bcc.n	8001058 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001020:	682a      	ldr	r2, [r5, #0]
 8001022:	0790      	lsls	r0, r2, #30
 8001024:	d424      	bmi.n	8001070 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001026:	07d2      	lsls	r2, r2, #31
 8001028:	d42a      	bmi.n	8001080 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800102a:	4a4a      	ldr	r2, [pc, #296]	; (8001154 <HAL_RCC_ClockConfig+0x144>)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	4299      	cmp	r1, r3
 8001034:	d37a      	bcc.n	800112c <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001036:	6828      	ldr	r0, [r5, #0]
 8001038:	0743      	lsls	r3, r0, #29
 800103a:	f100 8082 	bmi.w	8001142 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103e:	f010 0008 	ands.w	r0, r0, #8
 8001042:	d008      	beq.n	8001056 <HAL_RCC_ClockConfig+0x46>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001044:	4a44      	ldr	r2, [pc, #272]	; (8001158 <HAL_RCC_ClockConfig+0x148>)
 8001046:	6929      	ldr	r1, [r5, #16]
 8001048:	6853      	ldr	r3, [r2, #4]
 800104a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800104e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001052:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001054:	2000      	movs	r0, #0
}
 8001056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	f023 0307 	bic.w	r3, r3, #7
 800105e:	430b      	orrs	r3, r1
 8001060:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	4299      	cmp	r1, r3
 800106a:	d0d9      	beq.n	8001020 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 800106c:	2001      	movs	r0, #1
 800106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001070:	4839      	ldr	r0, [pc, #228]	; (8001158 <HAL_RCC_ClockConfig+0x148>)
 8001072:	68ac      	ldr	r4, [r5, #8]
 8001074:	6843      	ldr	r3, [r0, #4]
 8001076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800107a:	4323      	orrs	r3, r4
 800107c:	6043      	str	r3, [r0, #4]
 800107e:	e7d2      	b.n	8001026 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001080:	686a      	ldr	r2, [r5, #4]
 8001082:	4c35      	ldr	r4, [pc, #212]	; (8001158 <HAL_RCC_ClockConfig+0x148>)
 8001084:	2a01      	cmp	r2, #1
 8001086:	d127      	bne.n	80010d8 <HAL_RCC_ClockConfig+0xc8>
 8001088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	d0e2      	beq.n	800106c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a6:	6863      	ldr	r3, [r4, #4]
 80010a8:	f023 0303 	bic.w	r3, r3, #3
 80010ac:	431a      	orrs	r2, r3
 80010ae:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80010b0:	f7ff fd36 	bl	8000b20 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b4:	686b      	ldr	r3, [r5, #4]
 80010b6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80010b8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ba:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010be:	d11e      	bne.n	80010fe <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c0:	6863      	ldr	r3, [r4, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d0af      	beq.n	800102a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ca:	f7ff fd29 	bl	8000b20 <HAL_GetTick>
 80010ce:	1b80      	subs	r0, r0, r6
 80010d0:	42b8      	cmp	r0, r7
 80010d2:	d9f5      	bls.n	80010c0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
 80010d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d8:	2a02      	cmp	r2, #2
 80010da:	bf0c      	ite	eq
 80010dc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80010e0:	2302      	movne	r3, #2
 80010e2:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e6:	6826      	ldr	r6, [r4, #0]
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f303 	lsl.w	r3, r0, r3
 80010fa:	4233      	tst	r3, r6
 80010fc:	e7d2      	b.n	80010a4 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d10f      	bne.n	8001122 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001102:	6863      	ldr	r3, [r4, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d08e      	beq.n	800102a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110c:	f7ff fd08 	bl	8000b20 <HAL_GetTick>
 8001110:	1b80      	subs	r0, r0, r6
 8001112:	42b8      	cmp	r0, r7
 8001114:	d9f5      	bls.n	8001102 <HAL_RCC_ClockConfig+0xf2>
 8001116:	e7dd      	b.n	80010d4 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff fd02 	bl	8000b20 <HAL_GetTick>
 800111c:	1b80      	subs	r0, r0, r6
 800111e:	42b8      	cmp	r0, r7
 8001120:	d8d8      	bhi.n	80010d4 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	f013 0f0c 	tst.w	r3, #12
 8001128:	d1f6      	bne.n	8001118 <HAL_RCC_ClockConfig+0x108>
 800112a:	e77e      	b.n	800102a <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	f023 0307 	bic.w	r3, r3, #7
 8001132:	430b      	orrs	r3, r1
 8001134:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001136:	6813      	ldr	r3, [r2, #0]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	4299      	cmp	r1, r3
 800113e:	d195      	bne.n	800106c <HAL_RCC_ClockConfig+0x5c>
 8001140:	e779      	b.n	8001036 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_RCC_ClockConfig+0x148>)
 8001144:	68e9      	ldr	r1, [r5, #12]
 8001146:	6853      	ldr	r3, [r2, #4]
 8001148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800114c:	430b      	orrs	r3, r1
 800114e:	6053      	str	r3, [r2, #4]
 8001150:	e775      	b.n	800103e <HAL_RCC_ClockConfig+0x2e>
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001160:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001164:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80012dc <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001168:	4a5a      	ldr	r2, [pc, #360]	; (80012d4 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 800116a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800116c:	fa38 f403 	lsrs.w	r4, r8, r3
 8001170:	d102      	bne.n	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8001172:	b003      	add	sp, #12
 8001174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001178:	2401      	movs	r4, #1
 800117a:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800117e:	ea18 050a 	ands.w	r5, r8, sl
 8001182:	f000 809c 	beq.w	80012be <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001186:	684c      	ldr	r4, [r1, #4]
 8001188:	f024 0b10 	bic.w	fp, r4, #16
 800118c:	f1bb 0f02 	cmp.w	fp, #2
 8001190:	d114      	bne.n	80011bc <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001192:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001196:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800119e:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011a6:	270f      	movs	r7, #15
 80011a8:	fa07 f70c 	lsl.w	r7, r7, ip
 80011ac:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	690e      	ldr	r6, [r1, #16]
 80011b2:	fa06 f60c 	lsl.w	r6, r6, ip
 80011b6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80011b8:	f8ce 6020 	str.w	r6, [lr, #32]
 80011bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c0:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80011c2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c4:	fa07 f70c 	lsl.w	r7, r7, ip
 80011c8:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ca:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011dc:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80011e0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e2:	d811      	bhi.n	8001208 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80011e4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e6:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	68ce      	ldr	r6, [r1, #12]
 80011ec:	fa06 fe0c 	lsl.w	lr, r6, ip
 80011f0:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80011f4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80011f6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011fc:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001200:	409e      	lsls	r6, r3
 8001202:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001206:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001208:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120c:	688e      	ldr	r6, [r1, #8]
 800120e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001212:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001214:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001216:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001218:	d551      	bpl.n	80012be <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800121e:	f046 0601 	orr.w	r6, r6, #1
 8001222:	f8c9 6018 	str.w	r6, [r9, #24]
 8001226:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800122a:	f023 0703 	bic.w	r7, r3, #3
 800122e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001232:	f006 0601 	and.w	r6, r6, #1
 8001236:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800123a:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800123c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001242:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001244:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001248:	f04f 0e0f 	mov.w	lr, #15
 800124c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001250:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001254:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001258:	d033      	beq.n	80012c2 <HAL_GPIO_Init+0x166>
 800125a:	4e1f      	ldr	r6, [pc, #124]	; (80012d8 <HAL_GPIO_Init+0x17c>)
 800125c:	42b0      	cmp	r0, r6
 800125e:	d032      	beq.n	80012c6 <HAL_GPIO_Init+0x16a>
 8001260:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001264:	42b0      	cmp	r0, r6
 8001266:	d030      	beq.n	80012ca <HAL_GPIO_Init+0x16e>
 8001268:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800126c:	42b0      	cmp	r0, r6
 800126e:	d02e      	beq.n	80012ce <HAL_GPIO_Init+0x172>
 8001270:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001274:	42b0      	cmp	r0, r6
 8001276:	bf14      	ite	ne
 8001278:	2605      	movne	r6, #5
 800127a:	2604      	moveq	r6, #4
 800127c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001280:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001284:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001286:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001288:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800128e:	bf0c      	ite	eq
 8001290:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001292:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001294:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001296:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001298:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800129c:	bf0c      	ite	eq
 800129e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80012a0:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80012a2:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80012a4:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012aa:	bf0c      	ite	eq
 80012ac:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80012ae:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80012b0:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80012b2:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80012b6:	bf54      	ite	pl
 80012b8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80012ba:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80012bc:	60d6      	str	r6, [r2, #12]
    position++;
 80012be:	3301      	adds	r3, #1
 80012c0:	e754      	b.n	800116c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c2:	2600      	movs	r6, #0
 80012c4:	e7da      	b.n	800127c <HAL_GPIO_Init+0x120>
 80012c6:	2601      	movs	r6, #1
 80012c8:	e7d8      	b.n	800127c <HAL_GPIO_Init+0x120>
 80012ca:	2602      	movs	r6, #2
 80012cc:	e7d6      	b.n	800127c <HAL_GPIO_Init+0x120>
 80012ce:	2603      	movs	r6, #3
 80012d0:	e7d4      	b.n	800127c <HAL_GPIO_Init+0x120>
 80012d2:	bf00      	nop
 80012d4:	40010400 	.word	0x40010400
 80012d8:	48000400 	.word	0x48000400
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	b10a      	cbz	r2, 80012e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	6181      	str	r1, [r0, #24]
 80012e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e6:	6281      	str	r1, [r0, #40]	; 0x28
 80012e8:	4770      	bx	lr
 80012ea:	0000      	movs	r0, r0

080012ec <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012ec:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012ee:	6881      	ldr	r1, [r0, #8]
 80012f0:	69c3      	ldr	r3, [r0, #28]
{
 80012f2:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012f4:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012f6:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012f8:	4329      	orrs	r1, r5
 80012fa:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012fc:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001300:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001302:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001306:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001308:	4321      	orrs	r1, r4
 800130a:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800130c:	6851      	ldr	r1, [r2, #4]
 800130e:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001310:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001312:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001316:	4321      	orrs	r1, r4
 8001318:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800131a:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800131c:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800131e:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001322:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001324:	4321      	orrs	r1, r4
 8001326:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001328:	4962      	ldr	r1, [pc, #392]	; (80014b4 <UART_SetConfig+0x1c8>)
 800132a:	428a      	cmp	r2, r1
 800132c:	d112      	bne.n	8001354 <UART_SetConfig+0x68>
 800132e:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8001332:	4c61      	ldr	r4, [pc, #388]	; (80014b8 <UART_SetConfig+0x1cc>)
 8001334:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001336:	f001 0103 	and.w	r1, r1, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800133a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800133e:	5c61      	ldrb	r1, [r4, r1]
 8001340:	d06e      	beq.n	8001420 <UART_SetConfig+0x134>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001342:	2908      	cmp	r1, #8
 8001344:	d819      	bhi.n	800137a <UART_SetConfig+0x8e>
 8001346:	e8df f001 	tbb	[pc, r1]
 800134a:	8bb0      	.short	0x8bb0
 800134c:	18b01896 	.word	0x18b01896
 8001350:	1818      	.short	0x1818
 8001352:	a0          	.byte	0xa0
 8001353:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001354:	4959      	ldr	r1, [pc, #356]	; (80014bc <UART_SetConfig+0x1d0>)
 8001356:	428a      	cmp	r2, r1
 8001358:	d12c      	bne.n	80013b4 <UART_SetConfig+0xc8>
 800135a:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 800135e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001360:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8001364:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001368:	f000 809c 	beq.w	80014a4 <UART_SetConfig+0x1b8>
 800136c:	d807      	bhi.n	800137e <UART_SetConfig+0x92>
 800136e:	2900      	cmp	r1, #0
 8001370:	f000 8098 	beq.w	80014a4 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001378:	d06f      	beq.n	800145a <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800137a:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800137c:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800137e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001382:	f000 8087 	beq.w	8001494 <UART_SetConfig+0x1a8>
 8001386:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800138a:	d1f3      	bne.n	8001374 <UART_SetConfig+0x88>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800138c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001390:	d171      	bne.n	8001476 <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001392:	6841      	ldr	r1, [r0, #4]
 8001394:	084b      	lsrs	r3, r1, #1
 8001396:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800139a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 80013a2:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013a4:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80013a6:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80013aa:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80013ae:	430b      	orrs	r3, r1
 80013b0:	60d3      	str	r3, [r2, #12]
 80013b2:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013b4:	4942      	ldr	r1, [pc, #264]	; (80014c0 <UART_SetConfig+0x1d4>)
 80013b6:	428a      	cmp	r2, r1
 80013b8:	d10e      	bne.n	80013d8 <UART_SetConfig+0xec>
 80013ba:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 80013be:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80013c0:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80013c4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80013c8:	d06c      	beq.n	80014a4 <UART_SetConfig+0x1b8>
 80013ca:	d9d0      	bls.n	800136e <UART_SetConfig+0x82>
 80013cc:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80013d0:	d060      	beq.n	8001494 <UART_SetConfig+0x1a8>
 80013d2:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80013d6:	e7d8      	b.n	800138a <UART_SetConfig+0x9e>
 80013d8:	493a      	ldr	r1, [pc, #232]	; (80014c4 <UART_SetConfig+0x1d8>)
 80013da:	428a      	cmp	r2, r1
 80013dc:	d10e      	bne.n	80013fc <UART_SetConfig+0x110>
 80013de:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 80013e2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80013e4:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 80013e8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80013ec:	d05a      	beq.n	80014a4 <UART_SetConfig+0x1b8>
 80013ee:	d9be      	bls.n	800136e <UART_SetConfig+0x82>
 80013f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80013f4:	d04e      	beq.n	8001494 <UART_SetConfig+0x1a8>
 80013f6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80013fa:	e7c6      	b.n	800138a <UART_SetConfig+0x9e>
 80013fc:	4932      	ldr	r1, [pc, #200]	; (80014c8 <UART_SetConfig+0x1dc>)
 80013fe:	428a      	cmp	r2, r1
 8001400:	d1b8      	bne.n	8001374 <UART_SetConfig+0x88>
 8001402:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8001406:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001408:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 800140c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001410:	d048      	beq.n	80014a4 <UART_SetConfig+0x1b8>
 8001412:	d9ac      	bls.n	800136e <UART_SetConfig+0x82>
 8001414:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001418:	d03c      	beq.n	8001494 <UART_SetConfig+0x1a8>
 800141a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800141e:	e7b4      	b.n	800138a <UART_SetConfig+0x9e>
    switch (clocksource)
 8001420:	2908      	cmp	r1, #8
 8001422:	d81a      	bhi.n	800145a <UART_SetConfig+0x16e>
 8001424:	a301      	add	r3, pc, #4	; (adr r3, 800142c <UART_SetConfig+0x140>)
 8001426:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001451 	.word	0x08001451
 8001430:	08001451 	.word	0x08001451
 8001434:	08001393 	.word	0x08001393
 8001438:	0800145b 	.word	0x0800145b
 800143c:	08001451 	.word	0x08001451
 8001440:	0800145b 	.word	0x0800145b
 8001444:	0800145b 	.word	0x0800145b
 8001448:	0800145b 	.word	0x0800145b
 800144c:	0800149b 	.word	0x0800149b
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001450:	6841      	ldr	r1, [r0, #4]
 8001452:	084b      	lsrs	r3, r1, #1
 8001454:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8001458:	e7a1      	b.n	800139e <UART_SetConfig+0xb2>
        ret = HAL_ERROR;
 800145a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800145c:	2300      	movs	r3, #0
 800145e:	e7a2      	b.n	80013a6 <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001460:	6842      	ldr	r2, [r0, #4]
 8001462:	0853      	lsrs	r3, r2, #1
 8001464:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8001468:	fbb3 f3f2 	udiv	r3, r3, r2
 800146c:	4a11      	ldr	r2, [pc, #68]	; (80014b4 <UART_SetConfig+0x1c8>)
 800146e:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001470:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001472:	2000      	movs	r0, #0
        break;
 8001474:	bd30      	pop	{r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001476:	6841      	ldr	r1, [r0, #4]
 8001478:	084b      	lsrs	r3, r1, #1
 800147a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800147e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	b29b      	uxth	r3, r3
 8001488:	e7f2      	b.n	8001470 <UART_SetConfig+0x184>
 800148a:	6841      	ldr	r1, [r0, #4]
 800148c:	084b      	lsrs	r3, r1, #1
 800148e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001492:	e7f6      	b.n	8001482 <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001498:	d1f7      	bne.n	800148a <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800149a:	6841      	ldr	r1, [r0, #4]
 800149c:	084b      	lsrs	r3, r1, #1
 800149e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80014a2:	e77c      	b.n	800139e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014a8:	d0d2      	beq.n	8001450 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014aa:	6841      	ldr	r1, [r0, #4]
 80014ac:	084b      	lsrs	r3, r1, #1
 80014ae:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80014b2:	e7e6      	b.n	8001482 <UART_SetConfig+0x196>
 80014b4:	40013800 	.word	0x40013800
 80014b8:	08001a40 	.word	0x08001a40
 80014bc:	40004400 	.word	0x40004400
 80014c0:	40004800 	.word	0x40004800
 80014c4:	40004c00 	.word	0x40004c00
 80014c8:	40005000 	.word	0x40005000

080014cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	9d06      	ldr	r5, [sp, #24]
 80014d0:	4604      	mov	r4, r0
 80014d2:	4616      	mov	r6, r2
 80014d4:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014d6:	6820      	ldr	r0, [r4, #0]
 80014d8:	69c2      	ldr	r2, [r0, #28]
 80014da:	ea31 0302 	bics.w	r3, r1, r2
 80014de:	bf0c      	ite	eq
 80014e0:	2201      	moveq	r2, #1
 80014e2:	2200      	movne	r2, #0
 80014e4:	42b2      	cmp	r2, r6
 80014e6:	d001      	beq.n	80014ec <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80014e8:	2000      	movs	r0, #0
}
 80014ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80014ec:	1c6b      	adds	r3, r5, #1
 80014ee:	d0f3      	beq.n	80014d8 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014f0:	b995      	cbnz	r5, 8001518 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001504:	2320      	movs	r3, #32
 8001506:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800150a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800150e:	2300      	movs	r3, #0
 8001510:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001514:	2003      	movs	r0, #3
 8001516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001518:	f7ff fb02 	bl	8000b20 <HAL_GetTick>
 800151c:	1bc0      	subs	r0, r0, r7
 800151e:	4285      	cmp	r5, r0
 8001520:	d2d9      	bcs.n	80014d6 <UART_WaitOnFlagUntilTimeout+0xa>
 8001522:	e7e6      	b.n	80014f2 <UART_WaitOnFlagUntilTimeout+0x26>

08001524 <UART_CheckIdleState>:
{
 8001524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001526:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001528:	2100      	movs	r1, #0
 800152a:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800152c:	f7ff faf8 	bl	8000b20 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001536:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001538:	d417      	bmi.n	800156a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	075b      	lsls	r3, r3, #29
 8001540:	d50a      	bpl.n	8001558 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001542:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	462b      	mov	r3, r5
 800154c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff ffbb 	bl	80014cc <UART_WaitOnFlagUntilTimeout>
 8001556:	b9a0      	cbnz	r0, 8001582 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001558:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800155a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800155c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001560:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001564:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001568:	e00c      	b.n	8001584 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800156a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	460a      	mov	r2, r1
 8001572:	4603      	mov	r3, r0
 8001574:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff ffa7 	bl	80014cc <UART_WaitOnFlagUntilTimeout>
 800157e:	2800      	cmp	r0, #0
 8001580:	d0db      	beq.n	800153a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001582:	2003      	movs	r0, #3
}
 8001584:	b003      	add	sp, #12
 8001586:	bd30      	pop	{r4, r5, pc}

08001588 <HAL_UART_Init>:
{
 8001588:	b510      	push	{r4, lr}
  if(huart == NULL)
 800158a:	4604      	mov	r4, r0
 800158c:	b328      	cbz	r0, 80015da <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 800158e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001592:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001596:	b90b      	cbnz	r3, 800159c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8001598:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 800159c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800159e:	2324      	movs	r3, #36	; 0x24
 80015a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff fe9d 	bl	80012ec <UART_SetConfig>
 80015b2:	2801      	cmp	r0, #1
 80015b4:	d011      	beq.n	80015da <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015c6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 80015ce:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 80015d6:	f7ff bfa5 	b.w	8001524 <UART_CheckIdleState>
}
 80015da:	2001      	movs	r0, #1
 80015dc:	bd10      	pop	{r4, pc}

080015de <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015e0:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80015e2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80015e6:	2b20      	cmp	r3, #32
{
 80015e8:	460d      	mov	r5, r1
 80015ea:	4604      	mov	r4, r0
 80015ec:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80015ee:	d14b      	bne.n	8001688 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 80015f0:	2d00      	cmp	r5, #0
 80015f2:	d047      	beq.n	8001684 <HAL_UART_Transmit+0xa6>
 80015f4:	2a00      	cmp	r2, #0
 80015f6:	d045      	beq.n	8001684 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015f8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d043      	beq.n	8001688 <HAL_UART_Transmit+0xaa>
 8001600:	2301      	movs	r3, #1
 8001602:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001606:	2300      	movs	r3, #0
 8001608:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800160a:	2321      	movs	r3, #33	; 0x21
 800160c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001610:	f7ff fa86 	bl	8000b20 <HAL_GetTick>
 8001614:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8001616:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800161a:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800161e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001622:	b292      	uxth	r2, r2
 8001624:	b962      	cbnz	r2, 8001640 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001626:	9700      	str	r7, [sp, #0]
 8001628:	4633      	mov	r3, r6
 800162a:	2140      	movs	r1, #64	; 0x40
 800162c:	4620      	mov	r0, r4
 800162e:	f7ff ff4d 	bl	80014cc <UART_WaitOnFlagUntilTimeout>
 8001632:	b998      	cbnz	r0, 800165c <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001634:	2320      	movs	r3, #32
 8001636:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800163a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800163e:	e00e      	b.n	800165e <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8001640:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001644:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001646:	3b01      	subs	r3, #1
 8001648:	b29b      	uxth	r3, r3
 800164a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800164e:	2200      	movs	r2, #0
 8001650:	4633      	mov	r3, r6
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff ff39 	bl	80014cc <UART_WaitOnFlagUntilTimeout>
 800165a:	b110      	cbz	r0, 8001662 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800165e:	b003      	add	sp, #12
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001662:	68a3      	ldr	r3, [r4, #8]
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166a:	d107      	bne.n	800167c <HAL_UART_Transmit+0x9e>
 800166c:	6923      	ldr	r3, [r4, #16]
 800166e:	b92b      	cbnz	r3, 800167c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001670:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001678:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800167a:	e7d0      	b.n	800161e <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800167c:	782b      	ldrb	r3, [r5, #0]
 800167e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001680:	3501      	adds	r5, #1
 8001682:	e7cc      	b.n	800161e <HAL_UART_Transmit+0x40>
      return  HAL_ERROR;
 8001684:	2001      	movs	r0, #1
 8001686:	e7ea      	b.n	800165e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001688:	2002      	movs	r0, #2
 800168a:	e7e8      	b.n	800165e <HAL_UART_Transmit+0x80>

0800168c <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800168c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001690:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001692:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001696:	2b20      	cmp	r3, #32
{
 8001698:	460d      	mov	r5, r1
 800169a:	4604      	mov	r4, r0
 800169c:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800169e:	d15d      	bne.n	800175c <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0U))
 80016a0:	2d00      	cmp	r5, #0
 80016a2:	d059      	beq.n	8001758 <HAL_UART_Receive+0xcc>
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d057      	beq.n	8001758 <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016a8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d055      	beq.n	800175c <HAL_UART_Receive+0xd0>
 80016b0:	2301      	movs	r3, #1
 80016b2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80016b6:	6803      	ldr	r3, [r0, #0]
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016bc:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016c2:	2322      	movs	r3, #34	; 0x22
 80016c4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80016c8:	f7ff fa2a 	bl	8000b20 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80016cc:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80016ce:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80016d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80016d6:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 80016d8:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80016dc:	d115      	bne.n	800170a <HAL_UART_Receive+0x7e>
 80016de:	6923      	ldr	r3, [r4, #16]
 80016e0:	b98b      	cbnz	r3, 8001706 <HAL_UART_Receive+0x7a>
 80016e2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80016e6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80016ea:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80016ee:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80016f2:	b280      	uxth	r0, r0
 80016f4:	b980      	cbnz	r0, 8001718 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80016f6:	2320      	movs	r3, #32
 80016f8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016fc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001700:	b002      	add	sp, #8
 8001702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001706:	23ff      	movs	r3, #255	; 0xff
 8001708:	e7ed      	b.n	80016e6 <HAL_UART_Receive+0x5a>
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ed      	bne.n	80016ea <HAL_UART_Receive+0x5e>
 800170e:	6923      	ldr	r3, [r4, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f8      	beq.n	8001706 <HAL_UART_Receive+0x7a>
 8001714:	237f      	movs	r3, #127	; 0x7f
 8001716:	e7e6      	b.n	80016e6 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8001718:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800171c:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 8001720:	3b01      	subs	r3, #1
 8001722:	b29b      	uxth	r3, r3
 8001724:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001728:	2200      	movs	r2, #0
 800172a:	463b      	mov	r3, r7
 800172c:	2120      	movs	r1, #32
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fecc 	bl	80014cc <UART_WaitOnFlagUntilTimeout>
 8001734:	b9a0      	cbnz	r0, 8001760 <HAL_UART_Receive+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001736:	68a3      	ldr	r3, [r4, #8]
 8001738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	d106      	bne.n	800174e <HAL_UART_Receive+0xc2>
 8001740:	6922      	ldr	r2, [r4, #16]
 8001742:	b922      	cbnz	r2, 800174e <HAL_UART_Receive+0xc2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001744:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001746:	4033      	ands	r3, r6
 8001748:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 800174c:	e7cf      	b.n	80016ee <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800174e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001750:	4033      	ands	r3, r6
 8001752:	702b      	strb	r3, [r5, #0]
 8001754:	3501      	adds	r5, #1
 8001756:	e7ca      	b.n	80016ee <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8001758:	2001      	movs	r0, #1
 800175a:	e7d1      	b.n	8001700 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 800175c:	2002      	movs	r0, #2
 800175e:	e7cf      	b.n	8001700 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8001760:	2003      	movs	r0, #3
 8001762:	e7cd      	b.n	8001700 <HAL_UART_Receive+0x74>

08001764 <KeyExpansion>:
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
 8001764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8001766:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <KeyExpansion+0xb0>)
 8001768:	f852 3b04 	ldr.w	r3, [r2], #4
 800176c:	f103 0110 	add.w	r1, r3, #16
 8001770:	7818      	ldrb	r0, [r3, #0]
 8001772:	7010      	strb	r0, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8001774:	7858      	ldrb	r0, [r3, #1]
 8001776:	7050      	strb	r0, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8001778:	7898      	ldrb	r0, [r3, #2]
 800177a:	7090      	strb	r0, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 800177c:	78d8      	ldrb	r0, [r3, #3]
 800177e:	70d0      	strb	r0, [r2, #3]
 8001780:	3304      	adds	r3, #4
  for(i = 0; i < Nk; ++i)
 8001782:	428b      	cmp	r3, r1
 8001784:	f102 0204 	add.w	r2, r2, #4
 8001788:	d1f2      	bne.n	8001770 <KeyExpansion+0xc>
 800178a:	2104      	movs	r1, #4
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <KeyExpansion+0xb4>)
  return sbox[num];
 800178e:	4823      	ldr	r0, [pc, #140]	; (800181c <KeyExpansion+0xb8>)
  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
 8001790:	eb0d 0401 	add.w	r4, sp, r1
{
 8001794:	2200      	movs	r2, #0
      tempa[j]=RoundKey[(i-1) * 4 + j];
 8001796:	5c9d      	ldrb	r5, [r3, r2]
 8001798:	5515      	strb	r5, [r2, r4]
    for(j = 0; j < 4; ++j)
 800179a:	3201      	adds	r2, #1
 800179c:	2a04      	cmp	r2, #4
 800179e:	d1fa      	bne.n	8001796 <KeyExpansion+0x32>
    }
    if (i % Nk == 0)
 80017a0:	078a      	lsls	r2, r1, #30
 80017a2:	d118      	bne.n	80017d6 <KeyExpansion+0x72>
      // This function rotates the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
 80017a4:	f89d 5004 	ldrb.w	r5, [sp, #4]
        tempa[0] = tempa[1];
        tempa[1] = tempa[2];
        tempa[2] = tempa[3];
 80017a8:	f89d 6007 	ldrb.w	r6, [sp, #7]
      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
 80017ac:	5d45      	ldrb	r5, [r0, r5]
  return sbox[num];
 80017ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
        tempa[3] = getSBoxValue(tempa[3]);
 80017b2:	f88d 5007 	strb.w	r5, [sp, #7]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 80017b6:	eb00 0591 	add.w	r5, r0, r1, lsr #2
  return sbox[num];
 80017ba:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80017be:	5c82      	ldrb	r2, [r0, r2]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 80017c0:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
        tempa[1] = getSBoxValue(tempa[1]);
 80017c4:	5dc7      	ldrb	r7, [r0, r7]
        tempa[2] = getSBoxValue(tempa[2]);
 80017c6:	5d86      	ldrb	r6, [r0, r6]
        tempa[1] = getSBoxValue(tempa[1]);
 80017c8:	f88d 7005 	strb.w	r7, [sp, #5]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 80017cc:	406a      	eors	r2, r5
        tempa[2] = getSBoxValue(tempa[2]);
 80017ce:	f88d 6006 	strb.w	r6, [sp, #6]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 80017d2:	f88d 2004 	strb.w	r2, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 80017d6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80017da:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80017de:	406a      	eors	r2, r5
 80017e0:	711a      	strb	r2, [r3, #4]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 80017e2:	f89d 5005 	ldrb.w	r5, [sp, #5]
 80017e6:	f813 2c0b 	ldrb.w	r2, [r3, #-11]
 80017ea:	406a      	eors	r2, r5
 80017ec:	715a      	strb	r2, [r3, #5]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 80017ee:	f89d 5006 	ldrb.w	r5, [sp, #6]
 80017f2:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 80017f6:	406a      	eors	r2, r5
 80017f8:	719a      	strb	r2, [r3, #6]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80017fa:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80017fe:	f813 2c09 	ldrb.w	r2, [r3, #-9]
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001802:	3101      	adds	r1, #1
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001804:	406a      	eors	r2, r5
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001806:	292c      	cmp	r1, #44	; 0x2c
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001808:	71da      	strb	r2, [r3, #7]
 800180a:	f103 0304 	add.w	r3, r3, #4
  for(; (i < (Nb * (Nr + 1))); ++i)
 800180e:	d1c1      	bne.n	8001794 <KeyExpansion+0x30>
  }
}
 8001810:	b003      	add	sp, #12
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001814:	20000334 	.word	0x20000334
 8001818:	20000344 	.word	0x20000344
 800181c:	20000000 	.word	0x20000000

08001820 <AddRoundKey>:
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <AddRoundKey+0x34>)
{
 8001822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001824:	0100      	lsls	r0, r0, #4
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001826:	f8d1 70b4 	ldr.w	r7, [r1, #180]	; 0xb4
 800182a:	2300      	movs	r3, #0
 800182c:	3104      	adds	r1, #4
 800182e:	181c      	adds	r4, r3, r0
 8001830:	18fd      	adds	r5, r7, r3
 8001832:	440c      	add	r4, r1
{
 8001834:	2200      	movs	r2, #0
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001836:	f814 e002 	ldrb.w	lr, [r4, r2]
 800183a:	782e      	ldrb	r6, [r5, #0]
 800183c:	3201      	adds	r2, #1
 800183e:	ea86 060e 	eor.w	r6, r6, lr
    for(j = 0; j < 4; ++j)
 8001842:	2a04      	cmp	r2, #4
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001844:	f805 6b01 	strb.w	r6, [r5], #1
    for(j = 0; j < 4; ++j)
 8001848:	d1f5      	bne.n	8001836 <AddRoundKey+0x16>
 800184a:	3304      	adds	r3, #4
  for(i=0;i<4;++i)
 800184c:	2b10      	cmp	r3, #16
 800184e:	d1ee      	bne.n	800182e <AddRoundKey+0xe>
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001852:	bf00      	nop
 8001854:	20000334 	.word	0x20000334

08001858 <SubBytes>:
      if (input_save[4*i+j] & 0x02) {
        volatile int i = 1;
        i+=1;
      }
      #endif
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <SubBytes+0x28>)
  return sbox[num];
 800185a:	480a      	ldr	r0, [pc, #40]	; (8001884 <SubBytes+0x2c>)
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800185c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
{
 8001860:	b510      	push	{r4, lr}
 8001862:	1d19      	adds	r1, r3, #4
 8001864:	2200      	movs	r2, #0
  return sbox[num];
 8001866:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800186a:	5d04      	ldrb	r4, [r0, r4]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800186c:	f803 4022 	strb.w	r4, [r3, r2, lsl #2]
 8001870:	3201      	adds	r2, #1
    for(j = 0; j < 4; ++j)
 8001872:	2a04      	cmp	r2, #4
 8001874:	d1f7      	bne.n	8001866 <SubBytes+0xe>
 8001876:	3301      	adds	r3, #1
  for(i = 0; i < 4; ++i)
 8001878:	428b      	cmp	r3, r1
 800187a:	d1f3      	bne.n	8001864 <SubBytes+0xc>
 800187c:	bd10      	pop	{r4, pc}
 800187e:	bf00      	nop
 8001880:	20000334 	.word	0x20000334
 8001884:	20000000 	.word	0x20000000

08001888 <ShiftRows>:
        i += 1;
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][1];
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <ShiftRows+0x38>)
 800188a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  (*state)[0][1] = (*state)[1][1];
 800188e:	7959      	ldrb	r1, [r3, #5]
  temp           = (*state)[0][1];
 8001890:	785a      	ldrb	r2, [r3, #1]
  (*state)[0][1] = (*state)[1][1];
 8001892:	7059      	strb	r1, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8001894:	7a59      	ldrb	r1, [r3, #9]
 8001896:	7159      	strb	r1, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8001898:	7b59      	ldrb	r1, [r3, #13]
 800189a:	7259      	strb	r1, [r3, #9]
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
 800189c:	7a99      	ldrb	r1, [r3, #10]
  (*state)[3][1] = temp;
 800189e:	735a      	strb	r2, [r3, #13]
  temp           = (*state)[0][2];
 80018a0:	789a      	ldrb	r2, [r3, #2]
  (*state)[0][2] = (*state)[2][2];
 80018a2:	7099      	strb	r1, [r3, #2]
        i += 1;
      }
      #endif

  temp       = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
 80018a4:	7b99      	ldrb	r1, [r3, #14]
  (*state)[2][2] = temp;
 80018a6:	729a      	strb	r2, [r3, #10]
  temp       = (*state)[1][2];
 80018a8:	799a      	ldrb	r2, [r3, #6]
  (*state)[1][2] = (*state)[3][2];
 80018aa:	7199      	strb	r1, [r3, #6]
      #endif
  #ifdef JITTER_2
  #endif
  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
 80018ac:	7bd9      	ldrb	r1, [r3, #15]
  (*state)[3][2] = temp;
 80018ae:	739a      	strb	r2, [r3, #14]
  temp       = (*state)[0][3];
 80018b0:	78da      	ldrb	r2, [r3, #3]
  (*state)[0][3] = (*state)[3][3];
 80018b2:	70d9      	strb	r1, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80018b4:	7ad9      	ldrb	r1, [r3, #11]
 80018b6:	73d9      	strb	r1, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80018b8:	79d9      	ldrb	r1, [r3, #7]
 80018ba:	72d9      	strb	r1, [r3, #11]
  (*state)[1][3] = temp;
 80018bc:	71da      	strb	r2, [r3, #7]
 80018be:	4770      	bx	lr
 80018c0:	20000334 	.word	0x20000334

080018c4 <xtime>:
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80018c4:	09c3      	lsrs	r3, r0, #7
 80018c6:	005a      	lsls	r2, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80018ce:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 80018d2:	b2c0      	uxtb	r0, r0
 80018d4:	4770      	bx	lr
 80018d6:	0000      	movs	r0, r0

080018d8 <Cipher>:
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 80018d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff ff9f 	bl	8001820 <AddRoundKey>
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
 80018e2:	2401      	movs	r4, #1
  {
    SubBytes();
 80018e4:	f7ff ffb8 	bl	8001858 <SubBytes>
    ShiftRows();
 80018e8:	f7ff ffce 	bl	8001888 <ShiftRows>
    t   = (*state)[i][0];
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <Cipher+0x94>)
 80018ee:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80018f2:	f101 0b10 	add.w	fp, r1, #16
 80018f6:	f891 a000 	ldrb.w	sl, [r1]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80018fa:	784e      	ldrb	r6, [r1, #1]
 80018fc:	788d      	ldrb	r5, [r1, #2]
 80018fe:	f891 9003 	ldrb.w	r9, [r1, #3]
 8001902:	ea8a 0006 	eor.w	r0, sl, r6
 8001906:	ea85 0809 	eor.w	r8, r5, r9
 800190a:	ea80 0708 	eor.w	r7, r0, r8
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800190e:	f7ff ffd9 	bl	80018c4 <xtime>
 8001912:	ea8a 0000 	eor.w	r0, sl, r0
 8001916:	4078      	eors	r0, r7
 8001918:	7008      	strb	r0, [r1, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800191a:	ea86 0005 	eor.w	r0, r6, r5
 800191e:	f7ff ffd1 	bl	80018c4 <xtime>
 8001922:	4070      	eors	r0, r6
 8001924:	4078      	eors	r0, r7
 8001926:	7048      	strb	r0, [r1, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8001928:	4640      	mov	r0, r8
 800192a:	f7ff ffcb 	bl	80018c4 <xtime>
 800192e:	4068      	eors	r0, r5
 8001930:	4078      	eors	r0, r7
 8001932:	7088      	strb	r0, [r1, #2]
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8001934:	ea8a 0009 	eor.w	r0, sl, r9
 8001938:	f7ff ffc4 	bl	80018c4 <xtime>
 800193c:	ea89 0000 	eor.w	r0, r9, r0
 8001940:	4047      	eors	r7, r0
 8001942:	70cf      	strb	r7, [r1, #3]
 8001944:	3104      	adds	r1, #4
  for(i = 0; i < 4; ++i)
 8001946:	4559      	cmp	r1, fp
 8001948:	d1d5      	bne.n	80018f6 <Cipher+0x1e>
    MixColumns();
    AddRoundKey(round);
 800194a:	4620      	mov	r0, r4
  for(round = 1; round < Nr; ++round)
 800194c:	3401      	adds	r4, #1
 800194e:	b2e4      	uxtb	r4, r4
    AddRoundKey(round);
 8001950:	f7ff ff66 	bl	8001820 <AddRoundKey>
  for(round = 1; round < Nr; ++round)
 8001954:	2c0a      	cmp	r4, #10
 8001956:	d1c5      	bne.n	80018e4 <Cipher+0xc>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
 8001958:	f7ff ff7e 	bl	8001858 <SubBytes>
  ShiftRows();
 800195c:	f7ff ff94 	bl	8001888 <ShiftRows>
  AddRoundKey(Nr);
 8001960:	4620      	mov	r0, r4
}
 8001962:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AddRoundKey(Nr);
 8001966:	f7ff bf5b 	b.w	8001820 <AddRoundKey>
 800196a:	bf00      	nop
 800196c:	20000334 	.word	0x20000334

08001970 <BlockCopy>:
  InvSubBytes();
  AddRoundKey(0);
}

static void BlockCopy(uint8_t* output, const uint8_t* input)
{
 8001970:	1e4b      	subs	r3, r1, #1
 8001972:	3801      	subs	r0, #1
 8001974:	310f      	adds	r1, #15
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 8001976:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800197a:	f800 2f01 	strb.w	r2, [r0, #1]!
  for (i=0;i<KEYLEN;++i)
 800197e:	428b      	cmp	r3, r1
 8001980:	d1f9      	bne.n	8001976 <BlockCopy+0x6>
  }
}
 8001982:	4770      	bx	lr

08001984 <AES128_ECB_indp_setkey>:
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t* key)
{
  Key = key;
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <AES128_ECB_indp_setkey+0x8>)
 8001986:	6018      	str	r0, [r3, #0]
  KeyExpansion();
 8001988:	f7ff beec 	b.w	8001764 <KeyExpansion>
 800198c:	20000334 	.word	0x20000334

08001990 <AES128_ECB_indp_crypto>:
}

void AES128_ECB_indp_crypto(uint8_t* input)
{
 8001990:	b508      	push	{r3, lr}
 8001992:	4601      	mov	r1, r0
  state = (state_t*)input;
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <AES128_ECB_indp_crypto+0x18>)
 8001996:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  BlockCopy(input_save, input);
 800199a:	30b8      	adds	r0, #184	; 0xb8
 800199c:	f7ff ffe8 	bl	8001970 <BlockCopy>
  Cipher();
}
 80019a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Cipher();
 80019a4:	f7ff bf98 	b.w	80018d8 <Cipher>
 80019a8:	20000334 	.word	0x20000334

080019ac <aes_indep_init>:
#include "aes.h"

uint8_t enckey[16];

void aes_indep_init(void)
{
 80019ac:	4770      	bx	lr

080019ae <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
    AES128_ECB_indp_setkey(key);
 80019ae:	f7ff bfe9 	b.w	8001984 <AES128_ECB_indp_setkey>

080019b2 <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	AES128_ECB_indp_crypto(pt);
 80019b2:	f7ff bfed 	b.w	8001990 <AES128_ECB_indp_crypto>

080019b6 <aes_indep_enc_pretrigger>:
 80019b6:	4770      	bx	lr

080019b8 <aes_indep_enc_posttrigger>:
{
    ;
}

void aes_indep_enc_posttrigger(uint8_t * pt)
{
 80019b8:	4770      	bx	lr

080019ba <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
 80019ba:	4770      	bx	lr

080019bc <Reset_Handler>:
 80019bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019be:	e003      	b.n	80019c8 <LoopCopyDataInit>

080019c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 80019c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019c6:	3104      	adds	r1, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <LoopForever+0x6>)
	ldr	r3, =_edata
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <LoopForever+0xa>)
	adds	r2, r0, r1
 80019cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019d0:	d3f6      	bcc.n	80019c0 <CopyDataInit>
	ldr	r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <LoopForever+0xe>)
	b	LoopFillZerobss
 80019d4:	e002      	b.n	80019dc <LoopFillZerobss>

080019d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80019d6:	2300      	movs	r3, #0
 	str  r3, [r2]
 80019d8:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80019da:	3204      	adds	r2, #4

080019dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <LoopForever+0x12>)
	cmp	r2, r3
 80019de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019e0:	d3f9      	bcc.n	80019d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019e2:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f7fe fc21 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ea:	f7fe fe2d 	bl	8000648 <main>

080019ee <LoopForever>:



LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
 80019f0:	08001ab0 	.word	0x08001ab0
 80019f4:	20000000 	.word	0x20000000
 80019f8:	2000020c 	.word	0x2000020c
 80019fc:	2000020c 	.word	0x2000020c
 8001a00:	20000470 	.word	0x20000470

08001a04 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <BusFault_Handler>
 8001a06:	0000      	movs	r0, r0

08001a08 <_init>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr

08001a14 <_fini>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr
