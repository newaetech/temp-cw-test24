
simpleserial-trace-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001904  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001a8c  08001a8c  00011a8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b14  08001b14  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08001b14  08001b14  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b14  08001b14  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b14  08001b14  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b18  08001b18  00011b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08001b1c  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000210  08001d2c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000474  08001d2c  00020474  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000031  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d7b  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000012da  00000000  00000000  00027fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002867  00000000  00000000  000292c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000002e0  00000000  00000000  0002bb27  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000530  00000000  00000000  0002be07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000186d  00000000  00000000  0002c337  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00001d7a  00000000  00000000  0002dba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00000898  00000000  00000000  0002f920  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  000301b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000213 	.word	0x20000213
 80001a0:	20000210 	.word	0x20000210
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	20000210 	.word	0x20000210
 80001c4:	20000210 	.word	0x20000210
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001a74 	.word	0x08001a74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000214 	.word	0x20000214
 8000220:	08001a74 	.word	0x08001a74
 8000224:	20000210 	.word	0x20000210
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f001 fc11 	bl	8001a74 <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08001b14 	.word	0x08001b14
 8000270:	08001b14 	.word	0x08001b14
 8000274:	08001b18 	.word	0x08001b18
 8000278:	08001b14 	.word	0x08001b14

0800027c <setreg>:
static uint16_t num_encryption_rounds = 10;

uint8_t setreg(uint8_t* x, uint8_t len)
{
        uint32_t val;
        val = x[4] + (x[3] << 8) + (x[2] << 16) + (x[1] << 24);
 800027c:	78c2      	ldrb	r2, [r0, #3]
 800027e:	7903      	ldrb	r3, [r0, #4]
 8000280:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000284:	7882      	ldrb	r2, [r0, #2]
 8000286:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800028a:	7842      	ldrb	r2, [r0, #1]
 800028c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
//8:  TPI->ACPR
//9:  TPI->SPPR
//10: TPI->FFCR
//11: TPI->CSPSR
//12: ITM->TCR
        if       (x[0] == 0)    {DWT->CTRL = val;}
 8000290:	7802      	ldrb	r2, [r0, #0]
 8000292:	b912      	cbnz	r2, 800029a <setreg+0x1e>
 8000294:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <setreg+0xd4>)
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
 8000296:	6013      	str	r3, [r2, #0]
 8000298:	e003      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
 800029a:	2a01      	cmp	r2, #1
 800029c:	d103      	bne.n	80002a6 <setreg+0x2a>
 800029e:	4a2c      	ldr	r2, [pc, #176]	; (8000350 <setreg+0xd4>)
 80002a0:	6213      	str	r3, [r2, #32]
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
        else if  (x[0] == 12)   {ITM->TCR     = val;}

	return 0x00;
}
 80002a2:	2000      	movs	r0, #0
 80002a4:	4770      	bx	lr
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
 80002a6:	2a02      	cmp	r2, #2
 80002a8:	d102      	bne.n	80002b0 <setreg+0x34>
 80002aa:	4a29      	ldr	r2, [pc, #164]	; (8000350 <setreg+0xd4>)
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
 80002ae:	e7f8      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
 80002b0:	2a03      	cmp	r2, #3
 80002b2:	d109      	bne.n	80002c8 <setreg+0x4c>
 80002b4:	4a27      	ldr	r2, [pc, #156]	; (8000354 <setreg+0xd8>)
 80002b6:	6811      	ldr	r1, [r2, #0]
 80002b8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002bc:	6011      	str	r1, [r2, #0]
 80002be:	6013      	str	r3, [r2, #0]
 80002c0:	6813      	ldr	r3, [r2, #0]
 80002c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002c6:	e7e6      	b.n	8000296 <setreg+0x1a>
        else if  (x[0] == 4)    {ETM_SetupMode(); ETM->TESSEICR = val; ETM_TraceMode();}
 80002c8:	2a04      	cmp	r2, #4
 80002ca:	d107      	bne.n	80002dc <setreg+0x60>
 80002cc:	4a21      	ldr	r2, [pc, #132]	; (8000354 <setreg+0xd8>)
 80002ce:	6811      	ldr	r1, [r2, #0]
 80002d0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002d4:	6011      	str	r1, [r2, #0]
 80002d6:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
 80002da:	e7f1      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 5)    {ETM_SetupMode(); ETM->TEEVR    = val; ETM_TraceMode();}
 80002dc:	2a05      	cmp	r2, #5
 80002de:	d106      	bne.n	80002ee <setreg+0x72>
 80002e0:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <setreg+0xd8>)
 80002e2:	6811      	ldr	r1, [r2, #0]
 80002e4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002e8:	6011      	str	r1, [r2, #0]
 80002ea:	6213      	str	r3, [r2, #32]
 80002ec:	e7e8      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 6)    {ETM_SetupMode(); ETM->TECR1    = val; ETM_TraceMode();}
 80002ee:	2a06      	cmp	r2, #6
 80002f0:	d106      	bne.n	8000300 <setreg+0x84>
 80002f2:	4a18      	ldr	r2, [pc, #96]	; (8000354 <setreg+0xd8>)
 80002f4:	6811      	ldr	r1, [r2, #0]
 80002f6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80002fa:	6011      	str	r1, [r2, #0]
 80002fc:	6253      	str	r3, [r2, #36]	; 0x24
 80002fe:	e7df      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 7)    {ETM_SetupMode(); ETM->TRACEIDR = val; ETM_TraceMode();}
 8000300:	2a07      	cmp	r2, #7
 8000302:	d107      	bne.n	8000314 <setreg+0x98>
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <setreg+0xd8>)
 8000306:	6811      	ldr	r1, [r2, #0]
 8000308:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800030c:	6011      	str	r1, [r2, #0]
 800030e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000312:	e7d5      	b.n	80002c0 <setreg+0x44>
        else if  (x[0] == 8)    {TPI->ACPR    = val;}
 8000314:	2a08      	cmp	r2, #8
 8000316:	d102      	bne.n	800031e <setreg+0xa2>
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <setreg+0xdc>)
 800031a:	6113      	str	r3, [r2, #16]
 800031c:	e7c1      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 9)    {TPI->SPPR    = val;}
 800031e:	2a09      	cmp	r2, #9
 8000320:	d103      	bne.n	800032a <setreg+0xae>
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <setreg+0xdc>)
 8000324:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000328:	e7bb      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
 800032a:	2a0a      	cmp	r2, #10
 800032c:	d103      	bne.n	8000336 <setreg+0xba>
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <setreg+0xdc>)
 8000330:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8000334:	e7b5      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
 8000336:	2a0b      	cmp	r2, #11
 8000338:	d102      	bne.n	8000340 <setreg+0xc4>
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <setreg+0xdc>)
 800033c:	6053      	str	r3, [r2, #4]
 800033e:	e7b0      	b.n	80002a2 <setreg+0x26>
        else if  (x[0] == 12)   {ITM->TCR     = val;}
 8000340:	2a0c      	cmp	r2, #12
 8000342:	bf04      	itt	eq
 8000344:	f04f 4260 	moveq.w	r2, #3758096384	; 0xe0000000
 8000348:	f8c2 3e80 	streq.w	r3, [r2, #3712]	; 0xe80
 800034c:	e7a9      	b.n	80002a2 <setreg+0x26>
 800034e:	bf00      	nop
 8000350:	e0001000 	.word	0xe0001000
 8000354:	e0041000 	.word	0xe0041000
 8000358:	e0040000 	.word	0xe0040000

0800035c <enc_multi_setnum>:
uint8_t enc_multi_setnum(uint8_t* t, uint8_t len)
{
    //Assumes user entered a number like [0, 200] to mean "200"
    //which is most sane looking for humans I think
    num_encryption_rounds = t[1];
    num_encryption_rounds |= t[0] << 8;
 800035c:	7802      	ldrb	r2, [r0, #0]
 800035e:	7843      	ldrb	r3, [r0, #1]
 8000360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000364:	4a01      	ldr	r2, [pc, #4]	; (800036c <enc_multi_setnum+0x10>)
    return 0;
}
 8000366:	2000      	movs	r0, #0
    num_encryption_rounds |= t[0] << 8;
 8000368:	8013      	strh	r3, [r2, #0]
}
 800036a:	4770      	bx	lr
 800036c:	20000000 	.word	0x20000000

08000370 <reset>:

uint8_t reset(uint8_t* x, uint8_t len)
{
    // Reset key here if needed
    return 0x00;
}
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr

08000374 <getreg>:
{
 8000374:	b508      	push	{r3, lr}
        if       (x[0] == 0)    {val = DWT->CTRL;}
 8000376:	7803      	ldrb	r3, [r0, #0]
{
 8000378:	4602      	mov	r2, r0
        if       (x[0] == 0)    {val = DWT->CTRL;}
 800037a:	b913      	cbnz	r3, 8000382 <getreg+0xe>
 800037c:	4b27      	ldr	r3, [pc, #156]	; (800041c <getreg+0xa8>)
        else if  (x[0] == 3)    {val = ETM->CR;}
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	e008      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 1)    {val = DWT->COMP0;}
 8000382:	2b01      	cmp	r3, #1
 8000384:	d102      	bne.n	800038c <getreg+0x18>
 8000386:	4b25      	ldr	r3, [pc, #148]	; (800041c <getreg+0xa8>)
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
 8000388:	6a1b      	ldr	r3, [r3, #32]
 800038a:	e003      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 2)    {val = DWT->COMP1 ;}
 800038c:	2b02      	cmp	r3, #2
 800038e:	d10e      	bne.n	80003ae <getreg+0x3a>
 8000390:	4b22      	ldr	r3, [pc, #136]	; (800041c <getreg+0xa8>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        x[3] = val & 0xff;
 8000394:	70d3      	strb	r3, [r2, #3]
        x[2] = (val >> 8) & 0xff;
 8000396:	0a19      	lsrs	r1, r3, #8
 8000398:	7091      	strb	r1, [r2, #2]
        x[1] = (val >> 16) & 0xff;
 800039a:	0c19      	lsrs	r1, r3, #16
        x[0] = (val >> 24) & 0xff;
 800039c:	0e1b      	lsrs	r3, r3, #24
        x[1] = (val >> 16) & 0xff;
 800039e:	7051      	strb	r1, [r2, #1]
        x[0] = (val >> 24) & 0xff;
 80003a0:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 4, x);
 80003a2:	2104      	movs	r1, #4
 80003a4:	2072      	movs	r0, #114	; 0x72
 80003a6:	f000 fa5f 	bl	8000868 <simpleserial_put>
}
 80003aa:	2000      	movs	r0, #0
 80003ac:	bd08      	pop	{r3, pc}
        else if  (x[0] == 3)    {val = ETM->CR;}
 80003ae:	2b03      	cmp	r3, #3
 80003b0:	d101      	bne.n	80003b6 <getreg+0x42>
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <getreg+0xac>)
 80003b4:	e7e3      	b.n	800037e <getreg+0xa>
        else if  (x[0] == 4)    {val = ETM->TESSEICR;}
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	d103      	bne.n	80003c2 <getreg+0x4e>
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <getreg+0xac>)
 80003bc:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80003c0:	e7e8      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
 80003c2:	2b05      	cmp	r3, #5
 80003c4:	d101      	bne.n	80003ca <getreg+0x56>
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <getreg+0xac>)
 80003c8:	e7de      	b.n	8000388 <getreg+0x14>
        else if  (x[0] == 6)    {val = ETM->TECR1;}
 80003ca:	2b06      	cmp	r3, #6
 80003cc:	d102      	bne.n	80003d4 <getreg+0x60>
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <getreg+0xac>)
 80003d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d2:	e7df      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 7)    {val = ETM->TRACEIDR;}
 80003d4:	2b07      	cmp	r3, #7
 80003d6:	d103      	bne.n	80003e0 <getreg+0x6c>
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <getreg+0xac>)
 80003da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80003de:	e7d9      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 8)    {val = TPI->ACPR;}
 80003e0:	2b08      	cmp	r3, #8
 80003e2:	d102      	bne.n	80003ea <getreg+0x76>
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <getreg+0xb0>)
 80003e6:	691b      	ldr	r3, [r3, #16]
 80003e8:	e7d4      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 9)    {val = TPI->SPPR;}
 80003ea:	2b09      	cmp	r3, #9
 80003ec:	d103      	bne.n	80003f6 <getreg+0x82>
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <getreg+0xb0>)
 80003f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80003f4:	e7ce      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 10)   {val = TPI->FFCR;}
 80003f6:	2b0a      	cmp	r3, #10
 80003f8:	d103      	bne.n	8000402 <getreg+0x8e>
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <getreg+0xb0>)
 80003fc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000400:	e7c8      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 11)   {val = TPI->CSPSR;}
 8000402:	2b0b      	cmp	r3, #11
 8000404:	d102      	bne.n	800040c <getreg+0x98>
 8000406:	4b07      	ldr	r3, [pc, #28]	; (8000424 <getreg+0xb0>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	e7c3      	b.n	8000394 <getreg+0x20>
        else if  (x[0] == 12)   {val = ITM->TCR;}
 800040c:	2b0c      	cmp	r3, #12
 800040e:	bf0a      	itet	eq
 8000410:	f04f 4360 	moveq.w	r3, #3758096384	; 0xe0000000
        else {val = 0;}
 8000414:	2300      	movne	r3, #0
        else if  (x[0] == 12)   {val = ITM->TCR;}
 8000416:	f8d3 3e80 	ldreq.w	r3, [r3, #3712]	; 0xe80
 800041a:	e7bb      	b.n	8000394 <getreg+0x20>
 800041c:	e0001000 	.word	0xe0001000
 8000420:	e0041000 	.word	0xe0041000
 8000424:	e0040000 	.word	0xe0040000

08000428 <set_pcsample_params>:
{
 8000428:	b570      	push	{r4, r5, r6, lr}
    pcsamp_enable = x[0] & 1;
 800042a:	7803      	ldrb	r3, [r0, #0]
 800042c:	4910      	ldr	r1, [pc, #64]	; (8000470 <set_pcsample_params+0x48>)
    postreset = x[3] & 0xf;
 800042e:	78c4      	ldrb	r4, [r0, #3]
    pcsamp_enable = x[0] & 1;
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	700b      	strb	r3, [r1, #0]
    postinit  = x[2] & 0xf;
 8000436:	7881      	ldrb	r1, [r0, #2]
    cyctap = x[1] & 1;
 8000438:	7843      	ldrb	r3, [r0, #1]
{
 800043a:	4602      	mov	r2, r0
    postinit  = x[2] & 0xf;
 800043c:	f001 010f 	and.w	r1, r1, #15
    DWT->CTRL = 0;
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <set_pcsample_params+0x4c>)
    cyctap = x[1] & 1;
 8000442:	f003 0601 	and.w	r6, r3, #1
    DWT->CTRL = 0;
 8000446:	2500      	movs	r5, #0
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 8000448:	014b      	lsls	r3, r1, #5
    DWT->CTRL = 0;
 800044a:	6005      	str	r5, [r0, #0]
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 800044c:	6003      	str	r3, [r0, #0]
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
 800044e:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8000452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    postreset = x[3] & 0xf;
 8000456:	f004 040f 	and.w	r4, r4, #15
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    DWT->CTRL = (cyctap << DWT_CTRL_CYCTAP_Pos)
 8000462:	6003      	str	r3, [r0, #0]
    simpleserial_put('r', 4, x);
 8000464:	2104      	movs	r1, #4
 8000466:	2072      	movs	r0, #114	; 0x72
 8000468:	f000 f9fe 	bl	8000868 <simpleserial_put>
}
 800046c:	4628      	mov	r0, r5
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	20000400 	.word	0x20000400
 8000474:	e0001000 	.word	0xe0001000

08000478 <get_mask>:
{
 8000478:	b508      	push	{r3, lr}
  aes_indep_mask(m, len);
 800047a:	f001 fad4 	bl	8001a26 <aes_indep_mask>
}
 800047e:	2000      	movs	r0, #0
 8000480:	bd08      	pop	{r3, pc}

08000482 <get_key>:
{
 8000482:	b508      	push	{r3, lr}
    aes_indep_key(k);
 8000484:	f001 fac9 	bl	8001a1a <aes_indep_key>
}
 8000488:	2000      	movs	r0, #0
 800048a:	bd08      	pop	{r3, pc}

0800048c <enable_trace>:
       DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 800048c:	4a2b      	ldr	r2, [pc, #172]	; (800053c <enable_trace+0xb0>)
 800048e:	6853      	ldr	r3, [r2, #4]
 8000490:	f043 0320 	orr.w	r3, r3, #32
{
 8000494:	b510      	push	{r4, lr}
       DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 8000496:	6053      	str	r3, [r2, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 8000498:	f5a2 324c 	sub.w	r2, r2, #208896	; 0x33000
 800049c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
       TPI->SPPR = 2; // default to SWO with NRZ encoding
 80004a0:	2102      	movs	r1, #2
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 80004a2:	68d3      	ldr	r3, [r2, #12]
    ITM->LAR = 0xC5ACCE55;
 80004a4:	4c26      	ldr	r4, [pc, #152]	; (8000540 <enable_trace+0xb4>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 80004a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004aa:	60d3      	str	r3, [r2, #12]
    TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
 80004ac:	4b25      	ldr	r3, [pc, #148]	; (8000544 <enable_trace+0xb8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
    TPI->CSPSR =0x00000008; // 4 trace lanes
 80004b2:	2008      	movs	r0, #8
       TPI->SPPR = 2; // default to SWO with NRZ encoding
 80004b4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    TPI->FFCR = 0x102; // packet framing enabled
 80004b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80004bc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    TPI->CSPSR =0x00000008; // 4 trace lanes
 80004c0:	6058      	str	r0, [r3, #4]
    ITM->LAR = 0xC5ACCE55;
 80004c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 80004c6:	4920      	ldr	r1, [pc, #128]	; (8000548 <enable_trace+0xbc>)
    ITM->LAR = 0xC5ACCE55;
 80004c8:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 80004cc:	f8c3 1e80 	str.w	r1, [r3, #3712]	; 0xe80
    ITM->TER = 0xFFFFFFFF; // Enable all stimulus ports
 80004d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004d4:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ITM->TPR = 0x00000000; // allow unpriviledged access
 80004d8:	f8c3 2e40 	str.w	r2, [r3, #3648]	; 0xe40
    DWT->CTRL = (0xf << DWT_CTRL_POSTINIT_Pos);// countdown counter for PC sampling, must be written
 80004dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80004e4:	6019      	str	r1, [r3, #0]
    DWT->CTRL |=(1 << DWT_CTRL_CYCTAP_Pos)     // Prescaler for PC sampling: 0 = x32, 1 = x512
 80004e6:	6819      	ldr	r1, [r3, #0]
 80004e8:	f441 61c2 	orr.w	r1, r1, #1552	; 0x610
 80004ec:	f041 0101 	orr.w	r1, r1, #1
 80004f0:	6019      	str	r1, [r3, #0]
    DWT->COMP0 = 0x00001d60; // AES subbytes
 80004f2:	f44f 51eb 	mov.w	r1, #7520	; 0x1d60
 80004f6:	6219      	str	r1, [r3, #32]
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
 80004f8:	f641 5168 	movw	r1, #7528	; 0x1d68
    DWT->MASK0 = 0;
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
    DWT->FUNCTION0 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 80004fe:	6298      	str	r0, [r3, #40]	; 0x28
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
 8000500:	6319      	str	r1, [r3, #48]	; 0x30
    DWT->MASK1 = 0;
 8000502:	635a      	str	r2, [r3, #52]	; 0x34
    DWT->FUNCTION1 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 8000504:	6398      	str	r0, [r3, #56]	; 0x38
    ETM->LAR = 0xC5ACCE55;
 8000506:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800050a:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ETM_SetupMode();
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000514:	6019      	str	r1, [r3, #0]
    ETM->CR = ETM_CR_ETMEN; // Enable ETM output port
 8000516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051a:	6019      	str	r1, [r3, #0]
    ETM->TRACEIDR = 1; // Trace bus ID for TPIU
 800051c:	2101      	movs	r1, #1
 800051e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
 8000522:	490a      	ldr	r1, [pc, #40]	; (800054c <enable_trace+0xc0>)
    ETM->FFLR = 0; // Stall processor when FIFO is full
 8000524:	62da      	str	r2, [r3, #44]	; 0x2c
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
 8000526:	6219      	str	r1, [r3, #32]
    ETM->TESSEICR = 0xf; // set EmbeddedICE watchpoint 0 as a TraceEnable start resource.
 8000528:	210f      	movs	r1, #15
 800052a:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
    ETM->TECR1 = 0; // tracing is unaffected by the trace start/stop logic
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
    ETM_TraceMode();
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	bd10      	pop	{r4, pc}
 800053a:	bf00      	nop
 800053c:	e0042000 	.word	0xe0042000
 8000540:	c5acce55 	.word	0xc5acce55
 8000544:	e0040000 	.word	0xe0040000
 8000548:	00010009 	.word	0x00010009
 800054c:	000150a0 	.word	0x000150a0

08000550 <reenable_trace>:
{
 8000550:	b508      	push	{r3, lr}
        enable_trace();
 8000552:	f7ff ff9b 	bl	800048c <enable_trace>
}
 8000556:	2000      	movs	r0, #0
 8000558:	bd08      	pop	{r3, pc}

0800055a <print>:
{
 800055a:	b510      	push	{r4, lr}
 800055c:	1e44      	subs	r4, r0, #1
    while (*ptr != (char)0)
 800055e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000562:	b900      	cbnz	r0, 8000566 <print+0xc>
}
 8000564:	bd10      	pop	{r4, pc}
        putch(*ptr);
 8000566:	f000 fb01 	bl	8000b6c <putch>
 800056a:	e7f8      	b.n	800055e <print+0x4>

0800056c <info>:
{
 800056c:	b508      	push	{r3, lr}
        print("ChipWhisperer simpleserial-trace, compiled ");
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <info+0x24>)
 8000570:	f7ff fff3 	bl	800055a <print>
        print(__DATE__);
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <info+0x28>)
 8000576:	f7ff fff0 	bl	800055a <print>
        print(", ");
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <info+0x2c>)
 800057c:	f7ff ffed 	bl	800055a <print>
        print(__TIME__);
 8000580:	4806      	ldr	r0, [pc, #24]	; (800059c <info+0x30>)
 8000582:	f7ff ffea 	bl	800055a <print>
        print("\n");
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <info+0x34>)
 8000588:	f7ff ffe7 	bl	800055a <print>
}
 800058c:	2000      	movs	r0, #0
 800058e:	bd08      	pop	{r3, pc}
 8000590:	08001ab0 	.word	0x08001ab0
 8000594:	08001adc 	.word	0x08001adc
 8000598:	08001ae8 	.word	0x08001ae8
 800059c:	08001aeb 	.word	0x08001aeb
 80005a0:	08001afe 	.word	0x08001afe

080005a4 <ITM_Print>:
    if ((ITM->TCR & ITM_TCR_ITMENA_Msk) && (ITM->TER & (1UL << port)))
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 80005ac:	07d2      	lsls	r2, r2, #31
 80005ae:	d513      	bpl.n	80005d8 <ITM_Print+0x34>
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	40c3      	lsrs	r3, r0
 80005b6:	07db      	lsls	r3, r3, #31
 80005b8:	d50e      	bpl.n	80005d8 <ITM_Print+0x34>
 80005ba:	0080      	lsls	r0, r0, #2
 80005bc:	3901      	subs	r1, #1
 80005be:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
        while (*p)
 80005c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80005c6:	b913      	cbnz	r3, 80005ce <ITM_Print+0x2a>
        print("ITM alive!\n");
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <ITM_Print+0x38>)
    else {print("Couldn't print!\n");}
 80005ca:	f7ff bfc6 	b.w	800055a <print>
            while (ITM->PORT[port].u32 == 0);
 80005ce:	6802      	ldr	r2, [r0, #0]
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d0fc      	beq.n	80005ce <ITM_Print+0x2a>
            ITM->PORT[port].u8 = *p++;
 80005d4:	7003      	strb	r3, [r0, #0]
 80005d6:	e7f4      	b.n	80005c2 <ITM_Print+0x1e>
    else {print("Couldn't print!\n");}
 80005d8:	4801      	ldr	r0, [pc, #4]	; (80005e0 <ITM_Print+0x3c>)
 80005da:	e7f6      	b.n	80005ca <ITM_Print+0x26>
 80005dc:	08001af4 	.word	0x08001af4
 80005e0:	08001b00 	.word	0x08001b00

080005e4 <test_itm>:
{
 80005e4:	b508      	push	{r3, lr}
    ITM_Print(x[0], "ITM alive!\n");
 80005e6:	4903      	ldr	r1, [pc, #12]	; (80005f4 <test_itm+0x10>)
 80005e8:	7800      	ldrb	r0, [r0, #0]
 80005ea:	f7ff ffdb 	bl	80005a4 <ITM_Print>
}
 80005ee:	2000      	movs	r0, #0
 80005f0:	bd08      	pop	{r3, pc}
 80005f2:	bf00      	nop
 80005f4:	08001af4 	.word	0x08001af4

080005f8 <trigger_high_pcsamp>:
    if (pcsamp_enable == 1)
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <trigger_high_pcsamp+0x18>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
        DWT->CTRL |= (1 << DWT_CTRL_PCSAMPLENA_Pos); // enable PC sampling
 80005fe:	bf01      	itttt	eq
 8000600:	4a04      	ldreq	r2, [pc, #16]	; (8000614 <trigger_high_pcsamp+0x1c>)
 8000602:	6813      	ldreq	r3, [r2, #0]
 8000604:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8000608:	6013      	streq	r3, [r2, #0]
    trigger_high();
 800060a:	f000 ba87 	b.w	8000b1c <trigger_high>
 800060e:	bf00      	nop
 8000610:	20000400 	.word	0x20000400
 8000614:	e0001000 	.word	0xe0001000

08000618 <trigger_low_pcsamp>:
{
 8000618:	b508      	push	{r3, lr}
    trigger_low();
 800061a:	f000 fa86 	bl	8000b2a <trigger_low>
    DWT->CTRL &= ~(1 << DWT_CTRL_PCSAMPLENA_Pos); // disable PC sampling
 800061e:	4a03      	ldr	r2, [pc, #12]	; (800062c <trigger_low_pcsamp+0x14>)
 8000620:	6813      	ldr	r3, [r2, #0]
 8000622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	bd08      	pop	{r3, pc}
 800062a:	bf00      	nop
 800062c:	e0001000 	.word	0xe0001000

08000630 <get_pt>:
{
 8000630:	b510      	push	{r4, lr}
 8000632:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
 8000634:	f001 f9f5 	bl	8001a22 <aes_indep_enc_pretrigger>
    trigger_high_pcsamp();
 8000638:	f7ff ffde 	bl	80005f8 <trigger_high_pcsamp>
    aes_indep_enc(pt); /* encrypting the data block */
 800063c:	4620      	mov	r0, r4
 800063e:	f001 f9ee 	bl	8001a1e <aes_indep_enc>
    trigger_low_pcsamp();
 8000642:	f7ff ffe9 	bl	8000618 <trigger_low_pcsamp>
    aes_indep_enc_posttrigger(pt);
 8000646:	4620      	mov	r0, r4
 8000648:	f001 f9ec 	bl	8001a24 <aes_indep_enc_posttrigger>
    simpleserial_put('r', 16, pt);
 800064c:	4622      	mov	r2, r4
 800064e:	2110      	movs	r1, #16
 8000650:	2072      	movs	r0, #114	; 0x72
 8000652:	f000 f909 	bl	8000868 <simpleserial_put>
}
 8000656:	2000      	movs	r0, #0
 8000658:	bd10      	pop	{r4, pc}
 800065a:	0000      	movs	r0, r0

0800065c <enc_multi_getpt>:
{
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
 8000660:	f001 f9df 	bl	8001a22 <aes_indep_enc_pretrigger>
    for(unsigned int i = 0; i < num_encryption_rounds; i++){
 8000664:	4e0b      	ldr	r6, [pc, #44]	; (8000694 <enc_multi_getpt+0x38>)
 8000666:	2500      	movs	r5, #0
 8000668:	8833      	ldrh	r3, [r6, #0]
 800066a:	429d      	cmp	r5, r3
 800066c:	d309      	bcc.n	8000682 <enc_multi_getpt+0x26>
    aes_indep_enc_posttrigger(pt);
 800066e:	4620      	mov	r0, r4
 8000670:	f001 f9d8 	bl	8001a24 <aes_indep_enc_posttrigger>
	simpleserial_put('r', 16, pt);
 8000674:	4622      	mov	r2, r4
 8000676:	2110      	movs	r1, #16
 8000678:	2072      	movs	r0, #114	; 0x72
 800067a:	f000 f8f5 	bl	8000868 <simpleserial_put>
}
 800067e:	2000      	movs	r0, #0
 8000680:	bd70      	pop	{r4, r5, r6, pc}
        trigger_high_pcsamp();
 8000682:	f7ff ffb9 	bl	80005f8 <trigger_high_pcsamp>
        aes_indep_enc(pt);
 8000686:	4620      	mov	r0, r4
 8000688:	f001 f9c9 	bl	8001a1e <aes_indep_enc>
    for(unsigned int i = 0; i < num_encryption_rounds; i++){
 800068c:	3501      	adds	r5, #1
        trigger_low_pcsamp();
 800068e:	f7ff ffc3 	bl	8000618 <trigger_low_pcsamp>
 8000692:	e7e9      	b.n	8000668 <enc_multi_getpt+0xc>
 8000694:	20000000 	.word	0x20000000

08000698 <main>:

int main(void)
{
 8000698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <main+0xbc>)
 800069c:	466a      	mov	r2, sp
 800069e:	f103 0610 	add.w	r6, r3, #16
 80006a2:	466d      	mov	r5, sp
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	4614      	mov	r4, r2
 80006aa:	c403      	stmia	r4!, {r0, r1}
 80006ac:	3308      	adds	r3, #8
 80006ae:	42b3      	cmp	r3, r6
 80006b0:	4622      	mov	r2, r4
 80006b2:	d1f7      	bne.n	80006a4 <main+0xc>

    platform_init();
 80006b4:	f000 f992 	bl	80009dc <platform_init>
    init_uart();
 80006b8:	f000 f9d0 	bl	8000a5c <init_uart>
    trigger_setup();
 80006bc:	f000 fa0a 	bl	8000ad4 <trigger_setup>

    aes_indep_init();
 80006c0:	f001 f9aa 	bl	8001a18 <aes_indep_init>
    aes_indep_key(tmp);
 80006c4:	4628      	mov	r0, r5
 80006c6:	f001 f9a8 	bl	8001a1a <aes_indep_key>

    simpleserial_init();
 80006ca:	f000 f8b5 	bl	8000838 <simpleserial_init>
    simpleserial_addcmd('k', 16, get_key);
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <main+0xc0>)
 80006d0:	2110      	movs	r1, #16
 80006d2:	206b      	movs	r0, #107	; 0x6b
 80006d4:	f000 f8ac 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16, get_pt);
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <main+0xc4>)
 80006da:	2110      	movs	r1, #16
 80006dc:	2070      	movs	r0, #112	; 0x70
 80006de:	f000 f8a7 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('x', 0, reset);
 80006e2:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <main+0xc8>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	2078      	movs	r0, #120	; 0x78
 80006e8:	f000 f8a2 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 80006ec:	2301      	movs	r3, #1
 80006ee:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <main+0xcc>)
 80006f0:	2112      	movs	r1, #18
 80006f2:	206d      	movs	r0, #109	; 0x6d
 80006f4:	f000 f886 	bl	8000804 <simpleserial_addcmd_flags>
    simpleserial_addcmd('i', 0, info);
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <main+0xd0>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	2069      	movs	r0, #105	; 0x69
 80006fe:	f000 f897 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('e', 0, reenable_trace);
 8000702:	4a1a      	ldr	r2, [pc, #104]	; (800076c <main+0xd4>)
 8000704:	2100      	movs	r1, #0
 8000706:	2065      	movs	r0, #101	; 0x65
 8000708:	f000 f892 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('t', 1, test_itm);
 800070c:	4a18      	ldr	r2, [pc, #96]	; (8000770 <main+0xd8>)
 800070e:	2101      	movs	r1, #1
 8000710:	2074      	movs	r0, #116	; 0x74
 8000712:	f000 f88d 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('s', 5, setreg);
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <main+0xdc>)
 8000718:	2105      	movs	r1, #5
 800071a:	2073      	movs	r0, #115	; 0x73
 800071c:	f000 f888 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('g', 5, getreg);
 8000720:	4a15      	ldr	r2, [pc, #84]	; (8000778 <main+0xe0>)
 8000722:	2105      	movs	r1, #5
 8000724:	2067      	movs	r0, #103	; 0x67
 8000726:	f000 f883 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('c', 4, set_pcsample_params);
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <main+0xe4>)
 800072c:	2104      	movs	r1, #4
 800072e:	2063      	movs	r0, #99	; 0x63
 8000730:	f000 f87e 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('n', 2, enc_multi_setnum);
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <main+0xe8>)
 8000736:	2102      	movs	r1, #2
 8000738:	206e      	movs	r0, #110	; 0x6e
 800073a:	f000 f879 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('f', 16, enc_multi_getpt);
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <main+0xec>)
 8000740:	2110      	movs	r1, #16
 8000742:	2066      	movs	r0, #102	; 0x66
 8000744:	f000 f874 	bl	8000830 <simpleserial_addcmd>

    enable_trace();
 8000748:	f7ff fea0 	bl	800048c <enable_trace>

    while(1)
        simpleserial_get();
 800074c:	f000 f8e6 	bl	800091c <simpleserial_get>
 8000750:	e7fc      	b.n	800074c <main+0xb4>
 8000752:	bf00      	nop
 8000754:	08001a8c 	.word	0x08001a8c
 8000758:	08000483 	.word	0x08000483
 800075c:	08000631 	.word	0x08000631
 8000760:	08000371 	.word	0x08000371
 8000764:	08000479 	.word	0x08000479
 8000768:	0800056d 	.word	0x0800056d
 800076c:	08000551 	.word	0x08000551
 8000770:	080005e5 	.word	0x080005e5
 8000774:	0800027d 	.word	0x0800027d
 8000778:	08000375 	.word	0x08000375
 800077c:	08000429 	.word	0x08000429
 8000780:	0800035d 	.word	0x0800035d
 8000784:	0800065d 	.word	0x0800065d

08000788 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8000788:	2001      	movs	r0, #1
 800078a:	4770      	bx	lr

0800078c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
 8000790:	4613      	mov	r3, r2
 8000792:	1a9c      	subs	r4, r3, r2
 8000794:	42a0      	cmp	r0, r4
 8000796:	dc01      	bgt.n	800079c <hex_decode+0x10>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 8000798:	2000      	movs	r0, #0
}
 800079a:	bd70      	pop	{r4, r5, r6, pc}
		char n_lo = ascii_buf[2*i+1];
 800079c:	780d      	ldrb	r5, [r1, #0]
		char n_hi = ascii_buf[2*i];
 800079e:	f811 4c01 	ldrb.w	r4, [r1, #-1]
		if(n_lo >= '0' && n_lo <= '9')
 80007a2:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 80007a6:	b2f6      	uxtb	r6, r6
 80007a8:	2e09      	cmp	r6, #9
 80007aa:	d80c      	bhi.n	80007c6 <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 80007ac:	701e      	strb	r6, [r3, #0]
		if(n_hi >= '0' && n_hi <= '9')
 80007ae:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80007b2:	b2ee      	uxtb	r6, r5
 80007b4:	2e09      	cmp	r6, #9
 80007b6:	d815      	bhi.n	80007e4 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80007b8:	781c      	ldrb	r4, [r3, #0]
 80007ba:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80007be:	701c      	strb	r4, [r3, #0]
 80007c0:	3102      	adds	r1, #2
 80007c2:	3301      	adds	r3, #1
 80007c4:	e7e5      	b.n	8000792 <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 80007c6:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 80007ca:	2e05      	cmp	r6, #5
 80007cc:	d802      	bhi.n	80007d4 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 80007ce:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 80007d0:	701d      	strb	r5, [r3, #0]
 80007d2:	e7ec      	b.n	80007ae <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 80007d4:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 80007d8:	2e05      	cmp	r6, #5
 80007da:	d901      	bls.n	80007e0 <hex_decode+0x54>
			return 1;
 80007dc:	2001      	movs	r0, #1
 80007de:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 80007e0:	3d57      	subs	r5, #87	; 0x57
 80007e2:	e7f5      	b.n	80007d0 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80007e4:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80007e8:	2d05      	cmp	r5, #5
 80007ea:	d802      	bhi.n	80007f2 <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80007ec:	f1a4 0537 	sub.w	r5, r4, #55	; 0x37
 80007f0:	e7e2      	b.n	80007b8 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 80007f2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80007f6:	2d05      	cmp	r5, #5
 80007f8:	d8f0      	bhi.n	80007dc <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80007fa:	781d      	ldrb	r5, [r3, #0]
 80007fc:	3c57      	subs	r4, #87	; 0x57
 80007fe:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 8000802:	e7dc      	b.n	80007be <hex_decode+0x32>

08000804 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8000804:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 8000806:	4e09      	ldr	r6, [pc, #36]	; (800082c <simpleserial_addcmd_flags+0x28>)
 8000808:	6834      	ldr	r4, [r6, #0]
 800080a:	2c0f      	cmp	r4, #15
 800080c:	dc0b      	bgt.n	8000826 <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 800080e:	29bf      	cmp	r1, #191	; 0xbf
 8000810:	d809      	bhi.n	8000826 <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 8000812:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	commands[num_commands].flags = fl;
	num_commands++;
 8000816:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8000818:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 800081a:	742b      	strb	r3, [r5, #16]
	commands[num_commands].len = len;
 800081c:	60a9      	str	r1, [r5, #8]
	commands[num_commands].fp  = fp;
 800081e:	60ea      	str	r2, [r5, #12]
	num_commands++;
 8000820:	6034      	str	r4, [r6, #0]

	return 0;
 8000822:	2000      	movs	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8000826:	2001      	movs	r0, #1
}
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	bf00      	nop
 800082c:	2000022c 	.word	0x2000022c

08000830 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8000830:	2300      	movs	r3, #0
 8000832:	f7ff bfe7 	b.w	8000804 <simpleserial_addcmd_flags>
 8000836:	0000      	movs	r0, r0

08000838 <simpleserial_init>:
{
 8000838:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <simpleserial_init+0x24>)
 800083c:	2100      	movs	r1, #0
 800083e:	2076      	movs	r0, #118	; 0x76
 8000840:	f7ff fff6 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <simpleserial_init+0x28>)
 8000846:	2100      	movs	r1, #0
 8000848:	2077      	movs	r0, #119	; 0x77
 800084a:	f7ff fff1 	bl	8000830 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <simpleserial_init+0x2c>)
 8000850:	2100      	movs	r1, #0
 8000852:	2079      	movs	r0, #121	; 0x79
}
 8000854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 8000858:	f7ff bfea 	b.w	8000830 <simpleserial_addcmd>
 800085c:	08000789 	.word	0x08000789
 8000860:	080008cd 	.word	0x080008cd
 8000864:	080008ad 	.word	0x080008ad

08000868 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086c:	4615      	mov	r5, r2
 800086e:	460f      	mov	r7, r1
	// Write first character
	putch(c);
 8000870:	f000 f97c 	bl	8000b6c <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000874:	4e0c      	ldr	r6, [pc, #48]	; (80008a8 <simpleserial_put+0x40>)
	for(int i = 0; i < size; i++)
 8000876:	462c      	mov	r4, r5
 8000878:	1b63      	subs	r3, r4, r5
 800087a:	429f      	cmp	r7, r3
 800087c:	dc04      	bgt.n	8000888 <simpleserial_put+0x20>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 800087e:	200a      	movs	r0, #10
}
 8000880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	putch('\n');
 8000884:	f000 b972 	b.w	8000b6c <putch>
 8000888:	46a0      	mov	r8, r4
		putch(hex_lookup[output[i] >> 4 ]);
 800088a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	5cf0      	ldrb	r0, [r6, r3]
 8000892:	f000 f96b 	bl	8000b6c <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8000896:	f898 3000 	ldrb.w	r3, [r8]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	5cf0      	ldrb	r0, [r6, r3]
 80008a0:	f000 f964 	bl	8000b6c <putch>
 80008a4:	e7e8      	b.n	8000878 <simpleserial_put+0x10>
 80008a6:	bf00      	nop
 80008a8:	08001a9c 	.word	0x08001a9c

080008ac <ss_num_commands>:
{
 80008ac:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <ss_num_commands+0x1c>)
 80008b0:	aa02      	add	r2, sp, #8
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f802 3d01 	strb.w	r3, [r2, #-1]!
    simpleserial_put('r', 0x01, &ncmds);
 80008b8:	2101      	movs	r1, #1
 80008ba:	2072      	movs	r0, #114	; 0x72
 80008bc:	f7ff ffd4 	bl	8000868 <simpleserial_put>
}
 80008c0:	2000      	movs	r0, #0
 80008c2:	b003      	add	sp, #12
 80008c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c8:	2000022c 	.word	0x2000022c

080008cc <ss_get_commands>:
{
 80008cc:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <ss_get_commands+0x4c>)
 80008d0:	6801      	ldr	r1, [r0, #0]
{
 80008d2:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80008d4:	b2cd      	uxtb	r5, r1
 80008d6:	2400      	movs	r4, #0
 80008d8:	b2e3      	uxtb	r3, r4
 80008da:	42ab      	cmp	r3, r5
 80008dc:	f104 0401 	add.w	r4, r4, #1
 80008e0:	db09      	blt.n	80008f6 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 80008e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80008e6:	466a      	mov	r2, sp
 80008e8:	b2c9      	uxtb	r1, r1
 80008ea:	2072      	movs	r0, #114	; 0x72
 80008ec:	f7ff ffbc 	bl	8000868 <simpleserial_put>
}
 80008f0:	2000      	movs	r0, #0
 80008f2:	b00c      	add	sp, #48	; 0x30
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 80008f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80008fa:	ae0c      	add	r6, sp, #48	; 0x30
 80008fc:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8000900:	4432      	add	r2, r6
 8000902:	791e      	ldrb	r6, [r3, #4]
 8000904:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 8000908:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 800090a:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 800090c:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000910:	f802 3c2e 	strb.w	r3, [r2, #-46]
 8000914:	e7e0      	b.n	80008d8 <ss_get_commands+0xc>
 8000916:	bf00      	nop
 8000918:	2000022c 	.word	0x2000022c

0800091c <simpleserial_get>:
{
 800091c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8000920:	4c2d      	ldr	r4, [pc, #180]	; (80009d8 <simpleserial_get+0xbc>)
{
 8000922:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
	c = getch();
 8000926:	f000 f907 	bl	8000b38 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 800092a:	6822      	ldr	r2, [r4, #0]
 800092c:	2300      	movs	r3, #0
		if(commands[cmd].c == c)
 800092e:	1d21      	adds	r1, r4, #4
	for(cmd = 0; cmd < num_commands; cmd++)
 8000930:	4293      	cmp	r3, r2
 8000932:	db04      	blt.n	800093e <simpleserial_get+0x22>
	if(cmd == num_commands)
 8000934:	d107      	bne.n	8000946 <simpleserial_get+0x2a>
}
 8000936:	f50d 7d12 	add.w	sp, sp, #584	; 0x248
 800093a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 800093e:	011d      	lsls	r5, r3, #4
 8000940:	5c6d      	ldrb	r5, [r5, r1]
 8000942:	4285      	cmp	r5, r0
 8000944:	d13c      	bne.n	80009c0 <simpleserial_get+0xa4>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8000946:	011d      	lsls	r5, r3, #4
 8000948:	1966      	adds	r6, r4, r5
 800094a:	7c33      	ldrb	r3, [r6, #16]
 800094c:	07db      	lsls	r3, r3, #31
 800094e:	d514      	bpl.n	800097a <simpleserial_get+0x5e>
		uint8_t l = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 8000956:	f000 f8ef 	bl	8000b38 <getch>
 800095a:	f88d 00c8 	strb.w	r0, [sp, #200]	; 0xc8
		buff[1] = getch();
 800095e:	f000 f8eb 	bl	8000b38 <getch>
		if (hex_decode(1, buff, &l))
 8000962:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 8000964:	f88d 00c9 	strb.w	r0, [sp, #201]	; 0xc9
		if (hex_decode(1, buff, &l))
 8000968:	a932      	add	r1, sp, #200	; 0xc8
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff ff0e 	bl	800078c <hex_decode>
 8000970:	2800      	cmp	r0, #0
 8000972:	d1e0      	bne.n	8000936 <simpleserial_get+0x1a>
		commands[cmd].len = l;
 8000974:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000978:	60b3      	str	r3, [r6, #8]
	for(cmd = 0; cmd < num_commands; cmd++)
 800097a:	2600      	movs	r6, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800097c:	1967      	adds	r7, r4, r5
		ascii_buf[i] = c;
 800097e:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 8000988:	d31c      	bcc.n	80009c4 <simpleserial_get+0xa8>
	c = getch();
 800098a:	f000 f8d5 	bl	8000b38 <getch>
	if(c != '\n' && c != '\r')
 800098e:	280a      	cmp	r0, #10
 8000990:	d001      	beq.n	8000996 <simpleserial_get+0x7a>
 8000992:	280d      	cmp	r0, #13
 8000994:	d1cf      	bne.n	8000936 <simpleserial_get+0x1a>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8000996:	442c      	add	r4, r5
 8000998:	aa02      	add	r2, sp, #8
 800099a:	68a5      	ldr	r5, [r4, #8]
 800099c:	a932      	add	r1, sp, #200	; 0xc8
 800099e:	4628      	mov	r0, r5
 80009a0:	f7ff fef4 	bl	800078c <hex_decode>
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d1c6      	bne.n	8000936 <simpleserial_get+0x1a>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80009a8:	b2e9      	uxtb	r1, r5
 80009aa:	68e3      	ldr	r3, [r4, #12]
 80009ac:	a802      	add	r0, sp, #8
 80009ae:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 80009b0:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80009b2:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 80009b6:	2101      	movs	r1, #1
 80009b8:	207a      	movs	r0, #122	; 0x7a
 80009ba:	f7ff ff55 	bl	8000868 <simpleserial_put>
 80009be:	e7ba      	b.n	8000936 <simpleserial_get+0x1a>
	for(cmd = 0; cmd < num_commands; cmd++)
 80009c0:	3301      	adds	r3, #1
 80009c2:	e7b5      	b.n	8000930 <simpleserial_get+0x14>
		c = getch();
 80009c4:	f000 f8b8 	bl	8000b38 <getch>
		if(c == '\n' || c == '\r')
 80009c8:	280a      	cmp	r0, #10
 80009ca:	d0b4      	beq.n	8000936 <simpleserial_get+0x1a>
 80009cc:	280d      	cmp	r0, #13
 80009ce:	d0b2      	beq.n	8000936 <simpleserial_get+0x1a>
		ascii_buf[i] = c;
 80009d0:	f806 0008 	strb.w	r0, [r6, r8]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7d4      	b.n	8000982 <simpleserial_get+0x66>
 80009d8:	2000022c 	.word	0x2000022c

080009dc <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80009e0:	2400      	movs	r4, #0
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80009e2:	2603      	movs	r6, #3
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80009e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009e8:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80009ea:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80009ec:	930d      	str	r3, [sp, #52]	; 0x34
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80009ee:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80009f0:	9414      	str	r4, [sp, #80]	; 0x50
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80009f2:	960c      	str	r6, [sp, #48]	; 0x30
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009f4:	f000 f8d2 	bl	8000b9c <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009f8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80009fa:	4621      	mov	r1, r4
 80009fc:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009fe:	9302      	str	r3, [sp, #8]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000a00:	9404      	str	r4, [sp, #16]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a02:	9405      	str	r4, [sp, #20]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	9406      	str	r4, [sp, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000a06:	9503      	str	r5, [sp, #12]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000a08:	f000 fb38 	bl	800107c <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <platform_init+0x78>)
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
 8000a18:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a1e:	4c0e      	ldr	r4, [pc, #56]	; (8000a58 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	9b01      	ldr	r3, [sp, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a24:	9508      	str	r5, [sp, #32]
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000a26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a2a:	a907      	add	r1, sp, #28
 8000a2c:	4620      	mov	r0, r4
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000a2e:	9307      	str	r3, [sp, #28]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a30:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a32:	f000 fbc9 	bl	80011c8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000a36:	462a      	mov	r2, r5
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	f000 fc85 	bl	800134c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a42:	462a      	mov	r2, r5
 8000a44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f000 fc7f 	bl	800134c <HAL_GPIO_WritePin>
#endif
}
 8000a4e:	b016      	add	sp, #88	; 0x58
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000800 	.word	0x48000800

08000a5c <init_uart>:

void init_uart(void)
{
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000a60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a64:	9303      	str	r3, [sp, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	9304      	str	r3, [sp, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	9305      	str	r3, [sp, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	2303      	movs	r3, #3
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000a70:	4c15      	ldr	r4, [pc, #84]	; (8000ac8 <init_uart+0x6c>)
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a72:	9306      	str	r3, [sp, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000a74:	2307      	movs	r3, #7
 8000a76:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000a78:	6963      	ldr	r3, [r4, #20]
 8000a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7e:	6163      	str	r3, [r4, #20]
 8000a80:	6963      	ldr	r3, [r4, #20]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a88:	a903      	add	r1, sp, #12
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000a8e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a90:	f000 fb9a 	bl	80011c8 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <init_uart+0x70>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <init_uart+0x74>)
 8000a98:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8000a9c:	e880 4008 	stmia.w	r0, {r3, lr}
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000aa4:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000aa6:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000aa8:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000aae:	69a3      	ldr	r3, [r4, #24]
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	61a3      	str	r3, [r4, #24]
 8000ab6:	69a3      	ldr	r3, [r4, #24]
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000ac0:	f000 fd98 	bl	80015f4 <HAL_UART_Init>
}
 8000ac4:	b008      	add	sp, #32
 8000ac6:	bd10      	pop	{r4, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	20000404 	.word	0x20000404
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <trigger_setup+0x44>)
{
 8000ad6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	695b      	ldr	r3, [r3, #20]
{
 8000ae2:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
  GpioInit.Pin       = GPIO_PIN_12;
 8000aee:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000af2:	9302      	str	r3, [sp, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000af4:	2500      	movs	r5, #0
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000af6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000af8:	a901      	add	r1, sp, #4
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000afe:	9304      	str	r3, [sp, #16]
  GpioInit.Pin       = GPIO_PIN_12;
 8000b00:	9401      	str	r4, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
 8000b02:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000b04:	f000 fb60 	bl	80011c8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000b08:	462a      	mov	r2, r5
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fc1c 	bl	800134c <HAL_GPIO_WritePin>
}
 8000b14:	b007      	add	sp, #28
 8000b16:	bd30      	pop	{r4, r5, pc}
 8000b18:	40021000 	.word	0x40021000

08000b1c <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 bc11 	b.w	800134c <HAL_GPIO_WritePin>

08000b2a <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 bc0a 	b.w	800134c <HAL_GPIO_WritePin>

08000b38 <getch>:
}

char getch(void)
{
 8000b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000b3a:	4d0a      	ldr	r5, [pc, #40]	; (8000b64 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000b3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b42:	2201      	movs	r2, #1
 8000b44:	f10d 0107 	add.w	r1, sp, #7
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f000 fdd5 	bl	80016f8 <HAL_UART_Receive>
 8000b4e:	b918      	cbnz	r0, 8000b58 <getch+0x20>
  //putch(d);
  return d;
}
 8000b50:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b54:	b003      	add	sp, #12
 8000b56:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8000b58:	6a23      	ldr	r3, [r4, #32]
 8000b5a:	f043 0308 	orr.w	r3, r3, #8
 8000b5e:	6223      	str	r3, [r4, #32]
 8000b60:	e7ed      	b.n	8000b3e <getch+0x6>
 8000b62:	bf00      	nop
 8000b64:	20000404 	.word	0x20000404
 8000b68:	40013800 	.word	0x40013800

08000b6c <putch>:

void putch(char c)
{
 8000b6c:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 8000b6e:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b70:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000b74:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <putch+0x1c>)
 8000b7c:	f000 fd65 	bl	800164a <HAL_UART_Transmit>
}
 8000b80:	b003      	add	sp, #12
 8000b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b86:	bf00      	nop
 8000b88:	20000404 	.word	0x20000404

08000b8c <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <HAL_GetTick+0xc>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	1c42      	adds	r2, r0, #1
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000330 	.word	0x20000330

08000b9c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9c:	6803      	ldr	r3, [r0, #0]
{
 8000b9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba2:	07d9      	lsls	r1, r3, #31
{
 8000ba4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba6:	d411      	bmi.n	8000bcc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	079a      	lsls	r2, r3, #30
 8000bac:	f100 8086 	bmi.w	8000cbc <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	071e      	lsls	r6, r3, #28
 8000bb4:	f100 80f4 	bmi.w	8000da0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	075d      	lsls	r5, r3, #29
 8000bbc:	f100 813b 	bmi.w	8000e36 <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bc0:	69e2      	ldr	r2, [r4, #28]
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	f040 81cf 	bne.w	8000f66 <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e021      	b.n	8000c10 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bcc:	49b7      	ldr	r1, [pc, #732]	; (8000eac <HAL_RCC_OscConfig+0x310>)
 8000bce:	684b      	ldr	r3, [r1, #4]
 8000bd0:	f003 030c 	and.w	r3, r3, #12
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d007      	beq.n	8000be8 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd8:	684b      	ldr	r3, [r1, #4]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d119      	bne.n	8000c16 <HAL_RCC_OscConfig+0x7a>
 8000be2:	684b      	ldr	r3, [r1, #4]
 8000be4:	03db      	lsls	r3, r3, #15
 8000be6:	d516      	bpl.n	8000c16 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bec:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf0:	6809      	ldr	r1, [r1, #0]
 8000bf2:	fa93 f3a3 	rbit	r3, r3
 8000bf6:	fab3 f383 	clz	r3, r3
 8000bfa:	f003 031f 	and.w	r3, r3, #31
 8000bfe:	2201      	movs	r2, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	420b      	tst	r3, r1
 8000c06:	d0cf      	beq.n	8000ba8 <HAL_RCC_OscConfig+0xc>
 8000c08:	6863      	ldr	r3, [r4, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1cc      	bne.n	8000ba8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000c0e:	2001      	movs	r0, #1
}
 8000c10:	b003      	add	sp, #12
 8000c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c16:	6862      	ldr	r2, [r4, #4]
 8000c18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000c1c:	d124      	bne.n	8000c68 <HAL_RCC_OscConfig+0xcc>
 8000c1e:	680b      	ldr	r3, [r1, #0]
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c24:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c26:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000c28:	68a0      	ldr	r0, [r4, #8]
 8000c2a:	f023 030f 	bic.w	r3, r3, #15
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c32:	b34a      	cbz	r2, 8000c88 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000c34:	f7ff ffaa 	bl	8000b8c <HAL_GetTick>
 8000c38:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000c3c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	2601      	movs	r6, #1
 8000c40:	fa95 f3a5 	rbit	r3, r5
 8000c44:	680a      	ldr	r2, [r1, #0]
 8000c46:	fa95 f3a5 	rbit	r3, r5
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	f003 031f 	and.w	r3, r3, #31
 8000c52:	fa06 f303 	lsl.w	r3, r6, r3
 8000c56:	4213      	tst	r3, r2
 8000c58:	d1a6      	bne.n	8000ba8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5a:	f7ff ff97 	bl	8000b8c <HAL_GetTick>
 8000c5e:	1bc0      	subs	r0, r0, r7
 8000c60:	2864      	cmp	r0, #100	; 0x64
 8000c62:	d9ed      	bls.n	8000c40 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000c64:	2003      	movs	r0, #3
 8000c66:	e7d3      	b.n	8000c10 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c68:	680b      	ldr	r3, [r1, #0]
 8000c6a:	b932      	cbnz	r2, 8000c7a <HAL_RCC_OscConfig+0xde>
 8000c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c70:	600b      	str	r3, [r1, #0]
 8000c72:	680b      	ldr	r3, [r1, #0]
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	e7d4      	b.n	8000c24 <HAL_RCC_OscConfig+0x88>
 8000c7a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000c7e:	d1f5      	bne.n	8000c6c <HAL_RCC_OscConfig+0xd0>
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	600b      	str	r3, [r1, #0]
 8000c86:	e7ca      	b.n	8000c1e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000c88:	f7ff ff80 	bl	8000b8c <HAL_GetTick>
 8000c8c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000c90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c92:	2601      	movs	r6, #1
 8000c94:	fa95 f3a5 	rbit	r3, r5
 8000c98:	680a      	ldr	r2, [r1, #0]
 8000c9a:	fa95 f3a5 	rbit	r3, r5
 8000c9e:	fab3 f383 	clz	r3, r3
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	fa06 f303 	lsl.w	r3, r6, r3
 8000caa:	4213      	tst	r3, r2
 8000cac:	f43f af7c 	beq.w	8000ba8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb0:	f7ff ff6c 	bl	8000b8c <HAL_GetTick>
 8000cb4:	1bc0      	subs	r0, r0, r7
 8000cb6:	2864      	cmp	r0, #100	; 0x64
 8000cb8:	d9ec      	bls.n	8000c94 <HAL_RCC_OscConfig+0xf8>
 8000cba:	e7d3      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cbc:	497b      	ldr	r1, [pc, #492]	; (8000eac <HAL_RCC_OscConfig+0x310>)
 8000cbe:	684b      	ldr	r3, [r1, #4]
 8000cc0:	f013 0f0c 	tst.w	r3, #12
 8000cc4:	d007      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cc6:	684b      	ldr	r3, [r1, #4]
 8000cc8:	f003 030c 	and.w	r3, r3, #12
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d121      	bne.n	8000d14 <HAL_RCC_OscConfig+0x178>
 8000cd0:	684b      	ldr	r3, [r1, #4]
 8000cd2:	03df      	lsls	r7, r3, #15
 8000cd4:	d41e      	bmi.n	8000d14 <HAL_RCC_OscConfig+0x178>
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cdc:	6808      	ldr	r0, [r1, #0]
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	fab3 f383 	clz	r3, r3
 8000ce6:	f003 031f 	and.w	r3, r3, #31
 8000cea:	2201      	movs	r2, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	4203      	tst	r3, r0
 8000cf2:	d002      	beq.n	8000cfa <HAL_RCC_OscConfig+0x15e>
 8000cf4:	6923      	ldr	r3, [r4, #16]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d189      	bne.n	8000c0e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfa:	6808      	ldr	r0, [r1, #0]
 8000cfc:	23f8      	movs	r3, #248	; 0xf8
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	fab3 f283 	clz	r2, r3
 8000d06:	6963      	ldr	r3, [r4, #20]
 8000d08:	4093      	lsls	r3, r2
 8000d0a:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
 8000d12:	e74d      	b.n	8000bb0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d14:	6922      	ldr	r2, [r4, #16]
 8000d16:	2501      	movs	r5, #1
 8000d18:	b302      	cbz	r2, 8000d5c <HAL_RCC_OscConfig+0x1c0>
 8000d1a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	2602      	movs	r6, #2
 8000d2e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000d30:	f7ff ff2c 	bl	8000b8c <HAL_GetTick>
 8000d34:	4607      	mov	r7, r0
 8000d36:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3a:	680a      	ldr	r2, [r1, #0]
 8000d3c:	fa96 f3a6 	rbit	r3, r6
 8000d40:	fab3 f383 	clz	r3, r3
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	fa05 f303 	lsl.w	r3, r5, r3
 8000d4c:	4213      	tst	r3, r2
 8000d4e:	d1d4      	bne.n	8000cfa <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d50:	f7ff ff1c 	bl	8000b8c <HAL_GetTick>
 8000d54:	1bc0      	subs	r0, r0, r7
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9ed      	bls.n	8000d36 <HAL_RCC_OscConfig+0x19a>
 8000d5a:	e783      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
 8000d5c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	2602      	movs	r6, #2
 8000d70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d72:	f7ff ff0b 	bl	8000b8c <HAL_GetTick>
 8000d76:	4607      	mov	r7, r0
 8000d78:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7c:	680a      	ldr	r2, [r1, #0]
 8000d7e:	fa96 f3a6 	rbit	r3, r6
 8000d82:	fab3 f383 	clz	r3, r3
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	fa05 f303 	lsl.w	r3, r5, r3
 8000d8e:	4213      	tst	r3, r2
 8000d90:	f43f af0e 	beq.w	8000bb0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d94:	f7ff fefa 	bl	8000b8c <HAL_GetTick>
 8000d98:	1bc0      	subs	r0, r0, r7
 8000d9a:	2802      	cmp	r0, #2
 8000d9c:	d9ec      	bls.n	8000d78 <HAL_RCC_OscConfig+0x1dc>
 8000d9e:	e761      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da0:	69a2      	ldr	r2, [r4, #24]
 8000da2:	4d42      	ldr	r5, [pc, #264]	; (8000eac <HAL_RCC_OscConfig+0x310>)
 8000da4:	4842      	ldr	r0, [pc, #264]	; (8000eb0 <HAL_RCC_OscConfig+0x314>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	b312      	cbz	r2, 8000df0 <HAL_RCC_OscConfig+0x254>
 8000daa:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	4403      	add	r3, r0
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	2602      	movs	r6, #2
 8000db8:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000dba:	f7ff fee7 	bl	8000b8c <HAL_GetTick>
 8000dbe:	4607      	mov	r7, r0
 8000dc0:	fa96 f3a6 	rbit	r3, r6
 8000dc4:	fa96 f3a6 	rbit	r3, r6
 8000dc8:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dcc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000dce:	fa96 f3a6 	rbit	r3, r6
 8000dd2:	fab3 f383 	clz	r3, r3
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	4213      	tst	r3, r2
 8000de0:	f47f aeea 	bne.w	8000bb8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fed2 	bl	8000b8c <HAL_GetTick>
 8000de8:	1bc0      	subs	r0, r0, r7
 8000dea:	2802      	cmp	r0, #2
 8000dec:	d9e8      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x224>
 8000dee:	e739      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
 8000df0:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8000df4:	fab3 f383 	clz	r3, r3
 8000df8:	4403      	add	r3, r0
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	2602      	movs	r6, #2
 8000dfe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e00:	f7ff fec4 	bl	8000b8c <HAL_GetTick>
 8000e04:	4607      	mov	r7, r0
 8000e06:	fa96 f3a6 	rbit	r3, r6
 8000e0a:	fa96 f3a6 	rbit	r3, r6
 8000e0e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e14:	fa96 f3a6 	rbit	r3, r6
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	4213      	tst	r3, r2
 8000e26:	f43f aec7 	beq.w	8000bb8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e2a:	f7ff feaf 	bl	8000b8c <HAL_GetTick>
 8000e2e:	1bc0      	subs	r0, r0, r7
 8000e30:	2802      	cmp	r0, #2
 8000e32:	d9e8      	bls.n	8000e06 <HAL_RCC_OscConfig+0x26a>
 8000e34:	e716      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e36:	491d      	ldr	r1, [pc, #116]	; (8000eac <HAL_RCC_OscConfig+0x310>)
 8000e38:	69cb      	ldr	r3, [r1, #28]
 8000e3a:	00d8      	lsls	r0, r3, #3
 8000e3c:	d433      	bmi.n	8000ea6 <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	69cb      	ldr	r3, [r1, #28]
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61cb      	str	r3, [r1, #28]
 8000e46:	69cb      	ldr	r3, [r1, #28]
 8000e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e50:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4e18      	ldr	r6, [pc, #96]	; (8000eb4 <HAL_RCC_OscConfig+0x318>)
 8000e54:	6833      	ldr	r3, [r6, #0]
 8000e56:	05da      	lsls	r2, r3, #23
 8000e58:	d52e      	bpl.n	8000eb8 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5a:	68e3      	ldr	r3, [r4, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d13b      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x33c>
 8000e60:	6a0b      	ldr	r3, [r1, #32]
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000e68:	f7ff fe90 	bl	8000b8c <HAL_GetTick>
 8000e6c:	2602      	movs	r6, #2
 8000e6e:	4681      	mov	r9, r0
 8000e70:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e72:	2701      	movs	r7, #1
 8000e74:	fa96 f3a6 	rbit	r3, r6
 8000e78:	fa96 f3a6 	rbit	r3, r6
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d06a      	beq.n	8000f56 <HAL_RCC_OscConfig+0x3ba>
 8000e80:	6a0a      	ldr	r2, [r1, #32]
 8000e82:	fa98 f3a8 	rbit	r3, r8
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	fa07 f303 	lsl.w	r3, r7, r3
 8000e92:	4213      	tst	r3, r2
 8000e94:	d056      	beq.n	8000f44 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	f43f ae92 	beq.w	8000bc0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9c:	69cb      	ldr	r3, [r1, #28]
 8000e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	61cb      	str	r3, [r1, #28]
 8000ea4:	e68c      	b.n	8000bc0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000ea6:	2500      	movs	r5, #0
 8000ea8:	e7d3      	b.n	8000e52 <HAL_RCC_OscConfig+0x2b6>
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	10908120 	.word	0x10908120
 8000eb4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb8:	6833      	ldr	r3, [r6, #0]
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ec0:	f7ff fe64 	bl	8000b8c <HAL_GetTick>
 8000ec4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	6833      	ldr	r3, [r6, #0]
 8000ec8:	05db      	lsls	r3, r3, #23
 8000eca:	d4c6      	bmi.n	8000e5a <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ecc:	f7ff fe5e 	bl	8000b8c <HAL_GetTick>
 8000ed0:	1bc0      	subs	r0, r0, r7
 8000ed2:	2864      	cmp	r0, #100	; 0x64
 8000ed4:	d9f7      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x32a>
 8000ed6:	e6c5      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed8:	bb33      	cbnz	r3, 8000f28 <HAL_RCC_OscConfig+0x38c>
 8000eda:	6a0b      	ldr	r3, [r1, #32]
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	620b      	str	r3, [r1, #32]
 8000ee2:	6a0b      	ldr	r3, [r1, #32]
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000eea:	f7ff fe4f 	bl	8000b8c <HAL_GetTick>
 8000eee:	2602      	movs	r6, #2
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef4:	2701      	movs	r7, #1
 8000ef6:	fa96 f3a6 	rbit	r3, r6
 8000efa:	fa96 f3a6 	rbit	r3, r6
 8000efe:	b373      	cbz	r3, 8000f5e <HAL_RCC_OscConfig+0x3c2>
 8000f00:	6a0a      	ldr	r2, [r1, #32]
 8000f02:	fa98 f3a8 	rbit	r3, r8
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	fa07 f303 	lsl.w	r3, r7, r3
 8000f12:	4213      	tst	r3, r2
 8000f14:	d0bf      	beq.n	8000e96 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fe39 	bl	8000b8c <HAL_GetTick>
 8000f1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f1e:	eba0 0009 	sub.w	r0, r0, r9
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d9e7      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x35a>
 8000f26:	e69d      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	6a0b      	ldr	r3, [r1, #32]
 8000f2c:	d103      	bne.n	8000f36 <HAL_RCC_OscConfig+0x39a>
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	620b      	str	r3, [r1, #32]
 8000f34:	e794      	b.n	8000e60 <HAL_RCC_OscConfig+0x2c4>
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	620b      	str	r3, [r1, #32]
 8000f3c:	6a0b      	ldr	r3, [r1, #32]
 8000f3e:	f023 0304 	bic.w	r3, r3, #4
 8000f42:	e790      	b.n	8000e66 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f44:	f7ff fe22 	bl	8000b8c <HAL_GetTick>
 8000f48:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f4c:	eba0 0009 	sub.w	r0, r0, r9
 8000f50:	4298      	cmp	r0, r3
 8000f52:	d98f      	bls.n	8000e74 <HAL_RCC_OscConfig+0x2d8>
 8000f54:	e686      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
 8000f56:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000f5c:	e791      	b.n	8000e82 <HAL_RCC_OscConfig+0x2e6>
 8000f5e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f62:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000f64:	e7cd      	b.n	8000f02 <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f66:	4943      	ldr	r1, [pc, #268]	; (8001074 <HAL_RCC_OscConfig+0x4d8>)
 8000f68:	684b      	ldr	r3, [r1, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	f43f ae4d 	beq.w	8000c0e <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f74:	2a02      	cmp	r2, #2
 8000f76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f7a:	d154      	bne.n	8001026 <HAL_RCC_OscConfig+0x48a>
 8000f7c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f92:	f7ff fdfb 	bl	8000b8c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f96:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001078 <HAL_RCC_OscConfig+0x4dc>
        tickstart = HAL_GetTick();
 8000f9a:	4607      	mov	r7, r0
 8000f9c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	fa96 f3a6 	rbit	r3, r6
 8000fa6:	680a      	ldr	r2, [r1, #0]
 8000fa8:	fa96 f3a6 	rbit	r3, r6
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa05 f303 	lsl.w	r3, r5, r3
 8000fb8:	4213      	tst	r3, r2
 8000fba:	d12e      	bne.n	800101a <HAL_RCC_OscConfig+0x47e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fbc:	684a      	ldr	r2, [r1, #4]
 8000fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fc0:	6a20      	ldr	r0, [r4, #32]
 8000fc2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000fd4:	fab3 f383 	clz	r3, r3
 8000fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fe0:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe2:	4f25      	ldr	r7, [pc, #148]	; (8001078 <HAL_RCC_OscConfig+0x4dc>)
        __HAL_RCC_PLL_ENABLE();
 8000fe4:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fdd1 	bl	8000b8c <HAL_GetTick>
 8000fea:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000fee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff0:	2501      	movs	r5, #1
 8000ff2:	fa94 f3a4 	rbit	r3, r4
 8000ff6:	680a      	ldr	r2, [r1, #0]
 8000ff8:	fa94 f3a4 	rbit	r3, r4
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	fa05 f303 	lsl.w	r3, r5, r3
 8001008:	4213      	tst	r3, r2
 800100a:	f47f addd 	bne.w	8000bc8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800100e:	f7ff fdbd 	bl	8000b8c <HAL_GetTick>
 8001012:	1b80      	subs	r0, r0, r6
 8001014:	42b8      	cmp	r0, r7
 8001016:	d9ec      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x456>
 8001018:	e624      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff fdb7 	bl	8000b8c <HAL_GetTick>
 800101e:	1bc0      	subs	r0, r0, r7
 8001020:	4540      	cmp	r0, r8
 8001022:	d9be      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x406>
 8001024:	e61e      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
 8001026:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800102a:	fab3 f383 	clz	r3, r3
 800102e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001032:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800103c:	f7ff fda6 	bl	8000b8c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001040:	4f0d      	ldr	r7, [pc, #52]	; (8001078 <HAL_RCC_OscConfig+0x4dc>)
        tickstart = HAL_GetTick();
 8001042:	4606      	mov	r6, r0
 8001044:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	2501      	movs	r5, #1
 800104a:	fa94 f3a4 	rbit	r3, r4
 800104e:	680a      	ldr	r2, [r1, #0]
 8001050:	fa94 f3a4 	rbit	r3, r4
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa05 f303 	lsl.w	r3, r5, r3
 8001060:	4213      	tst	r3, r2
 8001062:	f43f adb1 	beq.w	8000bc8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001066:	f7ff fd91 	bl	8000b8c <HAL_GetTick>
 800106a:	1b80      	subs	r0, r0, r6
 800106c:	42b8      	cmp	r0, r7
 800106e:	d9ec      	bls.n	800104a <HAL_RCC_OscConfig+0x4ae>
 8001070:	e5f8      	b.n	8000c64 <HAL_RCC_OscConfig+0xc8>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	00030d40 	.word	0x00030d40

0800107c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_RCC_ClockConfig+0x144>)
{
 800107e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	428b      	cmp	r3, r1
{
 8001088:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800108a:	d31b      	bcc.n	80010c4 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	682a      	ldr	r2, [r5, #0]
 800108e:	0790      	lsls	r0, r2, #30
 8001090:	d424      	bmi.n	80010dc <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001092:	07d2      	lsls	r2, r2, #31
 8001094:	d42a      	bmi.n	80010ec <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001096:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_RCC_ClockConfig+0x144>)
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	4299      	cmp	r1, r3
 80010a0:	d37a      	bcc.n	8001198 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a2:	6828      	ldr	r0, [r5, #0]
 80010a4:	0743      	lsls	r3, r0, #29
 80010a6:	f100 8082 	bmi.w	80011ae <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010aa:	f010 0008 	ands.w	r0, r0, #8
 80010ae:	d008      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x46>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b0:	4a44      	ldr	r2, [pc, #272]	; (80011c4 <HAL_RCC_ClockConfig+0x148>)
 80010b2:	6929      	ldr	r1, [r5, #16]
 80010b4:	6853      	ldr	r3, [r2, #4]
 80010b6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010be:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80010c0:	2000      	movs	r0, #0
}
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f023 0307 	bic.w	r3, r3, #7
 80010ca:	430b      	orrs	r3, r1
 80010cc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	4299      	cmp	r1, r3
 80010d6:	d0d9      	beq.n	800108c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
 80010da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010dc:	4839      	ldr	r0, [pc, #228]	; (80011c4 <HAL_RCC_ClockConfig+0x148>)
 80010de:	68ac      	ldr	r4, [r5, #8]
 80010e0:	6843      	ldr	r3, [r0, #4]
 80010e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010e6:	4323      	orrs	r3, r4
 80010e8:	6043      	str	r3, [r0, #4]
 80010ea:	e7d2      	b.n	8001092 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ec:	686a      	ldr	r2, [r5, #4]
 80010ee:	4c35      	ldr	r4, [pc, #212]	; (80011c4 <HAL_RCC_ClockConfig+0x148>)
 80010f0:	2a01      	cmp	r2, #1
 80010f2:	d127      	bne.n	8001144 <HAL_RCC_ClockConfig+0xc8>
 80010f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	d0e2      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	6863      	ldr	r3, [r4, #4]
 8001114:	f023 0303 	bic.w	r3, r3, #3
 8001118:	431a      	orrs	r2, r3
 800111a:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 800111c:	f7ff fd36 	bl	8000b8c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001120:	686b      	ldr	r3, [r5, #4]
 8001122:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001124:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001126:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	d11e      	bne.n	800116a <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800112c:	6863      	ldr	r3, [r4, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b04      	cmp	r3, #4
 8001134:	d0af      	beq.n	8001096 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001136:	f7ff fd29 	bl	8000b8c <HAL_GetTick>
 800113a:	1b80      	subs	r0, r0, r6
 800113c:	42b8      	cmp	r0, r7
 800113e:	d9f5      	bls.n	800112c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001140:	2003      	movs	r0, #3
 8001142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001144:	2a02      	cmp	r2, #2
 8001146:	bf0c      	ite	eq
 8001148:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800114c:	2302      	movne	r3, #2
 800114e:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001152:	6826      	ldr	r6, [r4, #0]
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f303 	lsl.w	r3, r0, r3
 8001166:	4233      	tst	r3, r6
 8001168:	e7d2      	b.n	8001110 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116a:	2b02      	cmp	r3, #2
 800116c:	d10f      	bne.n	800118e <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800116e:	6863      	ldr	r3, [r4, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b08      	cmp	r3, #8
 8001176:	d08e      	beq.n	8001096 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001178:	f7ff fd08 	bl	8000b8c <HAL_GetTick>
 800117c:	1b80      	subs	r0, r0, r6
 800117e:	42b8      	cmp	r0, r7
 8001180:	d9f5      	bls.n	800116e <HAL_RCC_ClockConfig+0xf2>
 8001182:	e7dd      	b.n	8001140 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fd02 	bl	8000b8c <HAL_GetTick>
 8001188:	1b80      	subs	r0, r0, r6
 800118a:	42b8      	cmp	r0, r7
 800118c:	d8d8      	bhi.n	8001140 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800118e:	6863      	ldr	r3, [r4, #4]
 8001190:	f013 0f0c 	tst.w	r3, #12
 8001194:	d1f6      	bne.n	8001184 <HAL_RCC_ClockConfig+0x108>
 8001196:	e77e      	b.n	8001096 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	f023 0307 	bic.w	r3, r3, #7
 800119e:	430b      	orrs	r3, r1
 80011a0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011a2:	6813      	ldr	r3, [r2, #0]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	4299      	cmp	r1, r3
 80011aa:	d195      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x5c>
 80011ac:	e779      	b.n	80010a2 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_RCC_ClockConfig+0x148>)
 80011b0:	68e9      	ldr	r1, [r5, #12]
 80011b2:	6853      	ldr	r3, [r2, #4]
 80011b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6053      	str	r3, [r2, #4]
 80011bc:	e775      	b.n	80010aa <HAL_RCC_ClockConfig+0x2e>
 80011be:	bf00      	nop
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011cc:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001348 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d4:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 80011d6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011d8:	fa38 f403 	lsrs.w	r4, r8, r3
 80011dc:	d102      	bne.n	80011e4 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80011de:	b003      	add	sp, #12
 80011e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011e4:	2401      	movs	r4, #1
 80011e6:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80011ea:	ea18 050a 	ands.w	r5, r8, sl
 80011ee:	f000 809c 	beq.w	800132a <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f2:	684c      	ldr	r4, [r1, #4]
 80011f4:	f024 0b10 	bic.w	fp, r4, #16
 80011f8:	f1bb 0f02 	cmp.w	fp, #2
 80011fc:	d114      	bne.n	8001228 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 80011fe:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001202:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800120a:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001212:	270f      	movs	r7, #15
 8001214:	fa07 f70c 	lsl.w	r7, r7, ip
 8001218:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	690e      	ldr	r6, [r1, #16]
 800121e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001222:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001224:	f8ce 6020 	str.w	r6, [lr, #32]
 8001228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122c:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800122e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001230:	fa07 f70c 	lsl.w	r7, r7, ip
 8001234:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001236:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001240:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001248:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800124c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124e:	d811      	bhi.n	8001274 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001250:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001252:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	68ce      	ldr	r6, [r1, #12]
 8001258:	fa06 fe0c 	lsl.w	lr, r6, ip
 800125c:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001260:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001262:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001268:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800126c:	409e      	lsls	r6, r3
 800126e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001272:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001274:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001276:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001278:	688e      	ldr	r6, [r1, #8]
 800127a:	fa06 f60c 	lsl.w	r6, r6, ip
 800127e:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001280:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001282:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001284:	d551      	bpl.n	800132a <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800128a:	f046 0601 	orr.w	r6, r6, #1
 800128e:	f8c9 6018 	str.w	r6, [r9, #24]
 8001292:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8001296:	f023 0703 	bic.w	r7, r3, #3
 800129a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800129e:	f006 0601 	and.w	r6, r6, #1
 80012a2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80012a6:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012a8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ac:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80012ae:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012b4:	f04f 0e0f 	mov.w	lr, #15
 80012b8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012bc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012c0:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c4:	d033      	beq.n	800132e <HAL_GPIO_Init+0x166>
 80012c6:	4e1f      	ldr	r6, [pc, #124]	; (8001344 <HAL_GPIO_Init+0x17c>)
 80012c8:	42b0      	cmp	r0, r6
 80012ca:	d032      	beq.n	8001332 <HAL_GPIO_Init+0x16a>
 80012cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012d0:	42b0      	cmp	r0, r6
 80012d2:	d030      	beq.n	8001336 <HAL_GPIO_Init+0x16e>
 80012d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012d8:	42b0      	cmp	r0, r6
 80012da:	d02e      	beq.n	800133a <HAL_GPIO_Init+0x172>
 80012dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012e0:	42b0      	cmp	r0, r6
 80012e2:	bf14      	ite	ne
 80012e4:	2605      	movne	r6, #5
 80012e6:	2604      	moveq	r6, #4
 80012e8:	fa06 f60c 	lsl.w	r6, r6, ip
 80012ec:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80012f0:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80012f2:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80012fa:	bf0c      	ite	eq
 80012fc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80012fe:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001300:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001302:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001304:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001308:	bf0c      	ite	eq
 800130a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800130c:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 800130e:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001310:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001312:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001316:	bf0c      	ite	eq
 8001318:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800131a:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800131c:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800131e:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001320:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001322:	bf54      	ite	pl
 8001324:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001326:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001328:	60d6      	str	r6, [r2, #12]
    position++;
 800132a:	3301      	adds	r3, #1
 800132c:	e754      	b.n	80011d8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800132e:	2600      	movs	r6, #0
 8001330:	e7da      	b.n	80012e8 <HAL_GPIO_Init+0x120>
 8001332:	2601      	movs	r6, #1
 8001334:	e7d8      	b.n	80012e8 <HAL_GPIO_Init+0x120>
 8001336:	2602      	movs	r6, #2
 8001338:	e7d6      	b.n	80012e8 <HAL_GPIO_Init+0x120>
 800133a:	2603      	movs	r6, #3
 800133c:	e7d4      	b.n	80012e8 <HAL_GPIO_Init+0x120>
 800133e:	bf00      	nop
 8001340:	40010400 	.word	0x40010400
 8001344:	48000400 	.word	0x48000400
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	b10a      	cbz	r2, 8001352 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134e:	6181      	str	r1, [r0, #24]
 8001350:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001352:	6281      	str	r1, [r0, #40]	; 0x28
 8001354:	4770      	bx	lr
 8001356:	0000      	movs	r0, r0

08001358 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001358:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800135a:	6881      	ldr	r1, [r0, #8]
 800135c:	69c3      	ldr	r3, [r0, #28]
{
 800135e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001360:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001362:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001364:	4329      	orrs	r1, r5
 8001366:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001368:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800136c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800136e:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001372:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001374:	4321      	orrs	r1, r4
 8001376:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001378:	6851      	ldr	r1, [r2, #4]
 800137a:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800137c:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800137e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001382:	4321      	orrs	r1, r4
 8001384:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001386:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001388:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800138a:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800138e:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001390:	4321      	orrs	r1, r4
 8001392:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001394:	4962      	ldr	r1, [pc, #392]	; (8001520 <UART_SetConfig+0x1c8>)
 8001396:	428a      	cmp	r2, r1
 8001398:	d112      	bne.n	80013c0 <UART_SetConfig+0x68>
 800139a:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 800139e:	4c61      	ldr	r4, [pc, #388]	; (8001524 <UART_SetConfig+0x1cc>)
 80013a0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80013a2:	f001 0103 	and.w	r1, r1, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013aa:	5c61      	ldrb	r1, [r4, r1]
 80013ac:	d06e      	beq.n	800148c <UART_SetConfig+0x134>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80013ae:	2908      	cmp	r1, #8
 80013b0:	d819      	bhi.n	80013e6 <UART_SetConfig+0x8e>
 80013b2:	e8df f001 	tbb	[pc, r1]
 80013b6:	8bb0      	.short	0x8bb0
 80013b8:	18b01896 	.word	0x18b01896
 80013bc:	1818      	.short	0x1818
 80013be:	a0          	.byte	0xa0
 80013bf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013c0:	4959      	ldr	r1, [pc, #356]	; (8001528 <UART_SetConfig+0x1d0>)
 80013c2:	428a      	cmp	r2, r1
 80013c4:	d12c      	bne.n	8001420 <UART_SetConfig+0xc8>
 80013c6:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 80013ca:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80013cc:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 80013d0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80013d4:	f000 809c 	beq.w	8001510 <UART_SetConfig+0x1b8>
 80013d8:	d807      	bhi.n	80013ea <UART_SetConfig+0x92>
 80013da:	2900      	cmp	r1, #0
 80013dc:	f000 8098 	beq.w	8001510 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013e4:	d06f      	beq.n	80014c6 <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80013e6:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80013e8:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013ea:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80013ee:	f000 8087 	beq.w	8001500 <UART_SetConfig+0x1a8>
 80013f2:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80013f6:	d1f3      	bne.n	80013e0 <UART_SetConfig+0x88>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013fc:	d171      	bne.n	80014e2 <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80013fe:	6841      	ldr	r1, [r0, #4]
 8001400:	084b      	lsrs	r3, r1, #1
 8001402:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001406:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 800140e:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001410:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001412:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001416:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800141a:	430b      	orrs	r3, r1
 800141c:	60d3      	str	r3, [r2, #12]
 800141e:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001420:	4942      	ldr	r1, [pc, #264]	; (800152c <UART_SetConfig+0x1d4>)
 8001422:	428a      	cmp	r2, r1
 8001424:	d10e      	bne.n	8001444 <UART_SetConfig+0xec>
 8001426:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 800142a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800142c:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8001430:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8001434:	d06c      	beq.n	8001510 <UART_SetConfig+0x1b8>
 8001436:	d9d0      	bls.n	80013da <UART_SetConfig+0x82>
 8001438:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800143c:	d060      	beq.n	8001500 <UART_SetConfig+0x1a8>
 800143e:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8001442:	e7d8      	b.n	80013f6 <UART_SetConfig+0x9e>
 8001444:	493a      	ldr	r1, [pc, #232]	; (8001530 <UART_SetConfig+0x1d8>)
 8001446:	428a      	cmp	r2, r1
 8001448:	d10e      	bne.n	8001468 <UART_SetConfig+0x110>
 800144a:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 800144e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001450:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8001454:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001458:	d05a      	beq.n	8001510 <UART_SetConfig+0x1b8>
 800145a:	d9be      	bls.n	80013da <UART_SetConfig+0x82>
 800145c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001460:	d04e      	beq.n	8001500 <UART_SetConfig+0x1a8>
 8001462:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8001466:	e7c6      	b.n	80013f6 <UART_SetConfig+0x9e>
 8001468:	4932      	ldr	r1, [pc, #200]	; (8001534 <UART_SetConfig+0x1dc>)
 800146a:	428a      	cmp	r2, r1
 800146c:	d1b8      	bne.n	80013e0 <UART_SetConfig+0x88>
 800146e:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8001472:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001474:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8001478:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800147c:	d048      	beq.n	8001510 <UART_SetConfig+0x1b8>
 800147e:	d9ac      	bls.n	80013da <UART_SetConfig+0x82>
 8001480:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001484:	d03c      	beq.n	8001500 <UART_SetConfig+0x1a8>
 8001486:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800148a:	e7b4      	b.n	80013f6 <UART_SetConfig+0x9e>
    switch (clocksource)
 800148c:	2908      	cmp	r1, #8
 800148e:	d81a      	bhi.n	80014c6 <UART_SetConfig+0x16e>
 8001490:	a301      	add	r3, pc, #4	; (adr r3, 8001498 <UART_SetConfig+0x140>)
 8001492:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014bd 	.word	0x080014bd
 800149c:	080014bd 	.word	0x080014bd
 80014a0:	080013ff 	.word	0x080013ff
 80014a4:	080014c7 	.word	0x080014c7
 80014a8:	080014bd 	.word	0x080014bd
 80014ac:	080014c7 	.word	0x080014c7
 80014b0:	080014c7 	.word	0x080014c7
 80014b4:	080014c7 	.word	0x080014c7
 80014b8:	08001507 	.word	0x08001507
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014bc:	6841      	ldr	r1, [r0, #4]
 80014be:	084b      	lsrs	r3, r1, #1
 80014c0:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80014c4:	e7a1      	b.n	800140a <UART_SetConfig+0xb2>
        ret = HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e7a2      	b.n	8001412 <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014cc:	6842      	ldr	r2, [r0, #4]
 80014ce:	0853      	lsrs	r3, r2, #1
 80014d0:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80014d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <UART_SetConfig+0x1c8>)
 80014da:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014dc:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014de:	2000      	movs	r0, #0
        break;
 80014e0:	bd30      	pop	{r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014e2:	6841      	ldr	r1, [r0, #4]
 80014e4:	084b      	lsrs	r3, r1, #1
 80014e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80014ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	e7f2      	b.n	80014dc <UART_SetConfig+0x184>
 80014f6:	6841      	ldr	r1, [r0, #4]
 80014f8:	084b      	lsrs	r3, r1, #1
 80014fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014fe:	e7f6      	b.n	80014ee <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001504:	d1f7      	bne.n	80014f6 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001506:	6841      	ldr	r1, [r0, #4]
 8001508:	084b      	lsrs	r3, r1, #1
 800150a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800150e:	e77c      	b.n	800140a <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001514:	d0d2      	beq.n	80014bc <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001516:	6841      	ldr	r1, [r0, #4]
 8001518:	084b      	lsrs	r3, r1, #1
 800151a:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 800151e:	e7e6      	b.n	80014ee <UART_SetConfig+0x196>
 8001520:	40013800 	.word	0x40013800
 8001524:	08001aac 	.word	0x08001aac
 8001528:	40004400 	.word	0x40004400
 800152c:	40004800 	.word	0x40004800
 8001530:	40004c00 	.word	0x40004c00
 8001534:	40005000 	.word	0x40005000

08001538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	9d06      	ldr	r5, [sp, #24]
 800153c:	4604      	mov	r4, r0
 800153e:	4616      	mov	r6, r2
 8001540:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001542:	6820      	ldr	r0, [r4, #0]
 8001544:	69c2      	ldr	r2, [r0, #28]
 8001546:	ea31 0302 	bics.w	r3, r1, r2
 800154a:	bf0c      	ite	eq
 800154c:	2201      	moveq	r2, #1
 800154e:	2200      	movne	r2, #0
 8001550:	42b2      	cmp	r2, r6
 8001552:	d001      	beq.n	8001558 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
}
 8001556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001558:	1c6b      	adds	r3, r5, #1
 800155a:	d0f3      	beq.n	8001544 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800155c:	b995      	cbnz	r5, 8001584 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001566:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001570:	2320      	movs	r3, #32
 8001572:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001576:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800157a:	2300      	movs	r3, #0
 800157c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001580:	2003      	movs	r0, #3
 8001582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001584:	f7ff fb02 	bl	8000b8c <HAL_GetTick>
 8001588:	1bc0      	subs	r0, r0, r7
 800158a:	4285      	cmp	r5, r0
 800158c:	d2d9      	bcs.n	8001542 <UART_WaitOnFlagUntilTimeout+0xa>
 800158e:	e7e6      	b.n	800155e <UART_WaitOnFlagUntilTimeout+0x26>

08001590 <UART_CheckIdleState>:
{
 8001590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001592:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001594:	2100      	movs	r1, #0
 8001596:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001598:	f7ff faf8 	bl	8000b8c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80015a2:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80015a4:	d417      	bmi.n	80015d6 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	075b      	lsls	r3, r3, #29
 80015ac:	d50a      	bpl.n	80015c4 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80015ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	462b      	mov	r3, r5
 80015b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff ffbb 	bl	8001538 <UART_WaitOnFlagUntilTimeout>
 80015c2:	b9a0      	cbnz	r0, 80015ee <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80015c4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80015c6:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80015c8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80015cc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80015d0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80015d4:	e00c      	b.n	80015f0 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80015d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	460a      	mov	r2, r1
 80015de:	4603      	mov	r3, r0
 80015e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff ffa7 	bl	8001538 <UART_WaitOnFlagUntilTimeout>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d0db      	beq.n	80015a6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80015ee:	2003      	movs	r0, #3
}
 80015f0:	b003      	add	sp, #12
 80015f2:	bd30      	pop	{r4, r5, pc}

080015f4 <HAL_UART_Init>:
{
 80015f4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80015f6:	4604      	mov	r4, r0
 80015f8:	b328      	cbz	r0, 8001646 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015fa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80015fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001602:	b90b      	cbnz	r3, 8001608 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8001604:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8001608:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800160a:	2324      	movs	r3, #36	; 0x24
 800160c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001610:	6813      	ldr	r3, [r2, #0]
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fe9d 	bl	8001358 <UART_SetConfig>
 800161e:	2801      	cmp	r0, #1
 8001620:	d011      	beq.n	8001646 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800162a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001632:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 800163a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8001642:	f7ff bfa5 	b.w	8001590 <UART_CheckIdleState>
}
 8001646:	2001      	movs	r0, #1
 8001648:	bd10      	pop	{r4, pc}

0800164a <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800164a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800164c:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800164e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001652:	2b20      	cmp	r3, #32
{
 8001654:	460d      	mov	r5, r1
 8001656:	4604      	mov	r4, r0
 8001658:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800165a:	d14b      	bne.n	80016f4 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 800165c:	2d00      	cmp	r5, #0
 800165e:	d047      	beq.n	80016f0 <HAL_UART_Transmit+0xa6>
 8001660:	2a00      	cmp	r2, #0
 8001662:	d045      	beq.n	80016f0 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001664:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001668:	2b01      	cmp	r3, #1
 800166a:	d043      	beq.n	80016f4 <HAL_UART_Transmit+0xaa>
 800166c:	2301      	movs	r3, #1
 800166e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001676:	2321      	movs	r3, #33	; 0x21
 8001678:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800167c:	f7ff fa86 	bl	8000b8c <HAL_GetTick>
 8001680:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8001682:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001686:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800168a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800168e:	b292      	uxth	r2, r2
 8001690:	b962      	cbnz	r2, 80016ac <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001692:	9700      	str	r7, [sp, #0]
 8001694:	4633      	mov	r3, r6
 8001696:	2140      	movs	r1, #64	; 0x40
 8001698:	4620      	mov	r0, r4
 800169a:	f7ff ff4d 	bl	8001538 <UART_WaitOnFlagUntilTimeout>
 800169e:	b998      	cbnz	r0, 80016c8 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016a0:	2320      	movs	r3, #32
 80016a2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016a6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80016aa:	e00e      	b.n	80016ca <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80016ac:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016b0:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016ba:	2200      	movs	r2, #0
 80016bc:	4633      	mov	r3, r6
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff ff39 	bl	8001538 <UART_WaitOnFlagUntilTimeout>
 80016c6:	b110      	cbz	r0, 80016ce <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80016c8:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80016ca:	b003      	add	sp, #12
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ce:	68a3      	ldr	r3, [r4, #8]
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d6:	d107      	bne.n	80016e8 <HAL_UART_Transmit+0x9e>
 80016d8:	6923      	ldr	r3, [r4, #16]
 80016da:	b92b      	cbnz	r3, 80016e8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 80016e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80016e6:	e7d0      	b.n	800168a <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80016e8:	782b      	ldrb	r3, [r5, #0]
 80016ea:	8513      	strh	r3, [r2, #40]	; 0x28
 80016ec:	3501      	adds	r5, #1
 80016ee:	e7cc      	b.n	800168a <HAL_UART_Transmit+0x40>
      return  HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
 80016f2:	e7ea      	b.n	80016ca <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80016f4:	2002      	movs	r0, #2
 80016f6:	e7e8      	b.n	80016ca <HAL_UART_Transmit+0x80>

080016f8 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80016fc:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80016fe:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001702:	2b20      	cmp	r3, #32
{
 8001704:	460d      	mov	r5, r1
 8001706:	4604      	mov	r4, r0
 8001708:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800170a:	d15d      	bne.n	80017c8 <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0U))
 800170c:	2d00      	cmp	r5, #0
 800170e:	d059      	beq.n	80017c4 <HAL_UART_Receive+0xcc>
 8001710:	2a00      	cmp	r2, #0
 8001712:	d057      	beq.n	80017c4 <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001714:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001718:	2b01      	cmp	r3, #1
 800171a:	d055      	beq.n	80017c8 <HAL_UART_Receive+0xd0>
 800171c:	2301      	movs	r3, #1
 800171e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8001722:	6803      	ldr	r3, [r0, #0]
 8001724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001728:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172a:	2300      	movs	r3, #0
 800172c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800172e:	2322      	movs	r3, #34	; 0x22
 8001730:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001734:	f7ff fa2a 	bl	8000b8c <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001738:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800173a:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800173e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001742:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001744:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001748:	d115      	bne.n	8001776 <HAL_UART_Receive+0x7e>
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	b98b      	cbnz	r3, 8001772 <HAL_UART_Receive+0x7a>
 800174e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001752:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001756:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800175a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800175e:	b280      	uxth	r0, r0
 8001760:	b980      	cbnz	r0, 8001784 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001762:	2320      	movs	r3, #32
 8001764:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001768:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800176c:	b002      	add	sp, #8
 800176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001772:	23ff      	movs	r3, #255	; 0xff
 8001774:	e7ed      	b.n	8001752 <HAL_UART_Receive+0x5a>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ed      	bne.n	8001756 <HAL_UART_Receive+0x5e>
 800177a:	6923      	ldr	r3, [r4, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f8      	beq.n	8001772 <HAL_UART_Receive+0x7a>
 8001780:	237f      	movs	r3, #127	; 0x7f
 8001782:	e7e6      	b.n	8001752 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8001784:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001788:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 800178c:	3b01      	subs	r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001794:	2200      	movs	r2, #0
 8001796:	463b      	mov	r3, r7
 8001798:	2120      	movs	r1, #32
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff fecc 	bl	8001538 <UART_WaitOnFlagUntilTimeout>
 80017a0:	b9a0      	cbnz	r0, 80017cc <HAL_UART_Receive+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017a2:	68a3      	ldr	r3, [r4, #8]
 80017a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	d106      	bne.n	80017ba <HAL_UART_Receive+0xc2>
 80017ac:	6922      	ldr	r2, [r4, #16]
 80017ae:	b922      	cbnz	r2, 80017ba <HAL_UART_Receive+0xc2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80017b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017b2:	4033      	ands	r3, r6
 80017b4:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80017b8:	e7cf      	b.n	800175a <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80017ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017bc:	4033      	ands	r3, r6
 80017be:	702b      	strb	r3, [r5, #0]
 80017c0:	3501      	adds	r5, #1
 80017c2:	e7ca      	b.n	800175a <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
 80017c6:	e7d1      	b.n	800176c <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80017c8:	2002      	movs	r0, #2
 80017ca:	e7cf      	b.n	800176c <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80017cc:	2003      	movs	r0, #3
 80017ce:	e7cd      	b.n	800176c <HAL_UART_Receive+0x74>

080017d0 <KeyExpansion>:
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
 80017d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80017d2:	4a2b      	ldr	r2, [pc, #172]	; (8001880 <KeyExpansion+0xb0>)
 80017d4:	f852 3b04 	ldr.w	r3, [r2], #4
 80017d8:	f103 0110 	add.w	r1, r3, #16
 80017dc:	7818      	ldrb	r0, [r3, #0]
 80017de:	7010      	strb	r0, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80017e0:	7858      	ldrb	r0, [r3, #1]
 80017e2:	7050      	strb	r0, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80017e4:	7898      	ldrb	r0, [r3, #2]
 80017e6:	7090      	strb	r0, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80017e8:	78d8      	ldrb	r0, [r3, #3]
 80017ea:	70d0      	strb	r0, [r2, #3]
 80017ec:	3304      	adds	r3, #4
  for(i = 0; i < Nk; ++i)
 80017ee:	428b      	cmp	r3, r1
 80017f0:	f102 0204 	add.w	r2, r2, #4
 80017f4:	d1f2      	bne.n	80017dc <KeyExpansion+0xc>
 80017f6:	2104      	movs	r1, #4
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <KeyExpansion+0xb4>)
  return sbox[num];
 80017fa:	4823      	ldr	r0, [pc, #140]	; (8001888 <KeyExpansion+0xb8>)
  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
 80017fc:	eb0d 0401 	add.w	r4, sp, r1
{
 8001800:	2200      	movs	r2, #0
      tempa[j]=RoundKey[(i-1) * 4 + j];
 8001802:	5c9d      	ldrb	r5, [r3, r2]
 8001804:	5515      	strb	r5, [r2, r4]
    for(j = 0; j < 4; ++j)
 8001806:	3201      	adds	r2, #1
 8001808:	2a04      	cmp	r2, #4
 800180a:	d1fa      	bne.n	8001802 <KeyExpansion+0x32>
    }
    if (i % Nk == 0)
 800180c:	078a      	lsls	r2, r1, #30
 800180e:	d118      	bne.n	8001842 <KeyExpansion+0x72>
      // This function rotates the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
 8001810:	f89d 5004 	ldrb.w	r5, [sp, #4]
        tempa[0] = tempa[1];
        tempa[1] = tempa[2];
        tempa[2] = tempa[3];
 8001814:	f89d 6007 	ldrb.w	r6, [sp, #7]
      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
 8001818:	5d45      	ldrb	r5, [r0, r5]
  return sbox[num];
 800181a:	f89d 2005 	ldrb.w	r2, [sp, #5]
        tempa[3] = getSBoxValue(tempa[3]);
 800181e:	f88d 5007 	strb.w	r5, [sp, #7]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001822:	eb00 0591 	add.w	r5, r0, r1, lsr #2
  return sbox[num];
 8001826:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800182a:	5c82      	ldrb	r2, [r0, r2]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800182c:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
        tempa[1] = getSBoxValue(tempa[1]);
 8001830:	5dc7      	ldrb	r7, [r0, r7]
        tempa[2] = getSBoxValue(tempa[2]);
 8001832:	5d86      	ldrb	r6, [r0, r6]
        tempa[1] = getSBoxValue(tempa[1]);
 8001834:	f88d 7005 	strb.w	r7, [sp, #5]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001838:	406a      	eors	r2, r5
        tempa[2] = getSBoxValue(tempa[2]);
 800183a:	f88d 6006 	strb.w	r6, [sp, #6]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800183e:	f88d 2004 	strb.w	r2, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8001842:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001846:	f89d 5004 	ldrb.w	r5, [sp, #4]
 800184a:	406a      	eors	r2, r5
 800184c:	711a      	strb	r2, [r3, #4]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 800184e:	f89d 5005 	ldrb.w	r5, [sp, #5]
 8001852:	f813 2c0b 	ldrb.w	r2, [r3, #-11]
 8001856:	406a      	eors	r2, r5
 8001858:	715a      	strb	r2, [r3, #5]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 800185a:	f89d 5006 	ldrb.w	r5, [sp, #6]
 800185e:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 8001862:	406a      	eors	r2, r5
 8001864:	719a      	strb	r2, [r3, #6]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001866:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800186a:	f813 2c09 	ldrb.w	r2, [r3, #-9]
  for(; (i < (Nb * (Nr + 1))); ++i)
 800186e:	3101      	adds	r1, #1
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001870:	406a      	eors	r2, r5
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001872:	292c      	cmp	r1, #44	; 0x2c
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001874:	71da      	strb	r2, [r3, #7]
 8001876:	f103 0304 	add.w	r3, r3, #4
  for(; (i < (Nb * (Nr + 1))); ++i)
 800187a:	d1c1      	bne.n	8001800 <KeyExpansion+0x30>
  }
}
 800187c:	b003      	add	sp, #12
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	20000338 	.word	0x20000338
 8001884:	20000348 	.word	0x20000348
 8001888:	20000002 	.word	0x20000002

0800188c <AddRoundKey>:
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <AddRoundKey+0x34>)
{
 800188e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001890:	0100      	lsls	r0, r0, #4
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001892:	f8d1 70b4 	ldr.w	r7, [r1, #180]	; 0xb4
 8001896:	2300      	movs	r3, #0
 8001898:	3104      	adds	r1, #4
 800189a:	181c      	adds	r4, r3, r0
 800189c:	18fd      	adds	r5, r7, r3
 800189e:	440c      	add	r4, r1
{
 80018a0:	2200      	movs	r2, #0
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 80018a2:	f814 e002 	ldrb.w	lr, [r4, r2]
 80018a6:	782e      	ldrb	r6, [r5, #0]
 80018a8:	3201      	adds	r2, #1
 80018aa:	ea86 060e 	eor.w	r6, r6, lr
    for(j = 0; j < 4; ++j)
 80018ae:	2a04      	cmp	r2, #4
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 80018b0:	f805 6b01 	strb.w	r6, [r5], #1
    for(j = 0; j < 4; ++j)
 80018b4:	d1f5      	bne.n	80018a2 <AddRoundKey+0x16>
 80018b6:	3304      	adds	r3, #4
  for(i=0;i<4;++i)
 80018b8:	2b10      	cmp	r3, #16
 80018ba:	d1ee      	bne.n	800189a <AddRoundKey+0xe>
 80018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000338 	.word	0x20000338

080018c4 <SubBytes>:
      if (input_save[4*i+j] & 0x02) {
        volatile int i = 1;
        i+=1;
      }
      #endif
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <SubBytes+0x28>)
  return sbox[num];
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <SubBytes+0x2c>)
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80018c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
{
 80018cc:	b510      	push	{r4, lr}
 80018ce:	1d19      	adds	r1, r3, #4
 80018d0:	2200      	movs	r2, #0
  return sbox[num];
 80018d2:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 80018d6:	5d04      	ldrb	r4, [r0, r4]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80018d8:	f803 4022 	strb.w	r4, [r3, r2, lsl #2]
 80018dc:	3201      	adds	r2, #1
    for(j = 0; j < 4; ++j)
 80018de:	2a04      	cmp	r2, #4
 80018e0:	d1f7      	bne.n	80018d2 <SubBytes+0xe>
 80018e2:	3301      	adds	r3, #1
  for(i = 0; i < 4; ++i)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d1f3      	bne.n	80018d0 <SubBytes+0xc>
 80018e8:	bd10      	pop	{r4, pc}
 80018ea:	bf00      	nop
 80018ec:	20000338 	.word	0x20000338
 80018f0:	20000002 	.word	0x20000002

080018f4 <ShiftRows>:
        i += 1;
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][1];
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <ShiftRows+0x38>)
 80018f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  (*state)[0][1] = (*state)[1][1];
 80018fa:	7959      	ldrb	r1, [r3, #5]
  temp           = (*state)[0][1];
 80018fc:	785a      	ldrb	r2, [r3, #1]
  (*state)[0][1] = (*state)[1][1];
 80018fe:	7059      	strb	r1, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8001900:	7a59      	ldrb	r1, [r3, #9]
 8001902:	7159      	strb	r1, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8001904:	7b59      	ldrb	r1, [r3, #13]
 8001906:	7259      	strb	r1, [r3, #9]
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
 8001908:	7a99      	ldrb	r1, [r3, #10]
  (*state)[3][1] = temp;
 800190a:	735a      	strb	r2, [r3, #13]
  temp           = (*state)[0][2];
 800190c:	789a      	ldrb	r2, [r3, #2]
  (*state)[0][2] = (*state)[2][2];
 800190e:	7099      	strb	r1, [r3, #2]
        i += 1;
      }
      #endif

  temp       = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
 8001910:	7b99      	ldrb	r1, [r3, #14]
  (*state)[2][2] = temp;
 8001912:	729a      	strb	r2, [r3, #10]
  temp       = (*state)[1][2];
 8001914:	799a      	ldrb	r2, [r3, #6]
  (*state)[1][2] = (*state)[3][2];
 8001916:	7199      	strb	r1, [r3, #6]
      #endif
  #ifdef JITTER_2
  #endif
  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
 8001918:	7bd9      	ldrb	r1, [r3, #15]
  (*state)[3][2] = temp;
 800191a:	739a      	strb	r2, [r3, #14]
  temp       = (*state)[0][3];
 800191c:	78da      	ldrb	r2, [r3, #3]
  (*state)[0][3] = (*state)[3][3];
 800191e:	70d9      	strb	r1, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8001920:	7ad9      	ldrb	r1, [r3, #11]
 8001922:	73d9      	strb	r1, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8001924:	79d9      	ldrb	r1, [r3, #7]
 8001926:	72d9      	strb	r1, [r3, #11]
  (*state)[1][3] = temp;
 8001928:	71da      	strb	r2, [r3, #7]
 800192a:	4770      	bx	lr
 800192c:	20000338 	.word	0x20000338

08001930 <xtime>:
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001930:	09c3      	lsrs	r3, r0, #7
 8001932:	005a      	lsls	r2, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800193a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
 800193e:	b2c0      	uxtb	r0, r0
 8001940:	4770      	bx	lr
 8001942:	0000      	movs	r0, r0

08001944 <Cipher>:
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 8001944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff ff9f 	bl	800188c <AddRoundKey>
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
 800194e:	2401      	movs	r4, #1
  {
    SubBytes();
 8001950:	f7ff ffb8 	bl	80018c4 <SubBytes>
    ShiftRows();
 8001954:	f7ff ffce 	bl	80018f4 <ShiftRows>
    t   = (*state)[i][0];
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <Cipher+0x94>)
 800195a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800195e:	f101 0b10 	add.w	fp, r1, #16
 8001962:	f891 a000 	ldrb.w	sl, [r1]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8001966:	784e      	ldrb	r6, [r1, #1]
 8001968:	788d      	ldrb	r5, [r1, #2]
 800196a:	f891 9003 	ldrb.w	r9, [r1, #3]
 800196e:	ea8a 0006 	eor.w	r0, sl, r6
 8001972:	ea85 0809 	eor.w	r8, r5, r9
 8001976:	ea80 0708 	eor.w	r7, r0, r8
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800197a:	f7ff ffd9 	bl	8001930 <xtime>
 800197e:	ea8a 0000 	eor.w	r0, sl, r0
 8001982:	4078      	eors	r0, r7
 8001984:	7008      	strb	r0, [r1, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8001986:	ea86 0005 	eor.w	r0, r6, r5
 800198a:	f7ff ffd1 	bl	8001930 <xtime>
 800198e:	4070      	eors	r0, r6
 8001990:	4078      	eors	r0, r7
 8001992:	7048      	strb	r0, [r1, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8001994:	4640      	mov	r0, r8
 8001996:	f7ff ffcb 	bl	8001930 <xtime>
 800199a:	4068      	eors	r0, r5
 800199c:	4078      	eors	r0, r7
 800199e:	7088      	strb	r0, [r1, #2]
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80019a0:	ea8a 0009 	eor.w	r0, sl, r9
 80019a4:	f7ff ffc4 	bl	8001930 <xtime>
 80019a8:	ea89 0000 	eor.w	r0, r9, r0
 80019ac:	4047      	eors	r7, r0
 80019ae:	70cf      	strb	r7, [r1, #3]
 80019b0:	3104      	adds	r1, #4
  for(i = 0; i < 4; ++i)
 80019b2:	4559      	cmp	r1, fp
 80019b4:	d1d5      	bne.n	8001962 <Cipher+0x1e>
    MixColumns();
    AddRoundKey(round);
 80019b6:	4620      	mov	r0, r4
  for(round = 1; round < Nr; ++round)
 80019b8:	3401      	adds	r4, #1
 80019ba:	b2e4      	uxtb	r4, r4
    AddRoundKey(round);
 80019bc:	f7ff ff66 	bl	800188c <AddRoundKey>
  for(round = 1; round < Nr; ++round)
 80019c0:	2c0a      	cmp	r4, #10
 80019c2:	d1c5      	bne.n	8001950 <Cipher+0xc>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
 80019c4:	f7ff ff7e 	bl	80018c4 <SubBytes>
  ShiftRows();
 80019c8:	f7ff ff94 	bl	80018f4 <ShiftRows>
  AddRoundKey(Nr);
 80019cc:	4620      	mov	r0, r4
}
 80019ce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AddRoundKey(Nr);
 80019d2:	f7ff bf5b 	b.w	800188c <AddRoundKey>
 80019d6:	bf00      	nop
 80019d8:	20000338 	.word	0x20000338

080019dc <BlockCopy>:
  InvSubBytes();
  AddRoundKey(0);
}

static void BlockCopy(uint8_t* output, const uint8_t* input)
{
 80019dc:	1e4b      	subs	r3, r1, #1
 80019de:	3801      	subs	r0, #1
 80019e0:	310f      	adds	r1, #15
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 80019e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80019e6:	f800 2f01 	strb.w	r2, [r0, #1]!
  for (i=0;i<KEYLEN;++i)
 80019ea:	428b      	cmp	r3, r1
 80019ec:	d1f9      	bne.n	80019e2 <BlockCopy+0x6>
  }
}
 80019ee:	4770      	bx	lr

080019f0 <AES128_ECB_indp_setkey>:
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t* key)
{
  Key = key;
 80019f0:	4b01      	ldr	r3, [pc, #4]	; (80019f8 <AES128_ECB_indp_setkey+0x8>)
 80019f2:	6018      	str	r0, [r3, #0]
  KeyExpansion();
 80019f4:	f7ff beec 	b.w	80017d0 <KeyExpansion>
 80019f8:	20000338 	.word	0x20000338

080019fc <AES128_ECB_indp_crypto>:
}

void AES128_ECB_indp_crypto(uint8_t* input)
{
 80019fc:	b508      	push	{r3, lr}
 80019fe:	4601      	mov	r1, r0
  state = (state_t*)input;
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <AES128_ECB_indp_crypto+0x18>)
 8001a02:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  BlockCopy(input_save, input);
 8001a06:	30b8      	adds	r0, #184	; 0xb8
 8001a08:	f7ff ffe8 	bl	80019dc <BlockCopy>
  Cipher();
}
 8001a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Cipher();
 8001a10:	f7ff bf98 	b.w	8001944 <Cipher>
 8001a14:	20000338 	.word	0x20000338

08001a18 <aes_indep_init>:
#include "aes.h"

uint8_t enckey[16];

void aes_indep_init(void)
{
 8001a18:	4770      	bx	lr

08001a1a <aes_indep_key>:
	;
}

void aes_indep_key(uint8_t * key)
{
    AES128_ECB_indp_setkey(key);
 8001a1a:	f7ff bfe9 	b.w	80019f0 <AES128_ECB_indp_setkey>

08001a1e <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	AES128_ECB_indp_crypto(pt);
 8001a1e:	f7ff bfed 	b.w	80019fc <AES128_ECB_indp_crypto>

08001a22 <aes_indep_enc_pretrigger>:
 8001a22:	4770      	bx	lr

08001a24 <aes_indep_enc_posttrigger>:
{
    ;
}

void aes_indep_enc_posttrigger(uint8_t * pt)
{
 8001a24:	4770      	bx	lr

08001a26 <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
 8001a26:	4770      	bx	lr

08001a28 <Reset_Handler>:
 8001a28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a2a:	e003      	b.n	8001a34 <LoopCopyDataInit>

08001a2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8001a2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a32:	3104      	adds	r1, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a34:	480a      	ldr	r0, [pc, #40]	; (8001a60 <LoopForever+0x6>)
	ldr	r3, =_edata
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <LoopForever+0xa>)
	adds	r2, r0, r1
 8001a38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a3c:	d3f6      	bcc.n	8001a2c <CopyDataInit>
	ldr	r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <LoopForever+0xe>)
	b	LoopFillZerobss
 8001a40:	e002      	b.n	8001a48 <LoopFillZerobss>

08001a42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 8001a42:	2300      	movs	r3, #0
 	str  r3, [r2]
 8001a44:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 8001a46:	3204      	adds	r2, #4

08001a48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <LoopForever+0x12>)
	cmp	r2, r3
 8001a4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a4c:	d3f9      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4e:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f7fe fbeb 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a56:	f7fe fe1f 	bl	8000698 <main>

08001a5a <LoopForever>:



LoopForever:
    b LoopForever
 8001a5a:	e7fe      	b.n	8001a5a <LoopForever>
 8001a5c:	08001b1c 	.word	0x08001b1c
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000210 	.word	0x20000210
 8001a68:	20000210 	.word	0x20000210
 8001a6c:	20000474 	.word	0x20000474

08001a70 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <BusFault_Handler>
 8001a72:	0000      	movs	r0, r0

08001a74 <_init>:
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	bf00      	nop
 8001a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7a:	bc08      	pop	{r3}
 8001a7c:	469e      	mov	lr, r3
 8001a7e:	4770      	bx	lr

08001a80 <_fini>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	bf00      	nop
 8001a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a86:	bc08      	pop	{r3}
 8001a88:	469e      	mov	lr, r3
 8001a8a:	4770      	bx	lr
