
simpleserial-ecc-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002348  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080024d0  080024d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e4  080025e4  000125ec  2**0
                  CONTENTS
  4 .ARM          00000000  080025e4  080025e4  000125ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e4  080025ec  000125ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000125ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000000  080025ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001dc  080025ec  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000125ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af91  00000000  00000000  00012616  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fe8  00000000  00000000  0001d5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004eda  00000000  00000000  0001e58f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000400  00000000  00000000  00023469  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000700  00000000  00000000  00023869  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000020a7  00000000  00000000  00023f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000211a  00000000  00000000  00026010  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  0002812a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f60  00000000  00000000  000281ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  0002910c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00029250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024b8 	.word	0x080024b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080024b8 	.word	0x080024b8

080001c8 <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 80001c8:	b510      	push	{r4, lr}
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 80001ca:	3a01      	subs	r2, #1
 80001cc:	b252      	sxtb	r2, r2
 80001ce:	0613      	lsls	r3, r2, #24
 80001d0:	d501      	bpl.n	80001d6 <uECC_vli_cmp_unsafe+0xe>
            return 1;
        } else if (left[i] < right[i]) {
            return -1;
        }
    }
    return 0;
 80001d2:	2000      	movs	r0, #0
}
 80001d4:	bd10      	pop	{r4, pc}
        if (left[i] > right[i]) {
 80001d6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80001da:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80001de:	429c      	cmp	r4, r3
 80001e0:	d805      	bhi.n	80001ee <uECC_vli_cmp_unsafe+0x26>
 80001e2:	f102 32ff 	add.w	r2, r2, #4294967295
        } else if (left[i] < right[i]) {
 80001e6:	d2f2      	bcs.n	80001ce <uECC_vli_cmp_unsafe+0x6>
            return -1;
 80001e8:	f04f 30ff 	mov.w	r0, #4294967295
 80001ec:	e7f2      	b.n	80001d4 <uECC_vli_cmp_unsafe+0xc>
            return 1;
 80001ee:	2001      	movs	r0, #1
 80001f0:	e7f0      	b.n	80001d4 <uECC_vli_cmp_unsafe+0xc>
 80001f2:	0000      	movs	r0, r0

080001f4 <setreg>:
uint8_t pcsamp_enable;

uint8_t setreg(uint8_t* x)
{
        uint32_t val;
        val = x[4] + (x[3] << 8) + (x[2] << 16) + (x[1] << 24);
 80001f4:	78c2      	ldrb	r2, [r0, #3]
 80001f6:	7903      	ldrb	r3, [r0, #4]
 80001f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80001fc:	7882      	ldrb	r2, [r0, #2]
 80001fe:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8000202:	7842      	ldrb	r2, [r0, #1]
 8000204:	eb03 6302 	add.w	r3, r3, r2, lsl #24
//8:  TPI->ACPR
//9:  TPI->SPPR
//10: TPI->FFCR
//11: TPI->CSPSR
//12: ITM->TCR
        if       (x[0] == 0)    {DWT->CTRL = val;}
 8000208:	7802      	ldrb	r2, [r0, #0]
 800020a:	b912      	cbnz	r2, 8000212 <setreg+0x1e>
 800020c:	4a2e      	ldr	r2, [pc, #184]	; (80002c8 <setreg+0xd4>)
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
 800020e:	6013      	str	r3, [r2, #0]
 8000210:	e003      	b.n	800021a <setreg+0x26>
        else if  (x[0] == 1)    {DWT->COMP0 = val;}
 8000212:	2a01      	cmp	r2, #1
 8000214:	d103      	bne.n	800021e <setreg+0x2a>
 8000216:	4a2c      	ldr	r2, [pc, #176]	; (80002c8 <setreg+0xd4>)
 8000218:	6213      	str	r3, [r2, #32]
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
        else if  (x[0] == 12)   {ITM->TCR     = val;}

	return 0x00;
}
 800021a:	2000      	movs	r0, #0
 800021c:	4770      	bx	lr
        else if  (x[0] == 2)    {DWT->COMP1 = val;}
 800021e:	2a02      	cmp	r2, #2
 8000220:	d102      	bne.n	8000228 <setreg+0x34>
 8000222:	4a29      	ldr	r2, [pc, #164]	; (80002c8 <setreg+0xd4>)
 8000224:	6313      	str	r3, [r2, #48]	; 0x30
 8000226:	e7f8      	b.n	800021a <setreg+0x26>
        else if  (x[0] == 3)    {ETM_SetupMode(); ETM->CR = val; ETM_TraceMode();}
 8000228:	2a03      	cmp	r2, #3
 800022a:	d109      	bne.n	8000240 <setreg+0x4c>
 800022c:	4a27      	ldr	r2, [pc, #156]	; (80002cc <setreg+0xd8>)
 800022e:	6811      	ldr	r1, [r2, #0]
 8000230:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000234:	6011      	str	r1, [r2, #0]
 8000236:	6013      	str	r3, [r2, #0]
 8000238:	6813      	ldr	r3, [r2, #0]
 800023a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800023e:	e7e6      	b.n	800020e <setreg+0x1a>
        else if  (x[0] == 4)    {ETM_SetupMode(); ETM->TESSEICR = val; ETM_TraceMode();}
 8000240:	2a04      	cmp	r2, #4
 8000242:	d107      	bne.n	8000254 <setreg+0x60>
 8000244:	4a21      	ldr	r2, [pc, #132]	; (80002cc <setreg+0xd8>)
 8000246:	6811      	ldr	r1, [r2, #0]
 8000248:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800024c:	6011      	str	r1, [r2, #0]
 800024e:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
 8000252:	e7f1      	b.n	8000238 <setreg+0x44>
        else if  (x[0] == 5)    {ETM_SetupMode(); ETM->TEEVR    = val; ETM_TraceMode();}
 8000254:	2a05      	cmp	r2, #5
 8000256:	d106      	bne.n	8000266 <setreg+0x72>
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <setreg+0xd8>)
 800025a:	6811      	ldr	r1, [r2, #0]
 800025c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000260:	6011      	str	r1, [r2, #0]
 8000262:	6213      	str	r3, [r2, #32]
 8000264:	e7e8      	b.n	8000238 <setreg+0x44>
        else if  (x[0] == 6)    {ETM_SetupMode(); ETM->TECR1    = val; ETM_TraceMode();}
 8000266:	2a06      	cmp	r2, #6
 8000268:	d106      	bne.n	8000278 <setreg+0x84>
 800026a:	4a18      	ldr	r2, [pc, #96]	; (80002cc <setreg+0xd8>)
 800026c:	6811      	ldr	r1, [r2, #0]
 800026e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000272:	6011      	str	r1, [r2, #0]
 8000274:	6253      	str	r3, [r2, #36]	; 0x24
 8000276:	e7df      	b.n	8000238 <setreg+0x44>
        else if  (x[0] == 7)    {ETM_SetupMode(); ETM->TRACEIDR = val; ETM_TraceMode();}
 8000278:	2a07      	cmp	r2, #7
 800027a:	d107      	bne.n	800028c <setreg+0x98>
 800027c:	4a13      	ldr	r2, [pc, #76]	; (80002cc <setreg+0xd8>)
 800027e:	6811      	ldr	r1, [r2, #0]
 8000280:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000284:	6011      	str	r1, [r2, #0]
 8000286:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 800028a:	e7d5      	b.n	8000238 <setreg+0x44>
        else if  (x[0] == 8)    {TPI->ACPR    = val;}
 800028c:	2a08      	cmp	r2, #8
 800028e:	d102      	bne.n	8000296 <setreg+0xa2>
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <setreg+0xdc>)
 8000292:	6113      	str	r3, [r2, #16]
 8000294:	e7c1      	b.n	800021a <setreg+0x26>
        else if  (x[0] == 9)    {TPI->SPPR    = val;}
 8000296:	2a09      	cmp	r2, #9
 8000298:	d103      	bne.n	80002a2 <setreg+0xae>
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <setreg+0xdc>)
 800029c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80002a0:	e7bb      	b.n	800021a <setreg+0x26>
        else if  (x[0] == 10)   {TPI->FFCR    = val;}
 80002a2:	2a0a      	cmp	r2, #10
 80002a4:	d103      	bne.n	80002ae <setreg+0xba>
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <setreg+0xdc>)
 80002a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80002ac:	e7b5      	b.n	800021a <setreg+0x26>
        else if  (x[0] == 11)   {TPI->CSPSR   = val;}
 80002ae:	2a0b      	cmp	r2, #11
 80002b0:	d102      	bne.n	80002b8 <setreg+0xc4>
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <setreg+0xdc>)
 80002b4:	6053      	str	r3, [r2, #4]
 80002b6:	e7b0      	b.n	800021a <setreg+0x26>
        else if  (x[0] == 12)   {ITM->TCR     = val;}
 80002b8:	2a0c      	cmp	r2, #12
 80002ba:	bf04      	itt	eq
 80002bc:	f04f 4260 	moveq.w	r2, #3758096384	; 0xe0000000
 80002c0:	f8c2 3e80 	streq.w	r3, [r2, #3712]	; 0xe80
 80002c4:	e7a9      	b.n	800021a <setreg+0x26>
 80002c6:	bf00      	nop
 80002c8:	e0001000 	.word	0xe0001000
 80002cc:	e0041000 	.word	0xe0041000
 80002d0:	e0040000 	.word	0xe0040000

080002d4 <set_px>:
   }
}


uint8_t set_px(uint8_t* x)
{
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <set_px+0x34>)
 80002d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d8:	f100 0620 	add.w	r6, r0, #32
   int i, j;
   for (i = 0; i < 8; i++) {
      P[7-i] = 0;
 80002dc:	2700      	movs	r7, #0
 80002de:	601f      	str	r7, [r3, #0]
 80002e0:	4605      	mov	r5, r0
 80002e2:	2218      	movs	r2, #24
      for (j = 0; j < 4; j++) {
         P[7-i] |= x[i*4+j] << ((3-j)*8);
 80002e4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80002e8:	fa01 f402 	lsl.w	r4, r1, r2
 80002ec:	6819      	ldr	r1, [r3, #0]
 80002ee:	3a08      	subs	r2, #8
 80002f0:	4321      	orrs	r1, r4
      for (j = 0; j < 4; j++) {
 80002f2:	f112 0f08 	cmn.w	r2, #8
         P[7-i] |= x[i*4+j] << ((3-j)*8);
 80002f6:	6019      	str	r1, [r3, #0]
      for (j = 0; j < 4; j++) {
 80002f8:	d1f4      	bne.n	80002e4 <set_px+0x10>
 80002fa:	3004      	adds	r0, #4
   for (i = 0; i < 8; i++) {
 80002fc:	42b0      	cmp	r0, r6
 80002fe:	f1a3 0304 	sub.w	r3, r3, #4
 8000302:	d1ec      	bne.n	80002de <set_px+0xa>
      }
   }
   return 0x00;
}
 8000304:	2000      	movs	r0, #0
 8000306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000308:	20000148 	.word	0x20000148

0800030c <set_py>:


uint8_t set_py(uint8_t* y)
{
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <set_py+0x34>)
 800030e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000310:	f100 0620 	add.w	r6, r0, #32
   // TODO: this conversion is used in multiple places, move it to a function:
   int i, j;
   for (i = 0; i < 8; i++) {
      P[15-i] = 0;
 8000314:	2700      	movs	r7, #0
 8000316:	601f      	str	r7, [r3, #0]
 8000318:	4605      	mov	r5, r0
 800031a:	2218      	movs	r2, #24
      for (j = 0; j < 4; j++) {
         P[15-i] |= y[i*4+j] << ((3-j)*8);
 800031c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000320:	fa01 f402 	lsl.w	r4, r1, r2
 8000324:	6819      	ldr	r1, [r3, #0]
 8000326:	3a08      	subs	r2, #8
 8000328:	4321      	orrs	r1, r4
      for (j = 0; j < 4; j++) {
 800032a:	f112 0f08 	cmn.w	r2, #8
         P[15-i] |= y[i*4+j] << ((3-j)*8);
 800032e:	6019      	str	r1, [r3, #0]
      for (j = 0; j < 4; j++) {
 8000330:	d1f4      	bne.n	800031c <set_py+0x10>
 8000332:	3004      	adds	r0, #4
   for (i = 0; i < 8; i++) {
 8000334:	42b0      	cmp	r0, r6
 8000336:	f1a3 0304 	sub.w	r3, r3, #4
 800033a:	d1ec      	bne.n	8000316 <set_py+0xa>
      }
   }
   return 0x00;
}
 800033c:	2000      	movs	r0, #0
 800033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000340:	20000168 	.word	0x20000168

08000344 <reset>:

uint8_t reset(uint8_t* x)
{
    // Reset key here if needed
	return 0x00;
}
 8000344:	2000      	movs	r0, #0
 8000346:	4770      	bx	lr

08000348 <getreg>:
{
 8000348:	b508      	push	{r3, lr}
        if       (x[0] == 0)    {val = DWT->CTRL;}
 800034a:	7803      	ldrb	r3, [r0, #0]
{
 800034c:	4602      	mov	r2, r0
        if       (x[0] == 0)    {val = DWT->CTRL;}
 800034e:	b913      	cbnz	r3, 8000356 <getreg+0xe>
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <getreg+0xa8>)
        else if  (x[0] == 3)    {val = ETM->CR;}
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	e008      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 1)    {val = DWT->COMP0;}
 8000356:	2b01      	cmp	r3, #1
 8000358:	d102      	bne.n	8000360 <getreg+0x18>
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <getreg+0xa8>)
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
 800035c:	6a1b      	ldr	r3, [r3, #32]
 800035e:	e003      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 2)    {val = DWT->COMP1 ;}
 8000360:	2b02      	cmp	r3, #2
 8000362:	d10e      	bne.n	8000382 <getreg+0x3a>
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <getreg+0xa8>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        x[3] = val & 0xff;
 8000368:	70d3      	strb	r3, [r2, #3]
        x[2] = (val >> 8) & 0xff;
 800036a:	0a19      	lsrs	r1, r3, #8
 800036c:	7091      	strb	r1, [r2, #2]
        x[1] = (val >> 16) & 0xff;
 800036e:	0c19      	lsrs	r1, r3, #16
        x[0] = (val >> 24) & 0xff;
 8000370:	0e1b      	lsrs	r3, r3, #24
        x[1] = (val >> 16) & 0xff;
 8000372:	7051      	strb	r1, [r2, #1]
        x[0] = (val >> 24) & 0xff;
 8000374:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 4, x);
 8000376:	2104      	movs	r1, #4
 8000378:	2072      	movs	r0, #114	; 0x72
 800037a:	f001 f903 	bl	8001584 <simpleserial_put>
}
 800037e:	2000      	movs	r0, #0
 8000380:	bd08      	pop	{r3, pc}
        else if  (x[0] == 3)    {val = ETM->CR;}
 8000382:	2b03      	cmp	r3, #3
 8000384:	d101      	bne.n	800038a <getreg+0x42>
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <getreg+0xac>)
 8000388:	e7e3      	b.n	8000352 <getreg+0xa>
        else if  (x[0] == 4)    {val = ETM->TESSEICR;}
 800038a:	2b04      	cmp	r3, #4
 800038c:	d103      	bne.n	8000396 <getreg+0x4e>
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <getreg+0xac>)
 8000390:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8000394:	e7e8      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 5)    {val = ETM->TEEVR;}
 8000396:	2b05      	cmp	r3, #5
 8000398:	d101      	bne.n	800039e <getreg+0x56>
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <getreg+0xac>)
 800039c:	e7de      	b.n	800035c <getreg+0x14>
        else if  (x[0] == 6)    {val = ETM->TECR1;}
 800039e:	2b06      	cmp	r3, #6
 80003a0:	d102      	bne.n	80003a8 <getreg+0x60>
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <getreg+0xac>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	e7df      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 7)    {val = ETM->TRACEIDR;}
 80003a8:	2b07      	cmp	r3, #7
 80003aa:	d103      	bne.n	80003b4 <getreg+0x6c>
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <getreg+0xac>)
 80003ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80003b2:	e7d9      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 8)    {val = TPI->ACPR;}
 80003b4:	2b08      	cmp	r3, #8
 80003b6:	d102      	bne.n	80003be <getreg+0x76>
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <getreg+0xb0>)
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	e7d4      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 9)    {val = TPI->SPPR;}
 80003be:	2b09      	cmp	r3, #9
 80003c0:	d103      	bne.n	80003ca <getreg+0x82>
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <getreg+0xb0>)
 80003c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80003c8:	e7ce      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 10)   {val = TPI->FFCR;}
 80003ca:	2b0a      	cmp	r3, #10
 80003cc:	d103      	bne.n	80003d6 <getreg+0x8e>
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <getreg+0xb0>)
 80003d0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80003d4:	e7c8      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 11)   {val = TPI->CSPSR;}
 80003d6:	2b0b      	cmp	r3, #11
 80003d8:	d102      	bne.n	80003e0 <getreg+0x98>
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <getreg+0xb0>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	e7c3      	b.n	8000368 <getreg+0x20>
        else if  (x[0] == 12)   {val = ITM->TCR;}
 80003e0:	2b0c      	cmp	r3, #12
 80003e2:	bf0a      	itet	eq
 80003e4:	f04f 4360 	moveq.w	r3, #3758096384	; 0xe0000000
        else {val = 0;}
 80003e8:	2300      	movne	r3, #0
        else if  (x[0] == 12)   {val = ITM->TCR;}
 80003ea:	f8d3 3e80 	ldreq.w	r3, [r3, #3712]	; 0xe80
 80003ee:	e7bb      	b.n	8000368 <getreg+0x20>
 80003f0:	e0001000 	.word	0xe0001000
 80003f4:	e0041000 	.word	0xe0041000
 80003f8:	e0040000 	.word	0xe0040000

080003fc <set_pcsample_params>:
{
 80003fc:	b570      	push	{r4, r5, r6, lr}
    pcsamp_enable = x[0] & 1;
 80003fe:	7803      	ldrb	r3, [r0, #0]
 8000400:	4910      	ldr	r1, [pc, #64]	; (8000444 <set_pcsample_params+0x48>)
    postreset = x[3] & 0xf;
 8000402:	78c4      	ldrb	r4, [r0, #3]
    pcsamp_enable = x[0] & 1;
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	700b      	strb	r3, [r1, #0]
    postinit  = x[2] & 0xf;
 800040a:	7881      	ldrb	r1, [r0, #2]
    cyctap = x[1] & 1;
 800040c:	7843      	ldrb	r3, [r0, #1]
{
 800040e:	4602      	mov	r2, r0
    postinit  = x[2] & 0xf;
 8000410:	f001 010f 	and.w	r1, r1, #15
    DWT->CTRL = 0;
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <set_pcsample_params+0x4c>)
    cyctap = x[1] & 1;
 8000416:	f003 0601 	and.w	r6, r3, #1
    DWT->CTRL = 0;
 800041a:	2500      	movs	r5, #0
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 800041c:	014b      	lsls	r3, r1, #5
    DWT->CTRL = 0;
 800041e:	6005      	str	r5, [r0, #0]
    DWT->CTRL = (postinit << DWT_CTRL_POSTINIT_Pos);
 8000420:	6003      	str	r3, [r0, #0]
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
 8000422:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
 8000426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    postreset = x[3] & 0xf;
 800042a:	f004 040f 	and.w	r4, r4, #15
              | (1 << DWT_CTRL_CYCCNTENA_Pos);
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    DWT->CTRL = (cyctap << DWT_CTRL_CYCTAP_Pos)
 8000436:	6003      	str	r3, [r0, #0]
    simpleserial_put('r', 4, x);
 8000438:	2104      	movs	r1, #4
 800043a:	2072      	movs	r0, #114	; 0x72
 800043c:	f001 f8a2 	bl	8001584 <simpleserial_put>
}
 8000440:	4628      	mov	r0, r5
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	200000e8 	.word	0x200000e8
 8000448:	e0001000 	.word	0xe0001000

0800044c <get_qx>:
{
 800044c:	4602      	mov	r2, r0
 800044e:	4601      	mov	r1, r0
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <get_qx+0x38>)
 8000452:	b570      	push	{r4, r5, r6, lr}
 8000454:	f102 0620 	add.w	r6, r2, #32
 8000458:	460d      	mov	r5, r1
 800045a:	2318      	movs	r3, #24
          x[i*4+j] = (int)((Q[7-i] >> (3-j)*8) & 255);
 800045c:	6804      	ldr	r4, [r0, #0]
 800045e:	40dc      	lsrs	r4, r3
 8000460:	3b08      	subs	r3, #8
       for (j = 0; j < 4; j++) {
 8000462:	f113 0f08 	cmn.w	r3, #8
          x[i*4+j] = (int)((Q[7-i] >> (3-j)*8) & 255);
 8000466:	f805 4b01 	strb.w	r4, [r5], #1
       for (j = 0; j < 4; j++) {
 800046a:	d1f7      	bne.n	800045c <get_qx+0x10>
 800046c:	3104      	adds	r1, #4
    for (i = 0; i < 8; i++) {
 800046e:	42b1      	cmp	r1, r6
 8000470:	f1a0 0004 	sub.w	r0, r0, #4
 8000474:	d1f0      	bne.n	8000458 <get_qx+0xc>
    simpleserial_put('r', 32, x);
 8000476:	2120      	movs	r1, #32
 8000478:	2072      	movs	r0, #114	; 0x72
 800047a:	f001 f883 	bl	8001584 <simpleserial_put>
}
 800047e:	2000      	movs	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	bf00      	nop
 8000484:	20000108 	.word	0x20000108

08000488 <get_qy>:
{
 8000488:	4602      	mov	r2, r0
 800048a:	4601      	mov	r1, r0
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <get_qy+0x38>)
 800048e:	b570      	push	{r4, r5, r6, lr}
 8000490:	f102 0620 	add.w	r6, r2, #32
 8000494:	460d      	mov	r5, r1
 8000496:	2318      	movs	r3, #24
          y[i*4+j] = (int)((Q[15-i] >> (3-j)*8) & 255);
 8000498:	6804      	ldr	r4, [r0, #0]
 800049a:	40dc      	lsrs	r4, r3
 800049c:	3b08      	subs	r3, #8
       for (j = 0; j < 4; j++) {
 800049e:	f113 0f08 	cmn.w	r3, #8
          y[i*4+j] = (int)((Q[15-i] >> (3-j)*8) & 255);
 80004a2:	f805 4b01 	strb.w	r4, [r5], #1
       for (j = 0; j < 4; j++) {
 80004a6:	d1f7      	bne.n	8000498 <get_qy+0x10>
 80004a8:	3104      	adds	r1, #4
    for (i = 0; i < 8; i++) {
 80004aa:	42b1      	cmp	r1, r6
 80004ac:	f1a0 0004 	sub.w	r0, r0, #4
 80004b0:	d1f0      	bne.n	8000494 <get_qy+0xc>
    simpleserial_put('r', 32, y);
 80004b2:	2120      	movs	r1, #32
 80004b4:	2072      	movs	r0, #114	; 0x72
 80004b6:	f001 f865 	bl	8001584 <simpleserial_put>
}
 80004ba:	2000      	movs	r0, #0
 80004bc:	bd70      	pop	{r4, r5, r6, pc}
 80004be:	bf00      	nop
 80004c0:	20000128 	.word	0x20000128

080004c4 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 80004c4:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 80004c6:	4603      	mov	r3, r0
 80004c8:	2000      	movs	r0, #0
 80004ca:	c910      	ldmia	r1!, {r4}
 80004cc:	ca20      	ldmia	r2!, {r5}
 80004ce:	1964      	adds	r4, r4, r5
 80004d0:	c310      	stmia	r3!, {r4}
 80004d2:	c910      	ldmia	r1!, {r4}
 80004d4:	ca20      	ldmia	r2!, {r5}
 80004d6:	416c      	adcs	r4, r5
 80004d8:	c310      	stmia	r3!, {r4}
 80004da:	c910      	ldmia	r1!, {r4}
 80004dc:	ca20      	ldmia	r2!, {r5}
 80004de:	416c      	adcs	r4, r5
 80004e0:	c310      	stmia	r3!, {r4}
 80004e2:	c910      	ldmia	r1!, {r4}
 80004e4:	ca20      	ldmia	r2!, {r5}
 80004e6:	416c      	adcs	r4, r5
 80004e8:	c310      	stmia	r3!, {r4}
 80004ea:	c910      	ldmia	r1!, {r4}
 80004ec:	ca20      	ldmia	r2!, {r5}
 80004ee:	416c      	adcs	r4, r5
 80004f0:	c310      	stmia	r3!, {r4}
 80004f2:	c910      	ldmia	r1!, {r4}
 80004f4:	ca20      	ldmia	r2!, {r5}
 80004f6:	416c      	adcs	r4, r5
 80004f8:	c310      	stmia	r3!, {r4}
 80004fa:	c910      	ldmia	r1!, {r4}
 80004fc:	ca20      	ldmia	r2!, {r5}
 80004fe:	416c      	adcs	r4, r5
 8000500:	c310      	stmia	r3!, {r4}
 8000502:	c910      	ldmia	r1!, {r4}
 8000504:	ca20      	ldmia	r2!, {r5}
 8000506:	416c      	adcs	r4, r5
 8000508:	c310      	stmia	r3!, {r4}
 800050a:	4140      	adcs	r0, r0
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
}
 800050c:	bd30      	pop	{r4, r5, pc}

0800050e <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 800050e:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 8000510:	2300      	movs	r3, #0
 8000512:	c910      	ldmia	r1!, {r4}
 8000514:	ca20      	ldmia	r2!, {r5}
 8000516:	1b64      	subs	r4, r4, r5
 8000518:	c010      	stmia	r0!, {r4}
 800051a:	c910      	ldmia	r1!, {r4}
 800051c:	ca20      	ldmia	r2!, {r5}
 800051e:	41ac      	sbcs	r4, r5
 8000520:	c010      	stmia	r0!, {r4}
 8000522:	c910      	ldmia	r1!, {r4}
 8000524:	ca20      	ldmia	r2!, {r5}
 8000526:	41ac      	sbcs	r4, r5
 8000528:	c010      	stmia	r0!, {r4}
 800052a:	c910      	ldmia	r1!, {r4}
 800052c:	ca20      	ldmia	r2!, {r5}
 800052e:	41ac      	sbcs	r4, r5
 8000530:	c010      	stmia	r0!, {r4}
 8000532:	c910      	ldmia	r1!, {r4}
 8000534:	ca20      	ldmia	r2!, {r5}
 8000536:	41ac      	sbcs	r4, r5
 8000538:	c010      	stmia	r0!, {r4}
 800053a:	c910      	ldmia	r1!, {r4}
 800053c:	ca20      	ldmia	r2!, {r5}
 800053e:	41ac      	sbcs	r4, r5
 8000540:	c010      	stmia	r0!, {r4}
 8000542:	c910      	ldmia	r1!, {r4}
 8000544:	ca20      	ldmia	r2!, {r5}
 8000546:	41ac      	sbcs	r4, r5
 8000548:	c010      	stmia	r0!, {r4}
 800054a:	c910      	ldmia	r1!, {r4}
 800054c:	ca20      	ldmia	r2!, {r5}
 800054e:	41ac      	sbcs	r4, r5
 8000550:	c010      	stmia	r0!, {r4}
 8000552:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
                      (for some reason...) */
}
 8000554:	fab3 f083 	clz	r0, r3
 8000558:	0940      	lsrs	r0, r0, #5
 800055a:	bd30      	pop	{r4, r5, pc}

0800055c <uECC_vli_mult>:
        );
        return;
    }
#endif
#if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
    if (num_words == 8) {
 800055c:	2b08      	cmp	r3, #8
                                wordcount_t num_words) {
 800055e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (num_words == 8) {
 8000562:	f040 8102 	bne.w	800076a <uECC_vli_mult+0x20e>
        __asm__ volatile (
 8000566:	caf0      	ldmia	r2!, {r4, r5, r6, r7}
 8000568:	f851 eb04 	ldr.w	lr, [r1], #4
 800056c:	fba4 890e 	umull	r8, r9, r4, lr
 8000570:	f840 8b04 	str.w	r8, [r0], #4
 8000574:	f04f 0a00 	mov.w	sl, #0
 8000578:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800057c:	f04f 0b00 	mov.w	fp, #0
 8000580:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000584:	f04f 0c00 	mov.w	ip, #0
 8000588:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800058c:	f851 eb04 	ldr.w	lr, [r1], #4
 8000590:	f04f 0800 	mov.w	r8, #0
 8000594:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000598:	f840 8b04 	str.w	r8, [r0], #4
 800059c:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80005a0:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80005a4:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80005a8:	f851 eb04 	ldr.w	lr, [r1], #4
 80005ac:	f04f 0800 	mov.w	r8, #0
 80005b0:	fbe4 896e 	umaal	r8, r9, r4, lr
 80005b4:	f840 8b04 	str.w	r8, [r0], #4
 80005b8:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80005bc:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80005c0:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80005c4:	f851 eb04 	ldr.w	lr, [r1], #4
 80005c8:	f04f 0800 	mov.w	r8, #0
 80005cc:	fbe4 896e 	umaal	r8, r9, r4, lr
 80005d0:	f840 8b04 	str.w	r8, [r0], #4
 80005d4:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80005d8:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80005dc:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80005e0:	f851 eb04 	ldr.w	lr, [r1], #4
 80005e4:	f04f 0800 	mov.w	r8, #0
 80005e8:	fbe4 896e 	umaal	r8, r9, r4, lr
 80005ec:	f840 8b04 	str.w	r8, [r0], #4
 80005f0:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80005f4:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80005f8:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80005fc:	f851 eb04 	ldr.w	lr, [r1], #4
 8000600:	f04f 0800 	mov.w	r8, #0
 8000604:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000608:	f840 8b04 	str.w	r8, [r0], #4
 800060c:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000610:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000614:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000618:	f851 eb04 	ldr.w	lr, [r1], #4
 800061c:	f04f 0800 	mov.w	r8, #0
 8000620:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000624:	f840 8b04 	str.w	r8, [r0], #4
 8000628:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800062c:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000630:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000634:	f851 eb04 	ldr.w	lr, [r1], #4
 8000638:	f04f 0800 	mov.w	r8, #0
 800063c:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000640:	f840 8b04 	str.w	r8, [r0], #4
 8000644:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000648:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800064c:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000650:	f840 9b04 	str.w	r9, [r0], #4
 8000654:	f840 ab04 	str.w	sl, [r0], #4
 8000658:	f840 bb04 	str.w	fp, [r0], #4
 800065c:	f840 cb04 	str.w	ip, [r0], #4
 8000660:	f1a0 0020 	sub.w	r0, r0, #32
 8000664:	f1a1 0120 	sub.w	r1, r1, #32
 8000668:	caf0      	ldmia	r2!, {r4, r5, r6, r7}
 800066a:	f851 eb04 	ldr.w	lr, [r1], #4
 800066e:	f8d0 8000 	ldr.w	r8, [r0]
 8000672:	f04f 0900 	mov.w	r9, #0
 8000676:	fbe4 896e 	umaal	r8, r9, r4, lr
 800067a:	f840 8b04 	str.w	r8, [r0], #4
 800067e:	f04f 0a00 	mov.w	sl, #0
 8000682:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000686:	f04f 0b00 	mov.w	fp, #0
 800068a:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800068e:	f04f 0c00 	mov.w	ip, #0
 8000692:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000696:	f851 eb04 	ldr.w	lr, [r1], #4
 800069a:	f8d0 8000 	ldr.w	r8, [r0]
 800069e:	fbe4 896e 	umaal	r8, r9, r4, lr
 80006a2:	f840 8b04 	str.w	r8, [r0], #4
 80006a6:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80006aa:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80006ae:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80006b2:	f851 eb04 	ldr.w	lr, [r1], #4
 80006b6:	f8d0 8000 	ldr.w	r8, [r0]
 80006ba:	fbe4 896e 	umaal	r8, r9, r4, lr
 80006be:	f840 8b04 	str.w	r8, [r0], #4
 80006c2:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80006c6:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80006ca:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80006ce:	f851 eb04 	ldr.w	lr, [r1], #4
 80006d2:	f8d0 8000 	ldr.w	r8, [r0]
 80006d6:	fbe4 896e 	umaal	r8, r9, r4, lr
 80006da:	f840 8b04 	str.w	r8, [r0], #4
 80006de:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80006e2:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80006e6:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80006ea:	f851 eb04 	ldr.w	lr, [r1], #4
 80006ee:	f8d0 8000 	ldr.w	r8, [r0]
 80006f2:	fbe4 896e 	umaal	r8, r9, r4, lr
 80006f6:	f840 8b04 	str.w	r8, [r0], #4
 80006fa:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80006fe:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000702:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000706:	f851 eb04 	ldr.w	lr, [r1], #4
 800070a:	f8d0 8000 	ldr.w	r8, [r0]
 800070e:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000712:	f840 8b04 	str.w	r8, [r0], #4
 8000716:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800071a:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800071e:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000722:	f851 eb04 	ldr.w	lr, [r1], #4
 8000726:	f8d0 8000 	ldr.w	r8, [r0]
 800072a:	fbe4 896e 	umaal	r8, r9, r4, lr
 800072e:	f840 8b04 	str.w	r8, [r0], #4
 8000732:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000736:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800073a:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800073e:	f851 eb04 	ldr.w	lr, [r1], #4
 8000742:	f8d0 8000 	ldr.w	r8, [r0]
 8000746:	fbe4 896e 	umaal	r8, r9, r4, lr
 800074a:	f840 8b04 	str.w	r8, [r0], #4
 800074e:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000752:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000756:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800075a:	f840 9b04 	str.w	r9, [r0], #4
 800075e:	f840 ab04 	str.w	sl, [r0], #4
 8000762:	f840 bb04 	str.w	fp, [r0], #4
 8000766:	f840 cb04 	str.w	ip, [r0], #4
            : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
        );
        return;
    }
#endif
}
 800076a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800076e <uECC_vli_clear>:
    for (i = 0; i < num_words; ++i) {
 800076e:	2300      	movs	r3, #0
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 8000770:	b510      	push	{r4, lr}
        vli[i] = 0;
 8000772:	461c      	mov	r4, r3
    for (i = 0; i < num_words; ++i) {
 8000774:	b25a      	sxtb	r2, r3
 8000776:	4291      	cmp	r1, r2
 8000778:	dc00      	bgt.n	800077c <uECC_vli_clear+0xe>
}
 800077a:	bd10      	pop	{r4, pc}
        vli[i] = 0;
 800077c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8000780:	3301      	adds	r3, #1
 8000782:	e7f7      	b.n	8000774 <uECC_vli_clear+0x6>

08000784 <uECC_vli_isZero>:
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 8000784:	b510      	push	{r4, lr}
    for (i = 0; i < num_words; ++i) {
 8000786:	2300      	movs	r3, #0
    uECC_word_t bits = 0;
 8000788:	461a      	mov	r2, r3
    for (i = 0; i < num_words; ++i) {
 800078a:	b25c      	sxtb	r4, r3
 800078c:	42a1      	cmp	r1, r4
 800078e:	dc03      	bgt.n	8000798 <uECC_vli_isZero+0x14>
}
 8000790:	fab2 f082 	clz	r0, r2
 8000794:	0940      	lsrs	r0, r0, #5
 8000796:	bd10      	pop	{r4, pc}
        bits |= vli[i];
 8000798:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800079c:	3301      	adds	r3, #1
 800079e:	4322      	orrs	r2, r4
 80007a0:	e7f3      	b.n	800078a <uECC_vli_isZero+0x6>

080007a2 <uECC_vli_testBit>:
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80007a2:	114a      	asrs	r2, r1, #5
 80007a4:	2301      	movs	r3, #1
 80007a6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80007aa:	f001 011f 	and.w	r1, r1, #31
 80007ae:	fa03 f101 	lsl.w	r1, r3, r1
}
 80007b2:	4008      	ands	r0, r1
 80007b4:	4770      	bx	lr

080007b6 <regularize_k>:
}

static uECC_word_t regularize_k(const uECC_word_t * const k,
                                uECC_word_t *k0,
                                uECC_word_t *k1,
                                uECC_Curve curve) {
 80007b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80007ba:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
                                uECC_Curve curve) {
 80007be:	460f      	mov	r7, r1
    bitcount_t num_n_bits = curve->num_n_bits;
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 80007c0:	f103 0624 	add.w	r6, r3, #36	; 0x24
                                uECC_Curve curve) {
 80007c4:	4690      	mov	r8, r2
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80007c6:	f105 041f 	add.w	r4, r5, #31
 80007ca:	2220      	movs	r2, #32
 80007cc:	fb94 f4f2 	sdiv	r4, r4, r2
 80007d0:	b264      	sxtb	r4, r4
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 80007d2:	4601      	mov	r1, r0
 80007d4:	4623      	mov	r3, r4
 80007d6:	4632      	mov	r2, r6
 80007d8:	4638      	mov	r0, r7
 80007da:	f7ff fe73 	bl	80004c4 <uECC_vli_add>
 80007de:	b990      	cbnz	r0, 8000806 <regularize_k+0x50>
 80007e0:	ebb5 1f44 	cmp.w	r5, r4, lsl #5
 80007e4:	da11      	bge.n	800080a <regularize_k+0x54>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
         uECC_vli_testBit(k0, num_n_bits));
 80007e6:	4629      	mov	r1, r5
 80007e8:	4638      	mov	r0, r7
 80007ea:	f7ff ffda 	bl	80007a2 <uECC_vli_testBit>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 80007ee:	1c05      	adds	r5, r0, #0
 80007f0:	bf18      	it	ne
 80007f2:	2501      	movne	r5, #1
    uECC_vli_add(k1, k0, curve->n, num_n_words);
 80007f4:	4623      	mov	r3, r4
 80007f6:	4632      	mov	r2, r6
 80007f8:	4639      	mov	r1, r7
 80007fa:	4640      	mov	r0, r8
 80007fc:	f7ff fe62 	bl	80004c4 <uECC_vli_add>
    return carry;
}
 8000800:	4628      	mov	r0, r5
 8000802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8000806:	2501      	movs	r5, #1
 8000808:	e7f4      	b.n	80007f4 <regularize_k+0x3e>
 800080a:	4605      	mov	r5, r0
 800080c:	e7f2      	b.n	80007f4 <regularize_k+0x3e>

0800080e <uECC_vli_numBits>:
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 800080e:	3901      	subs	r1, #1
 8000810:	b249      	sxtb	r1, r1
 8000812:	060a      	lsls	r2, r1, #24
 8000814:	b2cb      	uxtb	r3, r1
 8000816:	d405      	bmi.n	8000824 <uECC_vli_numBits+0x16>
 8000818:	3901      	subs	r1, #1
 800081a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800081e:	6852      	ldr	r2, [r2, #4]
 8000820:	2a00      	cmp	r2, #0
 8000822:	d0f6      	beq.n	8000812 <uECC_vli_numBits+0x4>
    return (i + 1);
 8000824:	3301      	adds	r3, #1
 8000826:	b25b      	sxtb	r3, r3
    if (num_digits == 0) {
 8000828:	b173      	cbz	r3, 8000848 <uECC_vli_numBits+0x3a>
    digit = vli[num_digits - 1];
 800082a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800082e:	3a01      	subs	r2, #1
 8000830:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    for (i = 0; digit; ++i) {
 8000834:	2000      	movs	r0, #0
 8000836:	b922      	cbnz	r2, 8000842 <uECC_vli_numBits+0x34>
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 8000838:	3b01      	subs	r3, #1
 800083a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800083e:	b218      	sxth	r0, r3
 8000840:	4770      	bx	lr
        digit >>= 1;
 8000842:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
 8000844:	3001      	adds	r0, #1
 8000846:	e7f6      	b.n	8000836 <uECC_vli_numBits+0x28>
        return 0;
 8000848:	4618      	mov	r0, r3
}
 800084a:	4770      	bx	lr

0800084c <uECC_vli_set>:
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 800084c:	b510      	push	{r4, lr}
    for (i = 0; i < num_words; ++i) {
 800084e:	2300      	movs	r3, #0
 8000850:	b25c      	sxtb	r4, r3
 8000852:	42a2      	cmp	r2, r4
 8000854:	dc00      	bgt.n	8000858 <uECC_vli_set+0xc>
}
 8000856:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
 8000858:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800085c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8000860:	3301      	adds	r3, #1
 8000862:	e7f5      	b.n	8000850 <uECC_vli_set+0x4>

08000864 <vli_mmod_fast_secp256r1>:
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t tmp[num_words_secp256r1];
    int carry;
    
    /* t */
    uECC_vli_set(result, product, num_words_secp256r1);
 8000866:	2208      	movs	r2, #8
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8000868:	b089      	sub	sp, #36	; 0x24
 800086a:	460c      	mov	r4, r1
 800086c:	4606      	mov	r6, r0
    uECC_vli_set(result, product, num_words_secp256r1);
 800086e:	f7ff ffed 	bl	800084c <uECC_vli_set>
    
    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
    tmp[3] = product[11];
 8000872:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000874:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
 8000876:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000878:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
 800087a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800087c:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
 800087e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000880:	9306      	str	r3, [sp, #24]
    tmp[7] = product[15];
 8000882:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000884:	9307      	str	r3, [sp, #28]
    tmp[0] = tmp[1] = tmp[2] = 0;
 8000886:	2700      	movs	r7, #0
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8000888:	2308      	movs	r3, #8
 800088a:	466a      	mov	r2, sp
 800088c:	4669      	mov	r1, sp
 800088e:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
 8000890:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8000894:	9700      	str	r7, [sp, #0]
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 8000896:	f7ff fe15 	bl	80004c4 <uECC_vli_add>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 800089a:	2308      	movs	r3, #8
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 800089c:	4605      	mov	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 800089e:	466a      	mov	r2, sp
 80008a0:	4631      	mov	r1, r6
 80008a2:	4630      	mov	r0, r6
 80008a4:	f7ff fe0e 	bl	80004c4 <uECC_vli_add>
    
    /* s2 */
    tmp[3] = product[12];
 80008a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008aa:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
 80008ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008ae:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
 80008b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008b2:	9305      	str	r3, [sp, #20]
    tmp[6] = product[15];
 80008b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80008b6:	4405      	add	r5, r0
    tmp[7] = 0;
 80008b8:	e9cd 3706 	strd	r3, r7, [sp, #24]
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80008bc:	466a      	mov	r2, sp
 80008be:	2308      	movs	r3, #8
 80008c0:	4669      	mov	r1, sp
 80008c2:	4668      	mov	r0, sp
 80008c4:	f7ff fdfe 	bl	80004c4 <uECC_vli_add>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80008c8:	2308      	movs	r3, #8
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80008ca:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80008cc:	466a      	mov	r2, sp
 80008ce:	4631      	mov	r1, r6
 80008d0:	4630      	mov	r0, r6
 80008d2:	f7ff fdf7 	bl	80004c4 <uECC_vli_add>
    
    /* s3 */
    tmp[0] = product[8];
 80008d6:	6a23      	ldr	r3, [r4, #32]
 80008d8:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
 80008da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008dc:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
 80008de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008e0:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[14];
 80008e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008e4:	9306      	str	r3, [sp, #24]
    tmp[7] = product[15];
 80008e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008e8:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80008ea:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80008ec:	2308      	movs	r3, #8
 80008ee:	466a      	mov	r2, sp
 80008f0:	4631      	mov	r1, r6
 80008f2:	4630      	mov	r0, r6
    tmp[3] = tmp[4] = tmp[5] = 0;
 80008f4:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80008f8:	9703      	str	r7, [sp, #12]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80008fa:	f7ff fde3 	bl	80004c4 <uECC_vli_add>
    
    /* s4 */
    tmp[0] = product[9];
 80008fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000900:	9300      	str	r3, [sp, #0]
    tmp[1] = product[10];
 8000902:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp[2] = product[11];
    tmp[3] = product[13];
    tmp[4] = product[14];
 8000904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp[1] = product[10];
 8000906:	9301      	str	r3, [sp, #4]
    tmp[2] = product[11];
 8000908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800090a:	9302      	str	r3, [sp, #8]
    tmp[4] = product[14];
 800090c:	9204      	str	r2, [sp, #16]
    tmp[3] = product[13];
 800090e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmp[5] = product[15];
 8000910:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    tmp[3] = product[13];
 8000912:	9303      	str	r3, [sp, #12]
    tmp[6] = product[13];
 8000914:	e9cd 2305 	strd	r2, r3, [sp, #20]
    tmp[7] = product[8];
 8000918:	6a23      	ldr	r3, [r4, #32]
 800091a:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 800091c:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 800091e:	2308      	movs	r3, #8
 8000920:	466a      	mov	r2, sp
 8000922:	4631      	mov	r1, r6
 8000924:	4630      	mov	r0, r6
 8000926:	f7ff fdcd 	bl	80004c4 <uECC_vli_add>
    
    /* d1 */
    tmp[0] = product[11];
 800092a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800092c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
 800092e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000930:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
 8000932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000934:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[8];
 8000936:	6a23      	ldr	r3, [r4, #32]
 8000938:	9306      	str	r3, [sp, #24]
    tmp[7] = product[10];
 800093a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800093c:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 800093e:	4405      	add	r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000940:	2308      	movs	r3, #8
 8000942:	466a      	mov	r2, sp
 8000944:	4631      	mov	r1, r6
 8000946:	4630      	mov	r0, r6
    tmp[3] = tmp[4] = tmp[5] = 0;
 8000948:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800094c:	9703      	str	r7, [sp, #12]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 800094e:	f7ff fdde 	bl	800050e <uECC_vli_sub>
    
    /* d2 */
    tmp[0] = product[12];
 8000952:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000954:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
 8000956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000958:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
 800095a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800095c:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
 800095e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000960:	9303      	str	r3, [sp, #12]
    tmp[4] = tmp[5] = 0;
    tmp[6] = product[9];
 8000962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000964:	9306      	str	r3, [sp, #24]
    tmp[7] = product[11];
 8000966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000968:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 800096a:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 800096c:	2308      	movs	r3, #8
 800096e:	466a      	mov	r2, sp
 8000970:	4631      	mov	r1, r6
 8000972:	4630      	mov	r0, r6
    tmp[4] = tmp[5] = 0;
 8000974:	e9cd 7704 	strd	r7, r7, [sp, #16]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000978:	f7ff fdc9 	bl	800050e <uECC_vli_sub>
    
    /* d3 */
    tmp[0] = product[13];
 800097c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800097e:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
 8000980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000982:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
 8000984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000986:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
 8000988:	6a23      	ldr	r3, [r4, #32]
 800098a:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
 800098c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800098e:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
 8000990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp[6] = 0;
 8000992:	e9cd 3705 	strd	r3, r7, [sp, #20]
    tmp[7] = product[12];
 8000996:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000998:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 800099a:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 800099c:	2308      	movs	r3, #8
 800099e:	466a      	mov	r2, sp
 80009a0:	4631      	mov	r1, r6
 80009a2:	4630      	mov	r0, r6
 80009a4:	f7ff fdb3 	bl	800050e <uECC_vli_sub>
    
    /* d4 */
    tmp[0] = product[14];
 80009a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009aa:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
 80009ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmp[2] = 0;
 80009ae:	e9cd 3701 	strd	r3, r7, [sp, #4]
    tmp[3] = product[9];
 80009b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009b4:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
 80009b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b8:	9304      	str	r3, [sp, #16]
    tmp[5] = product[11];
 80009ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    tmp[6] = 0;
 80009bc:	e9cd 3705 	strd	r3, r7, [sp, #20]
    tmp[7] = product[13];
 80009c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009c2:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80009c4:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80009c6:	2308      	movs	r3, #8
 80009c8:	466a      	mov	r2, sp
 80009ca:	4631      	mov	r1, r6
 80009cc:	4630      	mov	r0, r6
 80009ce:	f7ff fd9e 	bl	800050e <uECC_vli_sub>
    
    if (carry < 0) {
 80009d2:	1a2d      	subs	r5, r5, r0
        do {
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 80009d4:	4c0d      	ldr	r4, [pc, #52]	; (8000a0c <vli_mmod_fast_secp256r1+0x1a8>)
    if (carry < 0) {
 80009d6:	d40f      	bmi.n	80009f8 <vli_mmod_fast_secp256r1+0x194>
        } while (carry < 0);
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 80009d8:	b935      	cbnz	r5, 80009e8 <vli_mmod_fast_secp256r1+0x184>
 80009da:	2208      	movs	r2, #8
 80009dc:	4631      	mov	r1, r6
 80009de:	4620      	mov	r0, r4
 80009e0:	f7ff fbf2 	bl	80001c8 <uECC_vli_cmp_unsafe>
 80009e4:	2801      	cmp	r0, #1
 80009e6:	d00f      	beq.n	8000a08 <vli_mmod_fast_secp256r1+0x1a4>
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 80009e8:	2308      	movs	r3, #8
 80009ea:	4622      	mov	r2, r4
 80009ec:	4631      	mov	r1, r6
 80009ee:	4630      	mov	r0, r6
 80009f0:	f7ff fd8d 	bl	800050e <uECC_vli_sub>
 80009f4:	1a2d      	subs	r5, r5, r0
 80009f6:	e7ef      	b.n	80009d8 <vli_mmod_fast_secp256r1+0x174>
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 80009f8:	2308      	movs	r3, #8
 80009fa:	4622      	mov	r2, r4
 80009fc:	4631      	mov	r1, r6
 80009fe:	4630      	mov	r0, r6
 8000a00:	f7ff fd60 	bl	80004c4 <uECC_vli_add>
        } while (carry < 0);
 8000a04:	182d      	adds	r5, r5, r0
 8000a06:	d4f7      	bmi.n	80009f8 <vli_mmod_fast_secp256r1+0x194>
        }
    }
}
 8000a08:	b009      	add	sp, #36	; 0x24
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	080024d4 	.word	0x080024d4

08000a10 <uECC_vli_rshift1>:
    vli += num_words;
 8000a10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    uECC_word_t carry = 0;
 8000a14:	2300      	movs	r3, #0
    while (vli-- > end) {
 8000a16:	4288      	cmp	r0, r1
 8000a18:	d300      	bcc.n	8000a1c <uECC_vli_rshift1+0xc>
}
 8000a1a:	4770      	bx	lr
        uECC_word_t temp = *vli;
 8000a1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
        *vli = (temp >> 1) | carry;
 8000a20:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8000a24:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 8000a26:	07d3      	lsls	r3, r2, #31
 8000a28:	e7f5      	b.n	8000a16 <uECC_vli_rshift1+0x6>

08000a2a <vli_modInv_update>:
    if (!EVEN(uv)) {
 8000a2a:	6803      	ldr	r3, [r0, #0]
                              wordcount_t num_words) {
 8000a2c:	b570      	push	{r4, r5, r6, lr}
    if (!EVEN(uv)) {
 8000a2e:	f013 0501 	ands.w	r5, r3, #1
                              wordcount_t num_words) {
 8000a32:	4606      	mov	r6, r0
 8000a34:	4614      	mov	r4, r2
    if (!EVEN(uv)) {
 8000a36:	d005      	beq.n	8000a44 <vli_modInv_update+0x1a>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 8000a38:	4613      	mov	r3, r2
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	4601      	mov	r1, r0
 8000a3e:	f7ff fd41 	bl	80004c4 <uECC_vli_add>
 8000a42:	4605      	mov	r5, r0
    uECC_vli_rshift1(uv, num_words);
 8000a44:	4621      	mov	r1, r4
 8000a46:	4630      	mov	r0, r6
 8000a48:	f7ff ffe2 	bl	8000a10 <uECC_vli_rshift1>
    if (carry) {
 8000a4c:	b145      	cbz	r5, 8000a60 <vli_modInv_update+0x36>
        uv[num_words - 1] |= HIGH_BIT_SET;
 8000a4e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8000a52:	3a01      	subs	r2, #1
 8000a54:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8000a58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5c:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
}
 8000a60:	bd70      	pop	{r4, r5, r6, pc}

08000a62 <uECC_vli_modAdd>:
                                  wordcount_t num_words) {
 8000a62:	b570      	push	{r4, r5, r6, lr}
 8000a64:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 8000a68:	461e      	mov	r6, r3
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8000a6a:	4623      	mov	r3, r4
                                  wordcount_t num_words) {
 8000a6c:	4605      	mov	r5, r0
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 8000a6e:	f7ff fd29 	bl	80004c4 <uECC_vli_add>
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8000a72:	b930      	cbnz	r0, 8000a82 <uECC_vli_modAdd+0x20>
 8000a74:	4622      	mov	r2, r4
 8000a76:	4629      	mov	r1, r5
 8000a78:	4630      	mov	r0, r6
 8000a7a:	f7ff fba5 	bl	80001c8 <uECC_vli_cmp_unsafe>
 8000a7e:	2801      	cmp	r0, #1
 8000a80:	d007      	beq.n	8000a92 <uECC_vli_modAdd+0x30>
        uECC_vli_sub(result, result, mod, num_words);
 8000a82:	4623      	mov	r3, r4
 8000a84:	4632      	mov	r2, r6
 8000a86:	4629      	mov	r1, r5
 8000a88:	4628      	mov	r0, r5
}
 8000a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        uECC_vli_sub(result, result, mod, num_words);
 8000a8e:	f7ff bd3e 	b.w	800050e <uECC_vli_sub>
}
 8000a92:	bd70      	pop	{r4, r5, r6, pc}

08000a94 <uECC_vli_modSub>:
                                  wordcount_t num_words) {
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 8000a9a:	461e      	mov	r6, r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8000a9c:	4623      	mov	r3, r4
                                  wordcount_t num_words) {
 8000a9e:	4605      	mov	r5, r0
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 8000aa0:	f7ff fd35 	bl	800050e <uECC_vli_sub>
    if (l_borrow) {
 8000aa4:	b138      	cbz	r0, 8000ab6 <uECC_vli_modSub+0x22>
        uECC_vli_add(result, result, mod, num_words);
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4632      	mov	r2, r6
 8000aaa:	4629      	mov	r1, r5
 8000aac:	4628      	mov	r0, r5
}
 8000aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        uECC_vli_add(result, result, mod, num_words);
 8000ab2:	f7ff bd07 	b.w	80004c4 <uECC_vli_add>
}
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}

08000ab8 <uECC_vli_modMult_fast>:
                                        uECC_Curve curve) {
 8000ab8:	b530      	push	{r4, r5, lr}
 8000aba:	461c      	mov	r4, r3
 8000abc:	b091      	sub	sp, #68	; 0x44
 8000abe:	4605      	mov	r5, r0
    uECC_vli_mult(product, left, right, curve->num_words);
 8000ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ac4:	4668      	mov	r0, sp
 8000ac6:	f7ff fd49 	bl	800055c <uECC_vli_mult>
    curve->mmod_fast(result, product);
 8000aca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8000ace:	4669      	mov	r1, sp
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	4798      	blx	r3
}
 8000ad4:	b011      	add	sp, #68	; 0x44
 8000ad6:	bd30      	pop	{r4, r5, pc}

08000ad8 <uECC_vli_modSquare_fast>:
    uECC_vli_modMult_fast(result, left, left, curve);
 8000ad8:	4613      	mov	r3, r2
 8000ada:	460a      	mov	r2, r1
 8000adc:	f7ff bfec 	b.w	8000ab8 <uECC_vli_modMult_fast>

08000ae0 <x_side_default>:
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 8000ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ae4:	b08b      	sub	sp, #44	; 0x2c
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4615      	mov	r5, r2
 8000aea:	4689      	mov	r9, r1
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8000aec:	ae0a      	add	r6, sp, #40	; 0x28
 8000aee:	221c      	movs	r2, #28
 8000af0:	2100      	movs	r1, #0
 8000af2:	a803      	add	r0, sp, #12
 8000af4:	f001 fcd8 	bl	80024a8 <memset>
 8000af8:	2303      	movs	r3, #3
 8000afa:	f846 3d20 	str.w	r3, [r6, #-32]!
    wordcount_t num_words = curve->num_words;
 8000afe:	f995 8000 	ldrsb.w	r8, [r5]
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 8000b02:	462a      	mov	r2, r5
 8000b04:	4649      	mov	r1, r9
 8000b06:	4620      	mov	r0, r4
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 8000b08:	1d2f      	adds	r7, r5, #4
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 8000b0a:	f7ff ffe5 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4632      	mov	r2, r6
 8000b12:	4621      	mov	r1, r4
 8000b14:	4620      	mov	r0, r4
 8000b16:	f8cd 8000 	str.w	r8, [sp]
 8000b1a:	f7ff ffbb 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 8000b1e:	462b      	mov	r3, r5
 8000b20:	464a      	mov	r2, r9
 8000b22:	4621      	mov	r1, r4
 8000b24:	4620      	mov	r0, r4
 8000b26:	f7ff ffc7 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 8000b2a:	f8cd 8000 	str.w	r8, [sp]
 8000b2e:	463b      	mov	r3, r7
 8000b30:	f105 0284 	add.w	r2, r5, #132	; 0x84
 8000b34:	4621      	mov	r1, r4
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff ff93 	bl	8000a62 <uECC_vli_modAdd>
}
 8000b3c:	b00b      	add	sp, #44	; 0x2c
 8000b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000b42 <mod_sqrt_default>:
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8000b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b44:	b091      	sub	sp, #68	; 0x44
 8000b46:	460e      	mov	r6, r1
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000b48:	221c      	movs	r2, #28
 8000b4a:	2100      	movs	r1, #0
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8000b4c:	4607      	mov	r7, r0
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000b4e:	a801      	add	r0, sp, #4
 8000b50:	f001 fcaa 	bl	80024a8 <memset>
 8000b54:	2401      	movs	r4, #1
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000b56:	221c      	movs	r2, #28
 8000b58:	2100      	movs	r1, #0
 8000b5a:	a809      	add	r0, sp, #36	; 0x24
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000b5c:	9400      	str	r4, [sp, #0]
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000b5e:	f001 fca3 	bl	80024a8 <memset>
    wordcount_t num_words = curve->num_words;
 8000b62:	4631      	mov	r1, r6
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8000b64:	466a      	mov	r2, sp
    wordcount_t num_words = curve->num_words;
 8000b66:	f911 5b04 	ldrsb.w	r5, [r1], #4
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000b6a:	9408      	str	r4, [sp, #32]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8000b6c:	462b      	mov	r3, r5
 8000b6e:	4668      	mov	r0, sp
 8000b70:	f7ff fca8 	bl	80004c4 <uECC_vli_add>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8000b74:	4629      	mov	r1, r5
 8000b76:	4668      	mov	r0, sp
 8000b78:	f7ff fe49 	bl	800080e <uECC_vli_numBits>
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	b204      	sxth	r4, r0
 8000b80:	2c01      	cmp	r4, #1
 8000b82:	dc06      	bgt.n	8000b92 <mod_sqrt_default+0x50>
    uECC_vli_set(a, l_result, num_words);
 8000b84:	462a      	mov	r2, r5
 8000b86:	a908      	add	r1, sp, #32
 8000b88:	4638      	mov	r0, r7
 8000b8a:	f7ff fe5f 	bl	800084c <uECC_vli_set>
}
 8000b8e:	b011      	add	sp, #68	; 0x44
 8000b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 8000b92:	a908      	add	r1, sp, #32
 8000b94:	4608      	mov	r0, r1
 8000b96:	4632      	mov	r2, r6
 8000b98:	f7ff ff9e 	bl	8000ad8 <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	4668      	mov	r0, sp
 8000ba0:	f7ff fdff 	bl	80007a2 <uECC_vli_testBit>
 8000ba4:	b128      	cbz	r0, 8000bb2 <mod_sqrt_default+0x70>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 8000ba6:	a908      	add	r1, sp, #32
 8000ba8:	4633      	mov	r3, r6
 8000baa:	463a      	mov	r2, r7
 8000bac:	4608      	mov	r0, r1
 8000bae:	f7ff ff83 	bl	8000ab8 <uECC_vli_modMult_fast>
 8000bb2:	3c01      	subs	r4, #1
 8000bb4:	b224      	sxth	r4, r4
 8000bb6:	e7e3      	b.n	8000b80 <mod_sqrt_default+0x3e>

08000bb8 <double_jacobian_default>:
                                    uECC_Curve curve) {
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    wordcount_t num_words = curve->num_words;
 8000bbc:	f993 6000 	ldrsb.w	r6, [r3]
                                    uECC_Curve curve) {
 8000bc0:	b092      	sub	sp, #72	; 0x48
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4689      	mov	r9, r1
    if (uECC_vli_isZero(Z1, num_words)) {
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4631      	mov	r1, r6
                                    uECC_Curve curve) {
 8000bca:	4615      	mov	r5, r2
 8000bcc:	4698      	mov	r8, r3
    if (uECC_vli_isZero(Z1, num_words)) {
 8000bce:	f7ff fdd9 	bl	8000784 <uECC_vli_isZero>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	f040 8091 	bne.w	8000cfa <double_jacobian_default+0x142>
    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8000bd8:	4642      	mov	r2, r8
 8000bda:	4649      	mov	r1, r9
 8000bdc:	a802      	add	r0, sp, #8
 8000bde:	f7ff ff7b 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8000be2:	4643      	mov	r3, r8
 8000be4:	aa02      	add	r2, sp, #8
 8000be6:	4621      	mov	r1, r4
 8000be8:	a80a      	add	r0, sp, #40	; 0x28
 8000bea:	f7ff ff65 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8000bee:	a902      	add	r1, sp, #8
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	f7ff ff70 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	462a      	mov	r2, r5
 8000bfc:	4649      	mov	r1, r9
 8000bfe:	4648      	mov	r0, r9
 8000c00:	f7ff ff5a 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8000c04:	f108 0704 	add.w	r7, r8, #4
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8000c08:	4642      	mov	r2, r8
 8000c0a:	4629      	mov	r1, r5
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f7ff ff63 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8000c12:	463b      	mov	r3, r7
 8000c14:	462a      	mov	r2, r5
 8000c16:	4621      	mov	r1, r4
 8000c18:	4620      	mov	r0, r4
 8000c1a:	9600      	str	r6, [sp, #0]
 8000c1c:	f7ff ff21 	bl	8000a62 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8000c20:	463b      	mov	r3, r7
 8000c22:	462a      	mov	r2, r5
 8000c24:	4629      	mov	r1, r5
 8000c26:	4628      	mov	r0, r5
 8000c28:	9600      	str	r6, [sp, #0]
 8000c2a:	f7ff ff1a 	bl	8000a62 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8000c2e:	463b      	mov	r3, r7
 8000c30:	462a      	mov	r2, r5
 8000c32:	4621      	mov	r1, r4
 8000c34:	4628      	mov	r0, r5
 8000c36:	9600      	str	r6, [sp, #0]
 8000c38:	f7ff ff2c 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	462a      	mov	r2, r5
 8000c40:	4621      	mov	r1, r4
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff ff38 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4622      	mov	r2, r4
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	4628      	mov	r0, r5
 8000c50:	9600      	str	r6, [sp, #0]
 8000c52:	f7ff ff06 	bl	8000a62 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 8000c56:	463b      	mov	r3, r7
 8000c58:	9600      	str	r6, [sp, #0]
 8000c5a:	462a      	mov	r2, r5
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff feff 	bl	8000a62 <uECC_vli_modAdd>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8000c64:	6823      	ldr	r3, [r4, #0]
    if (uECC_vli_testBit(X1, 0)) {
 8000c66:	07db      	lsls	r3, r3, #31
 8000c68:	d54a      	bpl.n	8000d00 <double_jacobian_default+0x148>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8000c6a:	4633      	mov	r3, r6
 8000c6c:	463a      	mov	r2, r7
 8000c6e:	4621      	mov	r1, r4
 8000c70:	4620      	mov	r0, r4
 8000c72:	f7ff fc27 	bl	80004c4 <uECC_vli_add>
        uECC_vli_rshift1(X1, num_words);
 8000c76:	4631      	mov	r1, r6
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8000c78:	4682      	mov	sl, r0
        uECC_vli_rshift1(X1, num_words);
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff fec8 	bl	8000a10 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 8000c80:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8000c84:	3b01      	subs	r3, #1
 8000c86:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8000c8a:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
 8000c8e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 8000c92:	4642      	mov	r2, r8
 8000c94:	4621      	mov	r1, r4
 8000c96:	4628      	mov	r0, r5
 8000c98:	f7ff ff1e 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	aa0a      	add	r2, sp, #40	; 0x28
 8000ca0:	4629      	mov	r1, r5
 8000ca2:	4628      	mov	r0, r5
 8000ca4:	9600      	str	r6, [sp, #0]
 8000ca6:	f7ff fef5 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8000caa:	463b      	mov	r3, r7
 8000cac:	aa0a      	add	r2, sp, #40	; 0x28
 8000cae:	4629      	mov	r1, r5
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	9600      	str	r6, [sp, #0]
 8000cb4:	f7ff feee 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8000cb8:	a90a      	add	r1, sp, #40	; 0x28
 8000cba:	4608      	mov	r0, r1
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	462a      	mov	r2, r5
 8000cc0:	9600      	str	r6, [sp, #0]
 8000cc2:	f7ff fee7 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	aa0a      	add	r2, sp, #40	; 0x28
 8000cca:	4621      	mov	r1, r4
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff fef3 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 8000cd2:	aa02      	add	r2, sp, #8
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4621      	mov	r1, r4
 8000cda:	9600      	str	r6, [sp, #0]
 8000cdc:	f7ff feda 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_set(X1, Z1, num_words);
 8000ce0:	4632      	mov	r2, r6
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fdb1 	bl	800084c <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 8000cea:	4649      	mov	r1, r9
 8000cec:	4628      	mov	r0, r5
 8000cee:	f7ff fdad 	bl	800084c <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 8000cf2:	a902      	add	r1, sp, #8
 8000cf4:	4648      	mov	r0, r9
 8000cf6:	f7ff fda9 	bl	800084c <uECC_vli_set>
}
 8000cfa:	b012      	add	sp, #72	; 0x48
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uECC_vli_rshift1(X1, num_words);
 8000d00:	4631      	mov	r1, r6
 8000d02:	4620      	mov	r0, r4
 8000d04:	f7ff fe84 	bl	8000a10 <uECC_vli_rshift1>
 8000d08:	e7c3      	b.n	8000c92 <double_jacobian_default+0xda>

08000d0a <XYcZ_addC>:
                      uECC_Curve curve) {
 8000d0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d0e:	b09b      	sub	sp, #108	; 0x6c
 8000d10:	4616      	mov	r6, r2
    wordcount_t num_words = curve->num_words;
 8000d12:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000d14:	f914 5b04 	ldrsb.w	r5, [r4], #4
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000d18:	9500      	str	r5, [sp, #0]
                      uECC_Curve curve) {
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	4607      	mov	r7, r0
 8000d1e:	4689      	mov	r9, r1
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000d20:	4623      	mov	r3, r4
 8000d22:	4602      	mov	r2, r0
 8000d24:	4631      	mov	r1, r6
 8000d26:	a802      	add	r0, sp, #8
 8000d28:	f7ff feb4 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 8000d2c:	a902      	add	r1, sp, #8
 8000d2e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000d30:	4608      	mov	r0, r1
 8000d32:	f7ff fed1 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 8000d36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000d38:	aa02      	add	r2, sp, #8
 8000d3a:	4639      	mov	r1, r7
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	f7ff febb 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 8000d42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000d44:	aa02      	add	r2, sp, #8
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	f7ff feb5 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 8000d4e:	4623      	mov	r3, r4
 8000d50:	464a      	mov	r2, r9
 8000d52:	4641      	mov	r1, r8
 8000d54:	a802      	add	r0, sp, #8
 8000d56:	9500      	str	r5, [sp, #0]
 8000d58:	f7ff fe83 	bl	8000a62 <uECC_vli_modAdd>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8000d5c:	4623      	mov	r3, r4
 8000d5e:	464a      	mov	r2, r9
 8000d60:	4641      	mov	r1, r8
 8000d62:	4640      	mov	r0, r8
 8000d64:	9500      	str	r5, [sp, #0]
 8000d66:	f7ff fe95 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	463a      	mov	r2, r7
 8000d6e:	4631      	mov	r1, r6
 8000d70:	a80a      	add	r0, sp, #40	; 0x28
 8000d72:	9500      	str	r5, [sp, #0]
 8000d74:	f7ff fe8e 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, t6, curve);                /* t2 = y1 * (C - B) = E */
 8000d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000d7a:	aa0a      	add	r2, sp, #40	; 0x28
 8000d7c:	4649      	mov	r1, r9
 8000d7e:	4648      	mov	r0, r9
 8000d80:	f7ff fe9a 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8000d84:	4623      	mov	r3, r4
 8000d86:	4632      	mov	r2, r6
 8000d88:	4639      	mov	r1, r7
 8000d8a:	a80a      	add	r0, sp, #40	; 0x28
 8000d8c:	9500      	str	r5, [sp, #0]
 8000d8e:	f7ff fe68 	bl	8000a62 <uECC_vli_modAdd>
    uECC_vli_modSquare_fast(X2, Y2, curve);                  /* t3 = (y2 - y1)^2 = D */
 8000d92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000d94:	4641      	mov	r1, r8
 8000d96:	4630      	mov	r0, r6
 8000d98:	f7ff fe9e 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	aa0a      	add	r2, sp, #40	; 0x28
 8000da0:	4631      	mov	r1, r6
 8000da2:	4630      	mov	r0, r6
 8000da4:	9500      	str	r5, [sp, #0]
 8000da6:	f7ff fe75 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8000daa:	4623      	mov	r3, r4
 8000dac:	4632      	mov	r2, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	a812      	add	r0, sp, #72	; 0x48
 8000db2:	9500      	str	r5, [sp, #0]
 8000db4:	f7ff fe6e 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, t7, curve);                /* t4 = (y2 - y1)*(B - x3) */
 8000db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000dba:	aa12      	add	r2, sp, #72	; 0x48
 8000dbc:	4641      	mov	r1, r8
 8000dbe:	4640      	mov	r0, r8
 8000dc0:	f7ff fe7a 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */
 8000dc4:	4623      	mov	r3, r4
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	4641      	mov	r1, r8
 8000dca:	4640      	mov	r0, r8
 8000dcc:	9500      	str	r5, [sp, #0]
 8000dce:	f7ff fe61 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t7, t5, curve);                  /* t7 = (y2 + y1)^2 = F */
 8000dd2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000dd4:	a902      	add	r1, sp, #8
 8000dd6:	a812      	add	r0, sp, #72	; 0x48
 8000dd8:	f7ff fe7e 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 8000ddc:	a912      	add	r1, sp, #72	; 0x48
 8000dde:	4623      	mov	r3, r4
 8000de0:	aa0a      	add	r2, sp, #40	; 0x28
 8000de2:	4608      	mov	r0, r1
 8000de4:	9500      	str	r5, [sp, #0]
 8000de6:	f7ff fe55 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 8000dea:	4623      	mov	r3, r4
 8000dec:	463a      	mov	r2, r7
 8000dee:	a912      	add	r1, sp, #72	; 0x48
 8000df0:	a80a      	add	r0, sp, #40	; 0x28
 8000df2:	9500      	str	r5, [sp, #0]
 8000df4:	f7ff fe4e 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(t6, t6, t5, curve);                /* t6 = (y2+y1)*(x3' - B) */
 8000df8:	a90a      	add	r1, sp, #40	; 0x28
 8000dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000dfc:	aa02      	add	r2, sp, #8
 8000dfe:	4608      	mov	r0, r1
 8000e00:	f7ff fe5a 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */
 8000e04:	4623      	mov	r3, r4
 8000e06:	464a      	mov	r2, r9
 8000e08:	a90a      	add	r1, sp, #40	; 0x28
 8000e0a:	4648      	mov	r0, r9
 8000e0c:	9500      	str	r5, [sp, #0]
 8000e0e:	f7ff fe41 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_set(X1, t7, num_words);
 8000e12:	462a      	mov	r2, r5
 8000e14:	a912      	add	r1, sp, #72	; 0x48
 8000e16:	4638      	mov	r0, r7
 8000e18:	f7ff fd18 	bl	800084c <uECC_vli_set>
}
 8000e1c:	b01b      	add	sp, #108	; 0x6c
 8000e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e22 <XYcZ_add>:
                     uECC_Curve curve) {
 8000e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e26:	b08b      	sub	sp, #44	; 0x2c
 8000e28:	4614      	mov	r4, r2
    wordcount_t num_words = curve->num_words;
 8000e2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e2c:	f915 6b04 	ldrsb.w	r6, [r5], #4
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000e30:	9600      	str	r6, [sp, #0]
                     uECC_Curve curve) {
 8000e32:	461f      	mov	r7, r3
 8000e34:	4680      	mov	r8, r0
 8000e36:	4689      	mov	r9, r1
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000e38:	462b      	mov	r3, r5
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	a802      	add	r0, sp, #8
 8000e40:	f7ff fe28 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 8000e44:	a902      	add	r1, sp, #8
 8000e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000e48:	4608      	mov	r0, r1
 8000e4a:	f7ff fe45 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 8000e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000e50:	aa02      	add	r2, sp, #8
 8000e52:	4641      	mov	r1, r8
 8000e54:	4640      	mov	r0, r8
 8000e56:	f7ff fe2f 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 8000e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000e5c:	aa02      	add	r2, sp, #8
 8000e5e:	4621      	mov	r1, r4
 8000e60:	4620      	mov	r0, r4
 8000e62:	f7ff fe29 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8000e66:	462b      	mov	r3, r5
 8000e68:	464a      	mov	r2, r9
 8000e6a:	4639      	mov	r1, r7
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	9600      	str	r6, [sp, #0]
 8000e70:	f7ff fe10 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 8000e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000e76:	4639      	mov	r1, r7
 8000e78:	a802      	add	r0, sp, #8
 8000e7a:	f7ff fe2d 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8000e7e:	a902      	add	r1, sp, #8
 8000e80:	462b      	mov	r3, r5
 8000e82:	4642      	mov	r2, r8
 8000e84:	4608      	mov	r0, r1
 8000e86:	9600      	str	r6, [sp, #0]
 8000e88:	f7ff fe04 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 8000e8c:	a902      	add	r1, sp, #8
 8000e8e:	462b      	mov	r3, r5
 8000e90:	4622      	mov	r2, r4
 8000e92:	4608      	mov	r0, r1
 8000e94:	9600      	str	r6, [sp, #0]
 8000e96:	f7ff fdfd 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 8000e9a:	462b      	mov	r3, r5
 8000e9c:	4642      	mov	r2, r8
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	9600      	str	r6, [sp, #0]
 8000ea4:	f7ff fdf6 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 8000ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000eaa:	4622      	mov	r2, r4
 8000eac:	4649      	mov	r1, r9
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f7ff fe02 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	aa02      	add	r2, sp, #8
 8000eb8:	4641      	mov	r1, r8
 8000eba:	4620      	mov	r0, r4
 8000ebc:	9600      	str	r6, [sp, #0]
 8000ebe:	f7ff fde9 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 8000ec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	4638      	mov	r0, r7
 8000eca:	f7ff fdf5 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8000ece:	462b      	mov	r3, r5
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	4639      	mov	r1, r7
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	9600      	str	r6, [sp, #0]
 8000ed8:	f7ff fddc 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_set(X2, t5, num_words);
 8000edc:	4632      	mov	r2, r6
 8000ede:	a902      	add	r1, sp, #8
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f7ff fcb3 	bl	800084c <uECC_vli_set>
}
 8000ee6:	b00b      	add	sp, #44	; 0x2c
 8000ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000eec <apply_z>:
                    uECC_Curve curve) {
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	4615      	mov	r5, r2
 8000ef0:	b089      	sub	sp, #36	; 0x24
 8000ef2:	461c      	mov	r4, r3
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	460e      	mov	r6, r1
    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4629      	mov	r1, r5
 8000efc:	4668      	mov	r0, sp
 8000efe:	f7ff fdeb 	bl	8000ad8 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8000f02:	4623      	mov	r3, r4
 8000f04:	466a      	mov	r2, sp
 8000f06:	4639      	mov	r1, r7
 8000f08:	4638      	mov	r0, r7
 8000f0a:	f7ff fdd5 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8000f0e:	4623      	mov	r3, r4
 8000f10:	462a      	mov	r2, r5
 8000f12:	4669      	mov	r1, sp
 8000f14:	4668      	mov	r0, sp
 8000f16:	f7ff fdcf 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	466a      	mov	r2, sp
 8000f1e:	4631      	mov	r1, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	f7ff fdc9 	bl	8000ab8 <uECC_vli_modMult_fast>
}
 8000f26:	b009      	add	sp, #36	; 0x24
 8000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f2a <uECC_vli_modInv>:
                                  wordcount_t num_words) {
 8000f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2c:	460f      	mov	r7, r1
 8000f2e:	b0a1      	sub	sp, #132	; 0x84
 8000f30:	4606      	mov	r6, r0
    if (uECC_vli_isZero(input, num_words)) {
 8000f32:	4619      	mov	r1, r3
 8000f34:	4638      	mov	r0, r7
                                  wordcount_t num_words) {
 8000f36:	4615      	mov	r5, r2
 8000f38:	461c      	mov	r4, r3
    if (uECC_vli_isZero(input, num_words)) {
 8000f3a:	f7ff fc23 	bl	8000784 <uECC_vli_isZero>
 8000f3e:	b120      	cbz	r0, 8000f4a <uECC_vli_modInv+0x20>
        uECC_vli_clear(result, num_words);
 8000f40:	4630      	mov	r0, r6
 8000f42:	f7ff fc14 	bl	800076e <uECC_vli_clear>
}
 8000f46:	b021      	add	sp, #132	; 0x84
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uECC_vli_set(a, input, num_words);
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	4668      	mov	r0, sp
 8000f50:	f7ff fc7c 	bl	800084c <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 8000f54:	4629      	mov	r1, r5
 8000f56:	a808      	add	r0, sp, #32
 8000f58:	f7ff fc78 	bl	800084c <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 8000f5c:	a810      	add	r0, sp, #64	; 0x40
 8000f5e:	4621      	mov	r1, r4
 8000f60:	f7ff fc05 	bl	800076e <uECC_vli_clear>
    u[0] = 1;
 8000f64:	2301      	movs	r3, #1
    uECC_vli_clear(v, num_words);
 8000f66:	a818      	add	r0, sp, #96	; 0x60
    u[0] = 1;
 8000f68:	9310      	str	r3, [sp, #64]	; 0x40
    uECC_vli_clear(v, num_words);
 8000f6a:	f7ff fc00 	bl	800076e <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8000f6e:	4622      	mov	r2, r4
 8000f70:	a908      	add	r1, sp, #32
 8000f72:	4668      	mov	r0, sp
 8000f74:	f7ff f928 	bl	80001c8 <uECC_vli_cmp_unsafe>
 8000f78:	b928      	cbnz	r0, 8000f86 <uECC_vli_modInv+0x5c>
    uECC_vli_set(result, u, num_words);
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	a910      	add	r1, sp, #64	; 0x40
 8000f7e:	4630      	mov	r0, r6
 8000f80:	f7ff fc64 	bl	800084c <uECC_vli_set>
 8000f84:	e7df      	b.n	8000f46 <uECC_vli_modInv+0x1c>
        if (EVEN(a)) {
 8000f86:	9b00      	ldr	r3, [sp, #0]
 8000f88:	07da      	lsls	r2, r3, #31
 8000f8a:	d409      	bmi.n	8000fa0 <uECC_vli_modInv+0x76>
            uECC_vli_rshift1(a, num_words);
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	4668      	mov	r0, sp
 8000f90:	f7ff fd3e 	bl	8000a10 <uECC_vli_rshift1>
            vli_modInv_update(u, mod, num_words);
 8000f94:	4622      	mov	r2, r4
 8000f96:	4629      	mov	r1, r5
 8000f98:	a810      	add	r0, sp, #64	; 0x40
            vli_modInv_update(v, mod, num_words);
 8000f9a:	f7ff fd46 	bl	8000a2a <vli_modInv_update>
 8000f9e:	e7e6      	b.n	8000f6e <uECC_vli_modInv+0x44>
        } else if (EVEN(b)) {
 8000fa0:	9b08      	ldr	r3, [sp, #32]
 8000fa2:	07db      	lsls	r3, r3, #31
 8000fa4:	d407      	bmi.n	8000fb6 <uECC_vli_modInv+0x8c>
            uECC_vli_rshift1(b, num_words);
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	a808      	add	r0, sp, #32
 8000faa:	f7ff fd31 	bl	8000a10 <uECC_vli_rshift1>
            vli_modInv_update(v, mod, num_words);
 8000fae:	4622      	mov	r2, r4
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	a818      	add	r0, sp, #96	; 0x60
 8000fb4:	e7f1      	b.n	8000f9a <uECC_vli_modInv+0x70>
        } else if (cmpResult > 0) {
 8000fb6:	2800      	cmp	r0, #0
            uECC_vli_sub(a, a, b, num_words);
 8000fb8:	4623      	mov	r3, r4
        } else if (cmpResult > 0) {
 8000fba:	dd1c      	ble.n	8000ff6 <uECC_vli_modInv+0xcc>
            uECC_vli_sub(a, a, b, num_words);
 8000fbc:	aa08      	add	r2, sp, #32
 8000fbe:	4669      	mov	r1, sp
 8000fc0:	4668      	mov	r0, sp
 8000fc2:	f7ff faa4 	bl	800050e <uECC_vli_sub>
            uECC_vli_rshift1(a, num_words);
 8000fc6:	4621      	mov	r1, r4
 8000fc8:	4668      	mov	r0, sp
 8000fca:	f7ff fd21 	bl	8000a10 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 8000fce:	4622      	mov	r2, r4
 8000fd0:	a918      	add	r1, sp, #96	; 0x60
 8000fd2:	a810      	add	r0, sp, #64	; 0x40
 8000fd4:	f7ff f8f8 	bl	80001c8 <uECC_vli_cmp_unsafe>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	da05      	bge.n	8000fe8 <uECC_vli_modInv+0xbe>
                uECC_vli_add(u, u, mod, num_words);
 8000fdc:	a910      	add	r1, sp, #64	; 0x40
 8000fde:	4623      	mov	r3, r4
 8000fe0:	462a      	mov	r2, r5
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	f7ff fa6e 	bl	80004c4 <uECC_vli_add>
            uECC_vli_sub(u, u, v, num_words);
 8000fe8:	a910      	add	r1, sp, #64	; 0x40
 8000fea:	4623      	mov	r3, r4
 8000fec:	aa18      	add	r2, sp, #96	; 0x60
 8000fee:	4608      	mov	r0, r1
 8000ff0:	f7ff fa8d 	bl	800050e <uECC_vli_sub>
 8000ff4:	e7ce      	b.n	8000f94 <uECC_vli_modInv+0x6a>
            uECC_vli_sub(b, b, a, num_words);
 8000ff6:	a908      	add	r1, sp, #32
 8000ff8:	466a      	mov	r2, sp
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	f7ff fa87 	bl	800050e <uECC_vli_sub>
            uECC_vli_rshift1(b, num_words);
 8001000:	4621      	mov	r1, r4
 8001002:	a808      	add	r0, sp, #32
 8001004:	f7ff fd04 	bl	8000a10 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 8001008:	4622      	mov	r2, r4
 800100a:	a910      	add	r1, sp, #64	; 0x40
 800100c:	a818      	add	r0, sp, #96	; 0x60
 800100e:	f7ff f8db 	bl	80001c8 <uECC_vli_cmp_unsafe>
 8001012:	2800      	cmp	r0, #0
 8001014:	da05      	bge.n	8001022 <uECC_vli_modInv+0xf8>
                uECC_vli_add(v, v, mod, num_words);
 8001016:	a918      	add	r1, sp, #96	; 0x60
 8001018:	4623      	mov	r3, r4
 800101a:	462a      	mov	r2, r5
 800101c:	4608      	mov	r0, r1
 800101e:	f7ff fa51 	bl	80004c4 <uECC_vli_add>
            uECC_vli_sub(v, v, u, num_words);
 8001022:	a918      	add	r1, sp, #96	; 0x60
 8001024:	4623      	mov	r3, r4
 8001026:	aa10      	add	r2, sp, #64	; 0x40
 8001028:	4608      	mov	r0, r1
 800102a:	f7ff fa70 	bl	800050e <uECC_vli_sub>
 800102e:	e7be      	b.n	8000fae <uECC_vli_modInv+0x84>

08001030 <EccPoint_mult>:
                          uECC_Curve curve) {
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	b0b1      	sub	sp, #196	; 0xc4
 8001036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800103a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 800103c:	9206      	str	r2, [sp, #24]
    wordcount_t num_words = curve->num_words;
 800103e:	f994 7000 	ldrsb.w	r7, [r4]
    uECC_vli_set(Rx[1], point, num_words);
 8001042:	a818      	add	r0, sp, #96	; 0x60
 8001044:	463a      	mov	r2, r7
                          uECC_Curve curve) {
 8001046:	461e      	mov	r6, r3
    uECC_vli_set(Rx[1], point, num_words);
 8001048:	f7ff fc00 	bl	800084c <uECC_vli_set>
    uECC_vli_set(Ry[1], point + num_words, num_words);
 800104c:	00bb      	lsls	r3, r7, #2
 800104e:	9307      	str	r3, [sp, #28]
 8001050:	9b05      	ldr	r3, [sp, #20]
 8001052:	00ba      	lsls	r2, r7, #2
 8001054:	4413      	add	r3, r2
 8001056:	4619      	mov	r1, r3
 8001058:	463a      	mov	r2, r7
 800105a:	a828      	add	r0, sp, #160	; 0xa0
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	f7ff fbf5 	bl	800084c <uECC_vli_set>
    wordcount_t num_words = curve->num_words;
 8001062:	f994 5000 	ldrsb.w	r5, [r4]
    if (initial_Z) {
 8001066:	2e00      	cmp	r6, #0
 8001068:	f000 8087 	beq.w	800117a <EccPoint_mult+0x14a>
        uECC_vli_set(z, initial_Z, num_words);
 800106c:	462a      	mov	r2, r5
 800106e:	4631      	mov	r1, r6
 8001070:	a808      	add	r0, sp, #32
 8001072:	f7ff fbeb 	bl	800084c <uECC_vli_set>
    uECC_vli_set(X2, X1, num_words);
 8001076:	ae10      	add	r6, sp, #64	; 0x40
 8001078:	462a      	mov	r2, r5
 800107a:	a918      	add	r1, sp, #96	; 0x60
 800107c:	4630      	mov	r0, r6
    uECC_vli_set(Y2, Y1, num_words);
 800107e:	f10d 0980 	add.w	r9, sp, #128	; 0x80
    uECC_vli_set(X2, X1, num_words);
 8001082:	f7ff fbe3 	bl	800084c <uECC_vli_set>
    uECC_vli_set(Y2, Y1, num_words);
 8001086:	a928      	add	r1, sp, #160	; 0xa0
 8001088:	4648      	mov	r0, r9
 800108a:	f7ff fbdf 	bl	800084c <uECC_vli_set>
    apply_z(X1, Y1, z, curve);
 800108e:	4623      	mov	r3, r4
 8001090:	aa08      	add	r2, sp, #32
 8001092:	a928      	add	r1, sp, #160	; 0xa0
 8001094:	a818      	add	r0, sp, #96	; 0x60
 8001096:	f7ff ff29 	bl	8000eec <apply_z>
    curve->double_jacobian(X1, Y1, z, curve);
 800109a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800109e:	4623      	mov	r3, r4
 80010a0:	aa08      	add	r2, sp, #32
 80010a2:	a928      	add	r1, sp, #160	; 0xa0
 80010a4:	a818      	add	r0, sp, #96	; 0x60
 80010a6:	47a8      	blx	r5
    apply_z(X2, Y2, z, curve);
 80010a8:	4623      	mov	r3, r4
 80010aa:	aa08      	add	r2, sp, #32
 80010ac:	4649      	mov	r1, r9
 80010ae:	4630      	mov	r0, r6
 80010b0:	f7ff ff1c 	bl	8000eec <apply_z>
    for (i = num_bits - 2; i > 0; --i) {
 80010b4:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
 80010b8:	3d02      	subs	r5, #2
 80010ba:	b22d      	sxth	r5, r5
 80010bc:	2d00      	cmp	r5, #0
 80010be:	dc63      	bgt.n	8001188 <EccPoint_mult+0x158>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80010c0:	9b06      	ldr	r3, [sp, #24]
 80010c2:	681d      	ldr	r5, [r3, #0]
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80010c4:	9400      	str	r4, [sp, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80010c6:	f005 0601 	and.w	r6, r5, #1
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80010ca:	ab10      	add	r3, sp, #64	; 0x40
 80010cc:	0176      	lsls	r6, r6, #5
 80010ce:	43ed      	mvns	r5, r5
 80010d0:	eb03 0806 	add.w	r8, r3, r6
 80010d4:	f005 0501 	and.w	r5, r5, #1
 80010d8:	ab20      	add	r3, sp, #128	; 0x80
 80010da:	441e      	add	r6, r3
 80010dc:	016d      	lsls	r5, r5, #5
 80010de:	ab10      	add	r3, sp, #64	; 0x40
 80010e0:	eb03 0905 	add.w	r9, r3, r5
 80010e4:	ab20      	add	r3, sp, #128	; 0x80
 80010e6:	441d      	add	r5, r3
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 80010e8:	f104 0a04 	add.w	sl, r4, #4
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80010ec:	462b      	mov	r3, r5
 80010ee:	464a      	mov	r2, r9
 80010f0:	4631      	mov	r1, r6
 80010f2:	4640      	mov	r0, r8
 80010f4:	f7ff fe09 	bl	8000d0a <XYcZ_addC>
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 80010f8:	4653      	mov	r3, sl
 80010fa:	aa10      	add	r2, sp, #64	; 0x40
 80010fc:	a918      	add	r1, sp, #96	; 0x60
 80010fe:	a808      	add	r0, sp, #32
 8001100:	9700      	str	r7, [sp, #0]
 8001102:	f7ff fcc7 	bl	8000a94 <uECC_vli_modSub>
    uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve);               /* Yb * (X1 - X0) */
 8001106:	a908      	add	r1, sp, #32
 8001108:	4623      	mov	r3, r4
 800110a:	4632      	mov	r2, r6
 800110c:	4608      	mov	r0, r1
 800110e:	f7ff fcd3 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, point, curve);                    /* xP * Yb * (X1 - X0) */
 8001112:	a908      	add	r1, sp, #32
 8001114:	4623      	mov	r3, r4
 8001116:	9a05      	ldr	r2, [sp, #20]
 8001118:	4608      	mov	r0, r1
 800111a:	f7ff fccd 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modInv(z, z, curve->p, num_words);            /* 1 / (xP * Yb * (X1 - X0)) */
 800111e:	a908      	add	r1, sp, #32
 8001120:	463b      	mov	r3, r7
 8001122:	4652      	mov	r2, sl
 8001124:	4608      	mov	r0, r1
 8001126:	f7ff ff00 	bl	8000f2a <uECC_vli_modInv>
    uECC_vli_modMult_fast(z, z, point + num_words, curve);
 800112a:	a908      	add	r1, sp, #32
 800112c:	4623      	mov	r3, r4
 800112e:	9a02      	ldr	r2, [sp, #8]
 8001130:	4608      	mov	r0, r1
 8001132:	f7ff fcc1 	bl	8000ab8 <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
 8001136:	a908      	add	r1, sp, #32
 8001138:	4623      	mov	r3, r4
 800113a:	4642      	mov	r2, r8
 800113c:	4608      	mov	r0, r1
 800113e:	f7ff fcbb 	bl	8000ab8 <uECC_vli_modMult_fast>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8001142:	9400      	str	r4, [sp, #0]
 8001144:	4633      	mov	r3, r6
 8001146:	4642      	mov	r2, r8
 8001148:	4629      	mov	r1, r5
 800114a:	4648      	mov	r0, r9
 800114c:	f7ff fe69 	bl	8000e22 <XYcZ_add>
    apply_z(Rx[0], Ry[0], z, curve);
 8001150:	4623      	mov	r3, r4
 8001152:	aa08      	add	r2, sp, #32
 8001154:	a920      	add	r1, sp, #128	; 0x80
 8001156:	a810      	add	r0, sp, #64	; 0x40
 8001158:	f7ff fec8 	bl	8000eec <apply_z>
    uECC_vli_set(result, Rx[0], num_words);
 800115c:	463a      	mov	r2, r7
 800115e:	a910      	add	r1, sp, #64	; 0x40
 8001160:	9804      	ldr	r0, [sp, #16]
 8001162:	f7ff fb73 	bl	800084c <uECC_vli_set>
    uECC_vli_set(result + num_words, Ry[0], num_words);
 8001166:	9b04      	ldr	r3, [sp, #16]
 8001168:	9c07      	ldr	r4, [sp, #28]
 800116a:	4423      	add	r3, r4
 800116c:	a920      	add	r1, sp, #128	; 0x80
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fb6c 	bl	800084c <uECC_vli_set>
}
 8001174:	b031      	add	sp, #196	; 0xc4
 8001176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uECC_vli_clear(z, num_words);
 800117a:	4629      	mov	r1, r5
 800117c:	a808      	add	r0, sp, #32
 800117e:	f7ff faf6 	bl	800076e <uECC_vli_clear>
        z[0] = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	9308      	str	r3, [sp, #32]
 8001186:	e776      	b.n	8001076 <EccPoint_mult+0x46>
        nb = !uECC_vli_testBit(scalar, i);
 8001188:	4629      	mov	r1, r5
 800118a:	9806      	ldr	r0, [sp, #24]
 800118c:	f7ff fb09 	bl	80007a2 <uECC_vli_testBit>
 8001190:	fab0 f080 	clz	r0, r0
 8001194:	0940      	lsrs	r0, r0, #5
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001196:	f1c0 0801 	rsb	r8, r0, #1
 800119a:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800119e:	0140      	lsls	r0, r0, #5
 80011a0:	eb06 0b08 	add.w	fp, r6, r8
 80011a4:	eb06 0a00 	add.w	sl, r6, r0
 80011a8:	44c8      	add	r8, r9
 80011aa:	eb09 0300 	add.w	r3, r9, r0
 80011ae:	4652      	mov	r2, sl
 80011b0:	4641      	mov	r1, r8
 80011b2:	4658      	mov	r0, fp
 80011b4:	9400      	str	r4, [sp, #0]
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	f7ff fda7 	bl	8000d0a <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 80011bc:	9400      	str	r4, [sp, #0]
 80011be:	4643      	mov	r3, r8
 80011c0:	465a      	mov	r2, fp
 80011c2:	9903      	ldr	r1, [sp, #12]
 80011c4:	4650      	mov	r0, sl
 80011c6:	f7ff fe2c 	bl	8000e22 <XYcZ_add>
 80011ca:	3d01      	subs	r5, #1
 80011cc:	e775      	b.n	80010ba <EccPoint_mult+0x8a>

080011ce <uECC_point_mult>:
}

void uECC_point_mult(uECC_word_t *result,
                     const uECC_word_t *point,
                     const uECC_word_t *scalar,
                     uECC_Curve curve) {
 80011ce:	b570      	push	{r4, r5, r6, lr}
 80011d0:	b094      	sub	sp, #80	; 0x50
 80011d2:	4605      	mov	r5, r0
 80011d4:	460e      	mov	r6, r1
 80011d6:	4610      	mov	r0, r2
    uECC_word_t tmp1[uECC_MAX_WORDS];
    uECC_word_t tmp2[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
 80011d8:	a904      	add	r1, sp, #16
 80011da:	aa0c      	add	r2, sp, #48	; 0x30
                     uECC_Curve curve) {
 80011dc:	461c      	mov	r4, r3
    uECC_word_t *p2[2] = {tmp1, tmp2};
 80011de:	9102      	str	r1, [sp, #8]
 80011e0:	9203      	str	r2, [sp, #12]
    uECC_word_t carry = regularize_k(scalar, tmp1, tmp2, curve);
 80011e2:	f7ff fae8 	bl	80007b6 <regularize_k>

    EccPoint_mult(result, point, p2[!carry], 0, curve->num_n_bits + 1, curve);
 80011e6:	fab0 f080 	clz	r0, r0
 80011ea:	ab14      	add	r3, sp, #80	; 0x50
 80011ec:	0940      	lsrs	r0, r0, #5
 80011ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80011f2:	8863      	ldrh	r3, [r4, #2]
 80011f4:	9401      	str	r4, [sp, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	f850 2c48 	ldr.w	r2, [r0, #-72]
 8001200:	2300      	movs	r3, #0
 8001202:	4631      	mov	r1, r6
 8001204:	4628      	mov	r0, r5
 8001206:	f7ff ff13 	bl	8001030 <EccPoint_mult>
}
 800120a:	b014      	add	sp, #80	; 0x50
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	0000      	movs	r0, r0

08001210 <enable_trace>:
       DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <enable_trace+0xb0>)
 8001212:	6853      	ldr	r3, [r2, #4]
 8001214:	f043 0320 	orr.w	r3, r3, #32
{
 8001218:	b510      	push	{r4, lr}
       DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN_Msk;
 800121a:	6053      	str	r3, [r2, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 800121c:	f5a2 324c 	sub.w	r2, r2, #208896	; 0x33000
 8001220:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
       TPI->SPPR = 2; // default to SWO with NRZ encoding
 8001224:	2102      	movs	r1, #2
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 8001226:	68d3      	ldr	r3, [r2, #12]
    ITM->LAR = 0xC5ACCE55;
 8001228:	4c26      	ldr	r4, [pc, #152]	; (80012c4 <enable_trace+0xb4>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable access to registers
 800122a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122e:	60d3      	str	r3, [r2, #12]
    TPI->ACPR = 0; // SWO trace baud rate = cpu clock / (ACPR+1)
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <enable_trace+0xb8>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
    TPI->CSPSR =0x00000008; // 4 trace lanes
 8001236:	2008      	movs	r0, #8
       TPI->SPPR = 2; // default to SWO with NRZ encoding
 8001238:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    TPI->FFCR = 0x102; // packet framing enabled
 800123c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001240:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    TPI->CSPSR =0x00000008; // 4 trace lanes
 8001244:	6058      	str	r0, [r3, #4]
    ITM->LAR = 0xC5ACCE55;
 8001246:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 800124a:	4920      	ldr	r1, [pc, #128]	; (80012cc <enable_trace+0xbc>)
    ITM->LAR = 0xC5ACCE55;
 800124c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) // Trace bus ID for TPIU
 8001250:	f8c3 1e80 	str.w	r1, [r3, #3712]	; 0xe80
    ITM->TER = 0xFFFFFFFF; // Enable all stimulus ports
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ITM->TPR = 0x00000000; // allow unpriviledged access
 800125c:	f8c3 2e40 	str.w	r2, [r3, #3648]	; 0xe40
    DWT->CTRL = (0xf << DWT_CTRL_POSTINIT_Pos);// countdown counter for PC sampling, must be written
 8001260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001264:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001268:	6019      	str	r1, [r3, #0]
    DWT->CTRL |=(1 << DWT_CTRL_CYCTAP_Pos)     // Prescaler for PC sampling: 0 = x32, 1 = x512
 800126a:	6819      	ldr	r1, [r3, #0]
 800126c:	f441 61c2 	orr.w	r1, r1, #1552	; 0x610
 8001270:	f041 0101 	orr.w	r1, r1, #1
 8001274:	6019      	str	r1, [r3, #0]
    DWT->COMP0 = 0x00001d60; // AES subbytes
 8001276:	f44f 51eb 	mov.w	r1, #7520	; 0x1d60
 800127a:	6219      	str	r1, [r3, #32]
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
 800127c:	f641 5168 	movw	r1, #7528	; 0x1d68
    DWT->MASK0 = 0;
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
    DWT->FUNCTION0 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 8001282:	6298      	str	r0, [r3, #40]	; 0x28
    DWT->COMP1 = 0x00001d68; // AES mixcolumns
 8001284:	6319      	str	r1, [r3, #48]	; 0x30
    DWT->MASK1 = 0;
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
    DWT->FUNCTION1 = (0 << DWT_FUNCTION_DATAVMATCH_Pos) // address match
 8001288:	6398      	str	r0, [r3, #56]	; 0x38
    ETM->LAR = 0xC5ACCE55;
 800128a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800128e:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ETM_SetupMode();
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001298:	6019      	str	r1, [r3, #0]
    ETM->CR = ETM_CR_ETMEN; // Enable ETM output port
 800129a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129e:	6019      	str	r1, [r3, #0]
    ETM->TRACEIDR = 1; // Trace bus ID for TPIU
 80012a0:	2101      	movs	r1, #1
 80012a2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
 80012a6:	490a      	ldr	r1, [pc, #40]	; (80012d0 <enable_trace+0xc0>)
    ETM->FFLR = 0; // Stall processor when FIFO is full
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
    ETM->TEEVR = 0x000150a0;    // EmbeddedICE comparator 0 or 1 (DWT->COMP0 or DWT->COMP1)
 80012aa:	6219      	str	r1, [r3, #32]
    ETM->TESSEICR = 0xf; // set EmbeddedICE watchpoint 0 as a TraceEnable start resource. 
 80012ac:	210f      	movs	r1, #15
 80012ae:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
    ETM->TECR1 = 0; // tracing is unaffected by the trace start/stop logic
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
    ETM_TraceMode();
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	bf00      	nop
 80012c0:	e0042000 	.word	0xe0042000
 80012c4:	c5acce55 	.word	0xc5acce55
 80012c8:	e0040000 	.word	0xe0040000
 80012cc:	00010009 	.word	0x00010009
 80012d0:	000150a0 	.word	0x000150a0

080012d4 <reenable_trace>:
	return 0x00;
}


uint8_t reenable_trace(uint8_t* x)
{
 80012d4:	b508      	push	{r3, lr}
        enable_trace();
 80012d6:	f7ff ff9b 	bl	8001210 <enable_trace>
	return 0x00;
}
 80012da:	2000      	movs	r0, #0
 80012dc:	bd08      	pop	{r3, pc}
 80012de:	0000      	movs	r0, r0

080012e0 <trigger_high_pcsamp>:
    if (pcsamp_enable == 1)
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <trigger_high_pcsamp+0x18>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
        DWT->CTRL |= (1 << DWT_CTRL_PCSAMPLENA_Pos); // enable PC sampling
 80012e6:	bf01      	itttt	eq
 80012e8:	4a04      	ldreq	r2, [pc, #16]	; (80012fc <trigger_high_pcsamp+0x1c>)
 80012ea:	6813      	ldreq	r3, [r2, #0]
 80012ec:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80012f0:	6013      	streq	r3, [r2, #0]
    trigger_high();
 80012f2:	f000 ba4d 	b.w	8001790 <trigger_high>
 80012f6:	bf00      	nop
 80012f8:	200000e8 	.word	0x200000e8
 80012fc:	e0001000 	.word	0xe0001000

08001300 <trigger_low_pcsamp>:
{
 8001300:	b508      	push	{r3, lr}
    trigger_low();
 8001302:	f000 fa4c 	bl	800179e <trigger_low>
    DWT->CTRL &= ~(1 << DWT_CTRL_PCSAMPLENA_Pos); // disable PC sampling
 8001306:	4a03      	ldr	r2, [pc, #12]	; (8001314 <trigger_low_pcsamp+0x14>)
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bd08      	pop	{r3, pc}
 8001312:	bf00      	nop
 8001314:	e0001000 	.word	0xe0001000

08001318 <run_pmul>:
{
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	a908      	add	r1, sp, #32
 800131e:	2300      	movs	r3, #0
 8001320:	3904      	subs	r1, #4
 8001322:	1ac6      	subs	r6, r0, r3
 8001324:	2218      	movs	r2, #24
 8001326:	2400      	movs	r4, #0
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 8001328:	f816 5b01 	ldrb.w	r5, [r6], #1
 800132c:	4095      	lsls	r5, r2
 800132e:	3a08      	subs	r2, #8
       for (j = 0; j < 4; j++) {
 8001330:	f112 0f08 	cmn.w	r2, #8
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 8001334:	ea44 0405 	orr.w	r4, r4, r5
       for (j = 0; j < 4; j++) {
 8001338:	d1f6      	bne.n	8001328 <run_pmul+0x10>
 800133a:	3b04      	subs	r3, #4
    for (i = 0; i < 8; i++) {
 800133c:	f113 0f20 	cmn.w	r3, #32
 8001340:	600c      	str	r4, [r1, #0]
 8001342:	d1ed      	bne.n	8001320 <run_pmul+0x8>
    trigger_high_pcsamp();
 8001344:	f7ff ffcc 	bl	80012e0 <trigger_high_pcsamp>
    uECC_point_mult(Q, P, kwords, curve);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <run_pmul+0x48>)
 800134a:	4906      	ldr	r1, [pc, #24]	; (8001364 <run_pmul+0x4c>)
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <run_pmul+0x50>)
 800134e:	466a      	mov	r2, sp
 8001350:	f7ff ff3d 	bl	80011ce <uECC_point_mult>
    trigger_low_pcsamp();
 8001354:	f7ff ffd4 	bl	8001300 <trigger_low_pcsamp>
}
 8001358:	2000      	movs	r0, #0
 800135a:	b008      	add	sp, #32
 800135c:	bd70      	pop	{r4, r5, r6, pc}
 800135e:	bf00      	nop
 8001360:	080024d0 	.word	0x080024d0
 8001364:	2000012c 	.word	0x2000012c
 8001368:	200000ec 	.word	0x200000ec

0800136c <run_pmul_fixed>:
{
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	a908      	add	r1, sp, #32
 8001372:	2300      	movs	r3, #0
 8001374:	3904      	subs	r1, #4
 8001376:	1ac6      	subs	r6, r0, r3
 8001378:	2218      	movs	r2, #24
 800137a:	2400      	movs	r4, #0
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 800137c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8001380:	4095      	lsls	r5, r2
 8001382:	3a08      	subs	r2, #8
       for (j = 0; j < 4; j++) {
 8001384:	f112 0f08 	cmn.w	r2, #8
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 8001388:	ea44 0405 	orr.w	r4, r4, r5
       for (j = 0; j < 4; j++) {
 800138c:	d1f6      	bne.n	800137c <run_pmul_fixed+0x10>
 800138e:	3b04      	subs	r3, #4
    for (i = 0; i < 8; i++) {
 8001390:	f113 0f20 	cmn.w	r3, #32
 8001394:	600c      	str	r4, [r1, #0]
 8001396:	d1ed      	bne.n	8001374 <run_pmul_fixed+0x8>
    trigger_high_pcsamp();
 8001398:	f7ff ffa2 	bl	80012e0 <trigger_high_pcsamp>
    uECC_point_mult(Q, curve->G, kwords, curve);
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <run_pmul_fixed+0x48>)
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <run_pmul_fixed+0x4c>)
 80013a0:	466a      	mov	r2, sp
 80013a2:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80013a6:	f7ff ff12 	bl	80011ce <uECC_point_mult>
    trigger_low_pcsamp();
 80013aa:	f7ff ffa9 	bl	8001300 <trigger_low_pcsamp>
}
 80013ae:	2000      	movs	r0, #0
 80013b0:	b008      	add	sp, #32
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	080024d0 	.word	0x080024d0
 80013b8:	200000ec 	.word	0x200000ec

080013bc <print>:
{
 80013bc:	b510      	push	{r4, lr}
 80013be:	1e44      	subs	r4, r0, #1
   while (*ptr != (char)0) {
 80013c0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80013c4:	b900      	cbnz	r0, 80013c8 <print+0xc>
}
 80013c6:	bd10      	pop	{r4, pc}
      putch(*ptr);
 80013c8:	f000 fa02 	bl	80017d0 <putch>
 80013cc:	e7f8      	b.n	80013c0 <print+0x4>
 80013ce:	0000      	movs	r0, r0

080013d0 <info>:
{
 80013d0:	b508      	push	{r3, lr}
        print("ChipWhisperer simpleserial-trace-ecc, compiled ");
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <info+0x24>)
 80013d4:	f7ff fff2 	bl	80013bc <print>
        print(__DATE__);
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <info+0x28>)
 80013da:	f7ff ffef 	bl	80013bc <print>
        print(", ");
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <info+0x2c>)
 80013e0:	f7ff ffec 	bl	80013bc <print>
        print(__TIME__);
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <info+0x30>)
 80013e6:	f7ff ffe9 	bl	80013bc <print>
        print("\n");
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <info+0x34>)
 80013ec:	f7ff ffe6 	bl	80013bc <print>
}
 80013f0:	2000      	movs	r0, #0
 80013f2:	bd08      	pop	{r3, pc}
 80013f4:	08002598 	.word	0x08002598
 80013f8:	080025c8 	.word	0x080025c8
 80013fc:	080025d4 	.word	0x080025d4
 8001400:	080025d7 	.word	0x080025d7
 8001404:	080025e0 	.word	0x080025e0

08001408 <main>:


int main(void)
{
 8001408:	b508      	push	{r3, lr}
    platform_init();
 800140a:	f000 f91f 	bl	800164c <platform_init>
    init_uart();
 800140e:	f000 f95d 	bl	80016cc <init_uart>
    trigger_setup();
 8001412:	f000 f999 	bl	8001748 <trigger_setup>

    simpleserial_init();
 8001416:	f000 f8ad 	bl	8001574 <simpleserial_init>
    simpleserial_addcmd('k', 32, run_pmul);
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <main+0x94>)
 800141c:	2120      	movs	r1, #32
 800141e:	206b      	movs	r0, #107	; 0x6b
 8001420:	f000 f892 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('f', 32, run_pmul_fixed);
 8001424:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <main+0x98>)
 8001426:	2120      	movs	r1, #32
 8001428:	2066      	movs	r0, #102	; 0x66
 800142a:	f000 f88d 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('a', 32, set_px);
 800142e:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <main+0x9c>)
 8001430:	2120      	movs	r1, #32
 8001432:	2061      	movs	r0, #97	; 0x61
 8001434:	f000 f888 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('b', 32, set_py);
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <main+0xa0>)
 800143a:	2120      	movs	r1, #32
 800143c:	2062      	movs	r0, #98	; 0x62
 800143e:	f000 f883 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('p', 32, get_qx);
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <main+0xa4>)
 8001444:	2120      	movs	r1, #32
 8001446:	2070      	movs	r0, #112	; 0x70
 8001448:	f000 f87e 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('q', 32, get_qy);
 800144c:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <main+0xa8>)
 800144e:	2120      	movs	r1, #32
 8001450:	2071      	movs	r0, #113	; 0x71
 8001452:	f000 f879 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('x',  0, reset);
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <main+0xac>)
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	; 0x78
 800145c:	f000 f874 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('i',  0, info);
 8001460:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <main+0xb0>)
 8001462:	2100      	movs	r1, #0
 8001464:	2069      	movs	r0, #105	; 0x69
 8001466:	f000 f86f 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('e', 0, reenable_trace);
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <main+0xb4>)
 800146c:	2100      	movs	r1, #0
 800146e:	2065      	movs	r0, #101	; 0x65
 8001470:	f000 f86a 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('s', 5, setreg);
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <main+0xb8>)
 8001476:	2105      	movs	r1, #5
 8001478:	2073      	movs	r0, #115	; 0x73
 800147a:	f000 f865 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('g', 5, getreg);
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <main+0xbc>)
 8001480:	2105      	movs	r1, #5
 8001482:	2067      	movs	r0, #103	; 0x67
 8001484:	f000 f860 	bl	8001548 <simpleserial_addcmd>
    simpleserial_addcmd('c', 4, set_pcsample_params);
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <main+0xc0>)
 800148a:	2104      	movs	r1, #4
 800148c:	2063      	movs	r0, #99	; 0x63
 800148e:	f000 f85b 	bl	8001548 <simpleserial_addcmd>

    enable_trace();
 8001492:	f7ff febd 	bl	8001210 <enable_trace>

    while(1)
        simpleserial_get();
 8001496:	f000 f893 	bl	80015c0 <simpleserial_get>
 800149a:	e7fc      	b.n	8001496 <main+0x8e>
 800149c:	08001319 	.word	0x08001319
 80014a0:	0800136d 	.word	0x0800136d
 80014a4:	080002d5 	.word	0x080002d5
 80014a8:	0800030d 	.word	0x0800030d
 80014ac:	0800044d 	.word	0x0800044d
 80014b0:	08000489 	.word	0x08000489
 80014b4:	08000345 	.word	0x08000345
 80014b8:	080013d1 	.word	0x080013d1
 80014bc:	080012d5 	.word	0x080012d5
 80014c0:	080001f5 	.word	0x080001f5
 80014c4:	08000349 	.word	0x08000349
 80014c8:	080003fd 	.word	0x080003fd

080014cc <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return SS_VER;
}
 80014cc:	2001      	movs	r0, #1
 80014ce:	4770      	bx	lr

080014d0 <hex_decode>:
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
	for(int i = 0; i < len; i++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	4283      	cmp	r3, r0
 80014d6:	db01      	blt.n	80014dc <hex_decode+0xc>
	return 0;
 80014d8:	2000      	movs	r0, #0
 80014da:	e021      	b.n	8001520 <hex_decode+0x50>
		char n_lo = ascii_buf[2*i+1];
 80014dc:	eb01 0543 	add.w	r5, r1, r3, lsl #1
		char n_hi = ascii_buf[2*i];
 80014e0:	f811 4013 	ldrb.w	r4, [r1, r3, lsl #1]
		char n_lo = ascii_buf[2*i+1];
 80014e4:	786d      	ldrb	r5, [r5, #1]
		if(n_lo >= '0' && n_lo <= '9')
 80014e6:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 80014ea:	b2f6      	uxtb	r6, r6
 80014ec:	2e09      	cmp	r6, #9
 80014ee:	d80b      	bhi.n	8001508 <hex_decode+0x38>
			data_buf[i] = n_lo - '0';
 80014f0:	54d6      	strb	r6, [r2, r3]
		if(n_hi >= '0' && n_hi <= '9')
 80014f2:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80014f6:	b2ee      	uxtb	r6, r5
 80014f8:	2e09      	cmp	r6, #9
 80014fa:	d814      	bhi.n	8001526 <hex_decode+0x56>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80014fc:	5cd4      	ldrb	r4, [r2, r3]
 80014fe:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8001502:	54d4      	strb	r4, [r2, r3]
	for(int i = 0; i < len; i++)
 8001504:	3301      	adds	r3, #1
 8001506:	e7e5      	b.n	80014d4 <hex_decode+0x4>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8001508:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 800150c:	2e05      	cmp	r6, #5
 800150e:	d802      	bhi.n	8001516 <hex_decode+0x46>
			data_buf[i] = n_lo - 'A' + 10;
 8001510:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8001512:	54d5      	strb	r5, [r2, r3]
 8001514:	e7ed      	b.n	80014f2 <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8001516:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 800151a:	2e05      	cmp	r6, #5
 800151c:	d901      	bls.n	8001522 <hex_decode+0x52>
			return 1;
 800151e:	2001      	movs	r0, #1
}
 8001520:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8001522:	3d57      	subs	r5, #87	; 0x57
 8001524:	e7f5      	b.n	8001512 <hex_decode+0x42>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8001526:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 800152a:	2d05      	cmp	r5, #5
 800152c:	d802      	bhi.n	8001534 <hex_decode+0x64>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 800152e:	f1a4 0537 	sub.w	r5, r4, #55	; 0x37
 8001532:	e7e3      	b.n	80014fc <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8001534:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8001538:	2d05      	cmp	r5, #5
 800153a:	d8f0      	bhi.n	800151e <hex_decode+0x4e>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 800153c:	5cd5      	ldrb	r5, [r2, r3]
 800153e:	3c57      	subs	r4, #87	; 0x57
 8001540:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 8001544:	e7dd      	b.n	8001502 <hex_decode+0x32>
 8001546:	0000      	movs	r0, r0

08001548 <simpleserial_addcmd>:
{
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
 8001548:	b530      	push	{r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS)
 800154a:	4d09      	ldr	r5, [pc, #36]	; (8001570 <simpleserial_addcmd+0x28>)
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	dc0b      	bgt.n	800156a <simpleserial_addcmd+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 8001552:	293f      	cmp	r1, #63	; 0x3f
 8001554:	d809      	bhi.n	800156a <simpleserial_addcmd+0x22>
		return 1;

	commands[num_commands].c   = c;
 8001556:	240c      	movs	r4, #12
 8001558:	fb04 5403 	mla	r4, r4, r3, r5
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 800155c:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8001560:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8001562:	7120      	strb	r0, [r4, #4]
	num_commands++;
 8001564:	602b      	str	r3, [r5, #0]

	return 0;
 8001566:	2000      	movs	r0, #0
}
 8001568:	bd30      	pop	{r4, r5, pc}
		return 1;
 800156a:	2001      	movs	r0, #1
 800156c:	e7fc      	b.n	8001568 <simpleserial_addcmd+0x20>
 800156e:	bf00      	nop
 8001570:	2000001c 	.word	0x2000001c

08001574 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
 8001574:	4a02      	ldr	r2, [pc, #8]	; (8001580 <simpleserial_init+0xc>)
 8001576:	2100      	movs	r1, #0
 8001578:	2076      	movs	r0, #118	; 0x76
 800157a:	f7ff bfe5 	b.w	8001548 <simpleserial_addcmd>
 800157e:	bf00      	nop
 8001580:	080014cd 	.word	0x080014cd

08001584 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	4615      	mov	r5, r2
 8001588:	460f      	mov	r7, r1
	// Write first character
	putch(c);
 800158a:	f000 f921 	bl	80017d0 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 800158e:	4e0b      	ldr	r6, [pc, #44]	; (80015bc <simpleserial_put+0x38>)
	for(int i = 0; i < size; i++)
 8001590:	462c      	mov	r4, r5
 8001592:	1b63      	subs	r3, r4, r5
 8001594:	429f      	cmp	r7, r3
 8001596:	dc04      	bgt.n	80015a2 <simpleserial_put+0x1e>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 8001598:	200a      	movs	r0, #10
}
 800159a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 800159e:	f000 b917 	b.w	80017d0 <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 80015a2:	7823      	ldrb	r3, [r4, #0]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	5cf0      	ldrb	r0, [r6, r3]
 80015a8:	f000 f912 	bl	80017d0 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 80015ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	5cf0      	ldrb	r0, [r6, r3]
 80015b6:	f000 f90b 	bl	80017d0 <putch>
 80015ba:	e7ea      	b.n	8001592 <simpleserial_put+0xe>
 80015bc:	08002584 	.word	0x08002584

080015c0 <simpleserial_get>:
{
 80015c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 80015c4:	4d20      	ldr	r5, [pc, #128]	; (8001648 <simpleserial_get+0x88>)
{
 80015c6:	b0b2      	sub	sp, #200	; 0xc8
	c = getch();
 80015c8:	f000 f8f0 	bl	80017ac <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	2400      	movs	r4, #0
		if(commands[cmd].c == c)
 80015d0:	1d2a      	adds	r2, r5, #4
 80015d2:	210c      	movs	r1, #12
	for(cmd = 0; cmd < num_commands; cmd++)
 80015d4:	42a3      	cmp	r3, r4
 80015d6:	dc07      	bgt.n	80015e8 <simpleserial_get+0x28>
	if(cmd == num_commands)
 80015d8:	d033      	beq.n	8001642 <simpleserial_get+0x82>
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80015da:	270c      	movs	r7, #12
 80015dc:	2600      	movs	r6, #0
 80015de:	fb07 5704 	mla	r7, r7, r4, r5
		ascii_buf[i] = c;
 80015e2:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 80015e6:	e00f      	b.n	8001608 <simpleserial_get+0x48>
		if(commands[cmd].c == c)
 80015e8:	fb01 f604 	mul.w	r6, r1, r4
 80015ec:	5cb6      	ldrb	r6, [r6, r2]
 80015ee:	4286      	cmp	r6, r0
 80015f0:	d0f3      	beq.n	80015da <simpleserial_get+0x1a>
	for(cmd = 0; cmd < num_commands; cmd++)
 80015f2:	3401      	adds	r4, #1
 80015f4:	e7ee      	b.n	80015d4 <simpleserial_get+0x14>
		c = getch();
 80015f6:	f000 f8d9 	bl	80017ac <getch>
		if(c == '\n' || c == '\r')
 80015fa:	280a      	cmp	r0, #10
 80015fc:	d021      	beq.n	8001642 <simpleserial_get+0x82>
 80015fe:	280d      	cmp	r0, #13
 8001600:	d01f      	beq.n	8001642 <simpleserial_get+0x82>
		ascii_buf[i] = c;
 8001602:	f806 0008 	strb.w	r0, [r6, r8]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8001606:	3601      	adds	r6, #1
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 800160e:	d3f2      	bcc.n	80015f6 <simpleserial_get+0x36>
	c = getch();
 8001610:	f000 f8cc 	bl	80017ac <getch>
	if(c != '\n' && c != '\r')
 8001614:	280a      	cmp	r0, #10
 8001616:	d001      	beq.n	800161c <simpleserial_get+0x5c>
 8001618:	280d      	cmp	r0, #13
 800161a:	d112      	bne.n	8001642 <simpleserial_get+0x82>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 800161c:	230c      	movs	r3, #12
 800161e:	fb03 5404 	mla	r4, r3, r4, r5
 8001622:	aa02      	add	r2, sp, #8
 8001624:	a912      	add	r1, sp, #72	; 0x48
 8001626:	68a0      	ldr	r0, [r4, #8]
 8001628:	f7ff ff52 	bl	80014d0 <hex_decode>
 800162c:	b948      	cbnz	r0, 8001642 <simpleserial_get+0x82>
	ret[0] = commands[cmd].fp(data_buf);
 800162e:	68e3      	ldr	r3, [r4, #12]
 8001630:	a802      	add	r0, sp, #8
 8001632:	4798      	blx	r3
 8001634:	aa32      	add	r2, sp, #200	; 0xc8
	simpleserial_put('z', 1, ret);
 8001636:	2101      	movs	r1, #1
	ret[0] = commands[cmd].fp(data_buf);
 8001638:	f802 0dc4 	strb.w	r0, [r2, #-196]!
	simpleserial_put('z', 1, ret);
 800163c:	207a      	movs	r0, #122	; 0x7a
 800163e:	f7ff ffa1 	bl	8001584 <simpleserial_put>
}
 8001642:	b032      	add	sp, #200	; 0xc8
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001648:	2000001c 	.word	0x2000001c

0800164c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001650:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001652:	2603      	movs	r6, #3
 8001654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001658:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800165a:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800165c:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001660:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8001662:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001664:	f000 f8cc 	bl	8001800 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001668:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 800166a:	4621      	mov	r1, r4
 800166c:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800166e:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001672:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001676:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001678:	f000 fb2c 	bl	8001cd4 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <platform_init+0x78>)
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001688:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001690:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001696:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8001698:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800169c:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800169e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80016a2:	f000 fbbd 	bl	8001e20 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80016a6:	462a      	mov	r2, r5
 80016a8:	4620      	mov	r0, r4
 80016aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ae:	f000 fc79 	bl	8001fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80016b2:	462a      	mov	r2, r5
 80016b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b8:	4620      	mov	r0, r4
 80016ba:	f000 fc73 	bl	8001fa4 <HAL_GPIO_WritePin>
#endif
}
 80016be:	b016      	add	sp, #88	; 0x58
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000800 	.word	0x48000800

080016cc <init_uart>:

void init_uart(void)
{
 80016cc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80016ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 80016d2:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80016da:	2101      	movs	r1, #1
 80016dc:	2303      	movs	r3, #3
 80016de:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 80016e2:	4c16      	ldr	r4, [pc, #88]	; (800173c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 80016e4:	2307      	movs	r3, #7
 80016e6:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 80016e8:	6963      	ldr	r3, [r4, #20]
 80016ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ee:	6163      	str	r3, [r4, #20]
 80016f0:	6963      	ldr	r3, [r4, #20]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80016f8:	a903      	add	r1, sp, #12
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 80016fe:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001700:	f000 fb8e 	bl	8001e20 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8001704:	480e      	ldr	r0, [pc, #56]	; (8001740 <init_uart+0x74>)
  UartHandle.Init.BaudRate   = 38400;
 8001706:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001744 <init_uart+0x78>
 800170a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800170e:	e9c0 c300 	strd	ip, r3, [r0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001714:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001718:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800171a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800171c:	230c      	movs	r3, #12
 800171e:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8001720:	69a3      	ldr	r3, [r4, #24]
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	61a3      	str	r3, [r4, #24]
 8001728:	69a3      	ldr	r3, [r4, #24]
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8001732:	f000 fd81 	bl	8002238 <HAL_UART_Init>
}
 8001736:	b008      	add	sp, #32
 8001738:	bd10      	pop	{r4, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	2000016c 	.word	0x2000016c
 8001744:	40013800 	.word	0x40013800

08001748 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <trigger_setup+0x44>)
{
 800174a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	695b      	ldr	r3, [r3, #20]
{
 8001756:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001760:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001764:	2301      	movs	r3, #1
 8001766:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800176a:	2500      	movs	r5, #0
 800176c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800176e:	a901      	add	r1, sp, #4
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001774:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001778:	f000 fb52 	bl	8001e20 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800177c:	462a      	mov	r2, r5
 800177e:	4621      	mov	r1, r4
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f000 fc0e 	bl	8001fa4 <HAL_GPIO_WritePin>
}
 8001788:	b007      	add	sp, #28
 800178a:	bd30      	pop	{r4, r5, pc}
 800178c:	40021000 	.word	0x40021000

08001790 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f000 bc03 	b.w	8001fa4 <HAL_GPIO_WritePin>

0800179e <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f000 bbfc 	b.w	8001fa4 <HAL_GPIO_WritePin>

080017ac <getch>:
}

char getch(void)
{
 80017ac:	b513      	push	{r0, r1, r4, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 80017ae:	4c07      	ldr	r4, [pc, #28]	; (80017cc <getch+0x20>)
 80017b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80017b4:	2201      	movs	r2, #1
 80017b6:	f10d 0107 	add.w	r1, sp, #7
 80017ba:	4620      	mov	r0, r4
 80017bc:	f000 fdbe 	bl	800233c <HAL_UART_Receive>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d1f5      	bne.n	80017b0 <getch+0x4>
  return d;
}
 80017c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80017c8:	b002      	add	sp, #8
 80017ca:	bd10      	pop	{r4, pc}
 80017cc:	2000016c 	.word	0x2000016c

080017d0 <putch>:

void putch(char c)
{
 80017d0:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 80017d2:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80017d4:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 80017d8:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80017dc:	2201      	movs	r2, #1
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <putch+0x1c>)
 80017e0:	f000 fd55 	bl	800228e <HAL_UART_Transmit>
}
 80017e4:	b003      	add	sp, #12
 80017e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80017ea:	bf00      	nop
 80017ec:	2000016c 	.word	0x2000016c

080017f0 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_GetTick+0xc>)
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	1c42      	adds	r2, r0, #1
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200000e0 	.word	0x200000e0

08001800 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001800:	6803      	ldr	r3, [r0, #0]
{
 8001802:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	07d9      	lsls	r1, r3, #31
{
 8001808:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	d411      	bmi.n	8001830 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	079a      	lsls	r2, r3, #30
 8001810:	f100 8086 	bmi.w	8001920 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	071e      	lsls	r6, r3, #28
 8001818:	f100 80f4 	bmi.w	8001a04 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	075d      	lsls	r5, r3, #29
 8001820:	f100 813b 	bmi.w	8001a9a <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001824:	69e2      	ldr	r2, [r4, #28]
 8001826:	2a00      	cmp	r2, #0
 8001828:	f040 81cf 	bne.w	8001bca <HAL_RCC_OscConfig+0x3ca>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800182c:	2000      	movs	r0, #0
 800182e:	e021      	b.n	8001874 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001830:	49b7      	ldr	r1, [pc, #732]	; (8001b10 <HAL_RCC_OscConfig+0x310>)
 8001832:	684b      	ldr	r3, [r1, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b04      	cmp	r3, #4
 800183a:	d007      	beq.n	800184c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183c:	684b      	ldr	r3, [r1, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d119      	bne.n	800187a <HAL_RCC_OscConfig+0x7a>
 8001846:	684b      	ldr	r3, [r1, #4]
 8001848:	03db      	lsls	r3, r3, #15
 800184a:	d516      	bpl.n	800187a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001850:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	6809      	ldr	r1, [r1, #0]
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2201      	movs	r2, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	420b      	tst	r3, r1
 800186a:	d0cf      	beq.n	800180c <HAL_RCC_OscConfig+0xc>
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1cc      	bne.n	800180c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001872:	2001      	movs	r0, #1
}
 8001874:	b003      	add	sp, #12
 8001876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187a:	6862      	ldr	r2, [r4, #4]
 800187c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001880:	d124      	bne.n	80018cc <HAL_RCC_OscConfig+0xcc>
 8001882:	680b      	ldr	r3, [r1, #0]
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800188a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800188c:	68a0      	ldr	r0, [r4, #8]
 800188e:	f023 030f 	bic.w	r3, r3, #15
 8001892:	4303      	orrs	r3, r0
 8001894:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001896:	b34a      	cbz	r2, 80018ec <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001898:	f7ff ffaa 	bl	80017f0 <HAL_GetTick>
 800189c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80018a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	2601      	movs	r6, #1
 80018a4:	fa95 f3a5 	rbit	r3, r5
 80018a8:	680a      	ldr	r2, [r1, #0]
 80018aa:	fa95 f3a5 	rbit	r3, r5
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	fa06 f303 	lsl.w	r3, r6, r3
 80018ba:	4213      	tst	r3, r2
 80018bc:	d1a6      	bne.n	800180c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff ff97 	bl	80017f0 <HAL_GetTick>
 80018c2:	1bc0      	subs	r0, r0, r7
 80018c4:	2864      	cmp	r0, #100	; 0x64
 80018c6:	d9ed      	bls.n	80018a4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 80018c8:	2003      	movs	r0, #3
 80018ca:	e7d3      	b.n	8001874 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	680b      	ldr	r3, [r1, #0]
 80018ce:	b932      	cbnz	r2, 80018de <HAL_RCC_OscConfig+0xde>
 80018d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d4:	600b      	str	r3, [r1, #0]
 80018d6:	680b      	ldr	r3, [r1, #0]
 80018d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018dc:	e7d4      	b.n	8001888 <HAL_RCC_OscConfig+0x88>
 80018de:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80018e2:	d1f5      	bne.n	80018d0 <HAL_RCC_OscConfig+0xd0>
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	600b      	str	r3, [r1, #0]
 80018ea:	e7ca      	b.n	8001882 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80018ec:	f7ff ff80 	bl	80017f0 <HAL_GetTick>
 80018f0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80018f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	2601      	movs	r6, #1
 80018f8:	fa95 f3a5 	rbit	r3, r5
 80018fc:	680a      	ldr	r2, [r1, #0]
 80018fe:	fa95 f3a5 	rbit	r3, r5
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	fa06 f303 	lsl.w	r3, r6, r3
 800190e:	4213      	tst	r3, r2
 8001910:	f43f af7c 	beq.w	800180c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff ff6c 	bl	80017f0 <HAL_GetTick>
 8001918:	1bc0      	subs	r0, r0, r7
 800191a:	2864      	cmp	r0, #100	; 0x64
 800191c:	d9ec      	bls.n	80018f8 <HAL_RCC_OscConfig+0xf8>
 800191e:	e7d3      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001920:	497b      	ldr	r1, [pc, #492]	; (8001b10 <HAL_RCC_OscConfig+0x310>)
 8001922:	684b      	ldr	r3, [r1, #4]
 8001924:	f013 0f0c 	tst.w	r3, #12
 8001928:	d007      	beq.n	800193a <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800192a:	684b      	ldr	r3, [r1, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d121      	bne.n	8001978 <HAL_RCC_OscConfig+0x178>
 8001934:	684b      	ldr	r3, [r1, #4]
 8001936:	03df      	lsls	r7, r3, #15
 8001938:	d41e      	bmi.n	8001978 <HAL_RCC_OscConfig+0x178>
 800193a:	2302      	movs	r3, #2
 800193c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001940:	6808      	ldr	r0, [r1, #0]
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2201      	movs	r2, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	4203      	tst	r3, r0
 8001956:	d002      	beq.n	800195e <HAL_RCC_OscConfig+0x15e>
 8001958:	6923      	ldr	r3, [r4, #16]
 800195a:	4293      	cmp	r3, r2
 800195c:	d189      	bne.n	8001872 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	6808      	ldr	r0, [r1, #0]
 8001960:	23f8      	movs	r3, #248	; 0xf8
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	fab3 f283 	clz	r2, r3
 800196a:	6963      	ldr	r3, [r4, #20]
 800196c:	4093      	lsls	r3, r2
 800196e:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
 8001976:	e74d      	b.n	8001814 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001978:	6922      	ldr	r2, [r4, #16]
 800197a:	2501      	movs	r5, #1
 800197c:	b302      	cbz	r2, 80019c0 <HAL_RCC_OscConfig+0x1c0>
 800197e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	2602      	movs	r6, #2
 8001992:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001994:	f7ff ff2c 	bl	80017f0 <HAL_GetTick>
 8001998:	4607      	mov	r7, r0
 800199a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	680a      	ldr	r2, [r1, #0]
 80019a0:	fa96 f3a6 	rbit	r3, r6
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa05 f303 	lsl.w	r3, r5, r3
 80019b0:	4213      	tst	r3, r2
 80019b2:	d1d4      	bne.n	800195e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff ff1c 	bl	80017f0 <HAL_GetTick>
 80019b8:	1bc0      	subs	r0, r0, r7
 80019ba:	2802      	cmp	r0, #2
 80019bc:	d9ed      	bls.n	800199a <HAL_RCC_OscConfig+0x19a>
 80019be:	e783      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
 80019c0:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	2602      	movs	r6, #2
 80019d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019d6:	f7ff ff0b 	bl	80017f0 <HAL_GetTick>
 80019da:	4607      	mov	r7, r0
 80019dc:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e0:	680a      	ldr	r2, [r1, #0]
 80019e2:	fa96 f3a6 	rbit	r3, r6
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	fa05 f303 	lsl.w	r3, r5, r3
 80019f2:	4213      	tst	r3, r2
 80019f4:	f43f af0e 	beq.w	8001814 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff fefa 	bl	80017f0 <HAL_GetTick>
 80019fc:	1bc0      	subs	r0, r0, r7
 80019fe:	2802      	cmp	r0, #2
 8001a00:	d9ec      	bls.n	80019dc <HAL_RCC_OscConfig+0x1dc>
 8001a02:	e761      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	69a2      	ldr	r2, [r4, #24]
 8001a06:	4d42      	ldr	r5, [pc, #264]	; (8001b10 <HAL_RCC_OscConfig+0x310>)
 8001a08:	4842      	ldr	r0, [pc, #264]	; (8001b14 <HAL_RCC_OscConfig+0x314>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	b312      	cbz	r2, 8001a54 <HAL_RCC_OscConfig+0x254>
 8001a0e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	4403      	add	r3, r0
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	2602      	movs	r6, #2
 8001a1c:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fee7 	bl	80017f0 <HAL_GetTick>
 8001a22:	4607      	mov	r7, r0
 8001a24:	fa96 f3a6 	rbit	r3, r6
 8001a28:	fa96 f3a6 	rbit	r3, r6
 8001a2c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a30:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a32:	fa96 f3a6 	rbit	r3, r6
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	4213      	tst	r3, r2
 8001a44:	f47f aeea 	bne.w	800181c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fed2 	bl	80017f0 <HAL_GetTick>
 8001a4c:	1bc0      	subs	r0, r0, r7
 8001a4e:	2802      	cmp	r0, #2
 8001a50:	d9e8      	bls.n	8001a24 <HAL_RCC_OscConfig+0x224>
 8001a52:	e739      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
 8001a54:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	4403      	add	r3, r0
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	2602      	movs	r6, #2
 8001a62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a64:	f7ff fec4 	bl	80017f0 <HAL_GetTick>
 8001a68:	4607      	mov	r7, r0
 8001a6a:	fa96 f3a6 	rbit	r3, r6
 8001a6e:	fa96 f3a6 	rbit	r3, r6
 8001a72:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a78:	fa96 f3a6 	rbit	r3, r6
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	4213      	tst	r3, r2
 8001a8a:	f43f aec7 	beq.w	800181c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff feaf 	bl	80017f0 <HAL_GetTick>
 8001a92:	1bc0      	subs	r0, r0, r7
 8001a94:	2802      	cmp	r0, #2
 8001a96:	d9e8      	bls.n	8001a6a <HAL_RCC_OscConfig+0x26a>
 8001a98:	e716      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	491d      	ldr	r1, [pc, #116]	; (8001b10 <HAL_RCC_OscConfig+0x310>)
 8001a9c:	69cb      	ldr	r3, [r1, #28]
 8001a9e:	00d8      	lsls	r0, r3, #3
 8001aa0:	d433      	bmi.n	8001b0a <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	69cb      	ldr	r3, [r1, #28]
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	61cb      	str	r3, [r1, #28]
 8001aaa:	69cb      	ldr	r3, [r1, #28]
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ab4:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4e18      	ldr	r6, [pc, #96]	; (8001b18 <HAL_RCC_OscConfig+0x318>)
 8001ab8:	6833      	ldr	r3, [r6, #0]
 8001aba:	05da      	lsls	r2, r3, #23
 8001abc:	d52e      	bpl.n	8001b1c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abe:	68e3      	ldr	r3, [r4, #12]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d13b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x33c>
 8001ac4:	6a0b      	ldr	r3, [r1, #32]
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001acc:	f7ff fe90 	bl	80017f0 <HAL_GetTick>
 8001ad0:	2602      	movs	r6, #2
 8001ad2:	4681      	mov	r9, r0
 8001ad4:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	2701      	movs	r7, #1
 8001ad8:	fa96 f3a6 	rbit	r3, r6
 8001adc:	fa96 f3a6 	rbit	r3, r6
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d06a      	beq.n	8001bba <HAL_RCC_OscConfig+0x3ba>
 8001ae4:	6a0a      	ldr	r2, [r1, #32]
 8001ae6:	fa98 f3a8 	rbit	r3, r8
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	fa07 f303 	lsl.w	r3, r7, r3
 8001af6:	4213      	tst	r3, r2
 8001af8:	d056      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8001afa:	2d00      	cmp	r5, #0
 8001afc:	f43f ae92 	beq.w	8001824 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b00:	69cb      	ldr	r3, [r1, #28]
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b06:	61cb      	str	r3, [r1, #28]
 8001b08:	e68c      	b.n	8001824 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	e7d3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2b6>
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	10908120 	.word	0x10908120
 8001b18:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1c:	6833      	ldr	r3, [r6, #0]
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b24:	f7ff fe64 	bl	80017f0 <HAL_GetTick>
 8001b28:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	6833      	ldr	r3, [r6, #0]
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	d4c6      	bmi.n	8001abe <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b30:	f7ff fe5e 	bl	80017f0 <HAL_GetTick>
 8001b34:	1bc0      	subs	r0, r0, r7
 8001b36:	2864      	cmp	r0, #100	; 0x64
 8001b38:	d9f7      	bls.n	8001b2a <HAL_RCC_OscConfig+0x32a>
 8001b3a:	e6c5      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	bb33      	cbnz	r3, 8001b8c <HAL_RCC_OscConfig+0x38c>
 8001b3e:	6a0b      	ldr	r3, [r1, #32]
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	620b      	str	r3, [r1, #32]
 8001b46:	6a0b      	ldr	r3, [r1, #32]
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fe4f 	bl	80017f0 <HAL_GetTick>
 8001b52:	2602      	movs	r6, #2
 8001b54:	4681      	mov	r9, r0
 8001b56:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	2701      	movs	r7, #1
 8001b5a:	fa96 f3a6 	rbit	r3, r6
 8001b5e:	fa96 f3a6 	rbit	r3, r6
 8001b62:	b373      	cbz	r3, 8001bc2 <HAL_RCC_OscConfig+0x3c2>
 8001b64:	6a0a      	ldr	r2, [r1, #32]
 8001b66:	fa98 f3a8 	rbit	r3, r8
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	fa07 f303 	lsl.w	r3, r7, r3
 8001b76:	4213      	tst	r3, r2
 8001b78:	d0bf      	beq.n	8001afa <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7ff fe39 	bl	80017f0 <HAL_GetTick>
 8001b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b82:	eba0 0009 	sub.w	r0, r0, r9
 8001b86:	4298      	cmp	r0, r3
 8001b88:	d9e7      	bls.n	8001b5a <HAL_RCC_OscConfig+0x35a>
 8001b8a:	e69d      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	6a0b      	ldr	r3, [r1, #32]
 8001b90:	d103      	bne.n	8001b9a <HAL_RCC_OscConfig+0x39a>
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	620b      	str	r3, [r1, #32]
 8001b98:	e794      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2c4>
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	620b      	str	r3, [r1, #32]
 8001ba0:	6a0b      	ldr	r3, [r1, #32]
 8001ba2:	f023 0304 	bic.w	r3, r3, #4
 8001ba6:	e790      	b.n	8001aca <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fe22 	bl	80017f0 <HAL_GetTick>
 8001bac:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bb0:	eba0 0009 	sub.w	r0, r0, r9
 8001bb4:	4298      	cmp	r0, r3
 8001bb6:	d98f      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2d8>
 8001bb8:	e686      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
 8001bba:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001bc0:	e791      	b.n	8001ae6 <HAL_RCC_OscConfig+0x2e6>
 8001bc2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001bc8:	e7cd      	b.n	8001b66 <HAL_RCC_OscConfig+0x366>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bca:	4941      	ldr	r1, [pc, #260]	; (8001cd0 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	684b      	ldr	r3, [r1, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	f43f ae4d 	beq.w	8001872 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd8:	2a02      	cmp	r2, #2
 8001bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bde:	d151      	bne.n	8001c84 <HAL_RCC_OscConfig+0x484>
 8001be0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fdfb 	bl	80017f0 <HAL_GetTick>
 8001bfa:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001bfe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	2501      	movs	r5, #1
 8001c02:	fa96 f3a6 	rbit	r3, r6
 8001c06:	680a      	ldr	r2, [r1, #0]
 8001c08:	fa96 f3a6 	rbit	r3, r6
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	fa05 f303 	lsl.w	r3, r5, r3
 8001c18:	4213      	tst	r3, r2
 8001c1a:	d12d      	bne.n	8001c78 <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1c:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8001c20:	684a      	ldr	r2, [r1, #4]
 8001c22:	4303      	orrs	r3, r0
 8001c24:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c30:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001c46:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001c48:	f7ff fdd2 	bl	80017f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c4c:	2501      	movs	r5, #1
        tickstart = HAL_GetTick();
 8001c4e:	4606      	mov	r6, r0
 8001c50:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c54:	680a      	ldr	r2, [r1, #0]
 8001c56:	fa94 f3a4 	rbit	r3, r4
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	fa05 f303 	lsl.w	r3, r5, r3
 8001c66:	4213      	tst	r3, r2
 8001c68:	f47f ade0 	bne.w	800182c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fdc0 	bl	80017f0 <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	2802      	cmp	r0, #2
 8001c74:	d9ec      	bls.n	8001c50 <HAL_RCC_OscConfig+0x450>
 8001c76:	e627      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff fdba 	bl	80017f0 <HAL_GetTick>
 8001c7c:	1bc0      	subs	r0, r0, r7
 8001c7e:	2802      	cmp	r0, #2
 8001c80:	d9bf      	bls.n	8001c02 <HAL_RCC_OscConfig+0x402>
 8001c82:	e621      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
 8001c84:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fda9 	bl	80017f0 <HAL_GetTick>
 8001c9e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001ca2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	fa94 f3a4 	rbit	r3, r4
 8001caa:	680a      	ldr	r2, [r1, #0]
 8001cac:	fa94 f3a4 	rbit	r3, r4
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa05 f303 	lsl.w	r3, r5, r3
 8001cbc:	4213      	tst	r3, r2
 8001cbe:	f43f adb5 	beq.w	800182c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff fd95 	bl	80017f0 <HAL_GetTick>
 8001cc6:	1b80      	subs	r0, r0, r6
 8001cc8:	2802      	cmp	r0, #2
 8001cca:	d9ec      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x4a6>
 8001ccc:	e5fc      	b.n	80018c8 <HAL_RCC_OscConfig+0xc8>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <HAL_RCC_ClockConfig+0x144>)
{
 8001cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	428b      	cmp	r3, r1
{
 8001ce0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ce2:	d31b      	bcc.n	8001d1c <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	682a      	ldr	r2, [r5, #0]
 8001ce6:	0790      	lsls	r0, r2, #30
 8001ce8:	d424      	bmi.n	8001d34 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	07d2      	lsls	r2, r2, #31
 8001cec:	d42a      	bmi.n	8001d44 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cee:	4a4a      	ldr	r2, [pc, #296]	; (8001e18 <HAL_RCC_ClockConfig+0x144>)
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	428b      	cmp	r3, r1
 8001cf8:	d87a      	bhi.n	8001df0 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfa:	6828      	ldr	r0, [r5, #0]
 8001cfc:	0743      	lsls	r3, r0, #29
 8001cfe:	f100 8082 	bmi.w	8001e06 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	f010 0008 	ands.w	r0, r0, #8
 8001d06:	d014      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d08:	4a44      	ldr	r2, [pc, #272]	; (8001e1c <HAL_RCC_ClockConfig+0x148>)
 8001d0a:	6929      	ldr	r1, [r5, #16]
 8001d0c:	6853      	ldr	r3, [r2, #4]
 8001d0e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d16:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f023 0307 	bic.w	r3, r3, #7
 8001d22:	430b      	orrs	r3, r1
 8001d24:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	d0d9      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8001d30:	2001      	movs	r0, #1
}
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4839      	ldr	r0, [pc, #228]	; (8001e1c <HAL_RCC_ClockConfig+0x148>)
 8001d36:	68ac      	ldr	r4, [r5, #8]
 8001d38:	6843      	ldr	r3, [r0, #4]
 8001d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	6043      	str	r3, [r0, #4]
 8001d42:	e7d2      	b.n	8001cea <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d44:	686a      	ldr	r2, [r5, #4]
 8001d46:	4c35      	ldr	r4, [pc, #212]	; (8001e1c <HAL_RCC_ClockConfig+0x148>)
 8001d48:	2a01      	cmp	r2, #1
 8001d4a:	d127      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xc8>
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d54:	6820      	ldr	r0, [r4, #0]
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	d0e2      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	431a      	orrs	r2, r3
 8001d72:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001d74:	f7ff fd3c 	bl	80017f0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d78:	686b      	ldr	r3, [r5, #4]
 8001d7a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001d7c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d82:	d11e      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	6863      	ldr	r3, [r4, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d0af      	beq.n	8001cee <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7ff fd2f 	bl	80017f0 <HAL_GetTick>
 8001d92:	1b80      	subs	r0, r0, r6
 8001d94:	42b8      	cmp	r0, r7
 8001d96:	d9f5      	bls.n	8001d84 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
 8001d9a:	e7ca      	b.n	8001d32 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9c:	2a02      	cmp	r2, #2
 8001d9e:	bf0c      	ite	eq
 8001da0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001da4:	2302      	movne	r3, #2
 8001da6:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	6826      	ldr	r6, [r4, #0]
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f303 	lsl.w	r3, r0, r3
 8001dbe:	4233      	tst	r3, r6
 8001dc0:	e7d2      	b.n	8001d68 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d10f      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d08e      	beq.n	8001cee <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fd0e 	bl	80017f0 <HAL_GetTick>
 8001dd4:	1b80      	subs	r0, r0, r6
 8001dd6:	42b8      	cmp	r0, r7
 8001dd8:	d9f5      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0xf2>
 8001dda:	e7dd      	b.n	8001d98 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7ff fd08 	bl	80017f0 <HAL_GetTick>
 8001de0:	1b80      	subs	r0, r0, r6
 8001de2:	42b8      	cmp	r0, r7
 8001de4:	d8d8      	bhi.n	8001d98 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	f013 0f0c 	tst.w	r3, #12
 8001dec:	d1f6      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x108>
 8001dee:	e77e      	b.n	8001cee <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df0:	6813      	ldr	r3, [r2, #0]
 8001df2:	f023 0307 	bic.w	r3, r3, #7
 8001df6:	430b      	orrs	r3, r1
 8001df8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	428b      	cmp	r3, r1
 8001e02:	d195      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x5c>
 8001e04:	e779      	b.n	8001cfa <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_RCC_ClockConfig+0x148>)
 8001e08:	68e9      	ldr	r1, [r5, #12]
 8001e0a:	6853      	ldr	r3, [r2, #4]
 8001e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6053      	str	r3, [r2, #4]
 8001e14:	e775      	b.n	8001d02 <HAL_RCC_ClockConfig+0x2e>
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001e24:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e28:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001fa0 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4a5a      	ldr	r2, [pc, #360]	; (8001f98 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8001e2e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001e30:	fa38 f403 	lsrs.w	r4, r8, r3
 8001e34:	d102      	bne.n	8001e3c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8001e36:	b003      	add	sp, #12
 8001e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e3c:	2401      	movs	r4, #1
 8001e3e:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001e42:	ea1a 0508 	ands.w	r5, sl, r8
 8001e46:	f000 809c 	beq.w	8001f82 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4a:	684c      	ldr	r4, [r1, #4]
 8001e4c:	f024 0b10 	bic.w	fp, r4, #16
 8001e50:	f1bb 0f02 	cmp.w	fp, #2
 8001e54:	d114      	bne.n	8001e80 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001e56:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001e5a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001e62:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e66:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001e6a:	270f      	movs	r7, #15
 8001e6c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e70:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	690e      	ldr	r6, [r1, #16]
 8001e76:	fa06 f60e 	lsl.w	r6, r6, lr
 8001e7a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001e7c:	f8cc 6020 	str.w	r6, [ip, #32]
 8001e80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e84:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001e86:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e88:	fa07 f70e 	lsl.w	r7, r7, lr
 8001e8c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e92:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e94:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e98:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9c:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea0:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001ea4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea6:	d811      	bhi.n	8001ecc <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001ea8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eaa:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eae:	68ce      	ldr	r6, [r1, #12]
 8001eb0:	fa06 fc0e 	lsl.w	ip, r6, lr
 8001eb4:	ea4c 060b 	orr.w	r6, ip, fp
        GPIOx->OSPEEDR = temp;
 8001eb8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001eba:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ec0:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001ec4:	409e      	lsls	r6, r3
 8001ec6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001eca:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ecc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ece:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed0:	688e      	ldr	r6, [r1, #8]
 8001ed2:	fa06 f60e 	lsl.w	r6, r6, lr
 8001ed6:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed8:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001eda:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001edc:	d551      	bpl.n	8001f82 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8001ee2:	f046 0601 	orr.w	r6, r6, #1
 8001ee6:	f8c9 6018 	str.w	r6, [r9, #24]
 8001eea:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8001eee:	f023 0703 	bic.w	r7, r3, #3
 8001ef2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ef6:	f006 0601 	and.w	r6, r6, #1
 8001efa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001efe:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001f00:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001f06:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001f08:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f0c:	f04f 0c0f 	mov.w	ip, #15
 8001f10:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f14:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001f18:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f1c:	d033      	beq.n	8001f86 <HAL_GPIO_Init+0x166>
 8001f1e:	4e1f      	ldr	r6, [pc, #124]	; (8001f9c <HAL_GPIO_Init+0x17c>)
 8001f20:	42b0      	cmp	r0, r6
 8001f22:	d032      	beq.n	8001f8a <HAL_GPIO_Init+0x16a>
 8001f24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f28:	42b0      	cmp	r0, r6
 8001f2a:	d030      	beq.n	8001f8e <HAL_GPIO_Init+0x16e>
 8001f2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f30:	42b0      	cmp	r0, r6
 8001f32:	d02e      	beq.n	8001f92 <HAL_GPIO_Init+0x172>
 8001f34:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f38:	42b0      	cmp	r0, r6
 8001f3a:	bf14      	ite	ne
 8001f3c:	2605      	movne	r6, #5
 8001f3e:	2604      	moveq	r6, #4
 8001f40:	fa06 f60e 	lsl.w	r6, r6, lr
 8001f44:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f48:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001f4a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001f52:	bf0c      	ite	eq
 8001f54:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001f56:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8001f58:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001f5a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001f60:	bf0c      	ite	eq
 8001f62:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001f64:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8001f66:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8001f68:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	bf0c      	ite	eq
 8001f70:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001f72:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8001f74:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8001f76:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	bf54      	ite	pl
 8001f7c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001f7e:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001f80:	60d6      	str	r6, [r2, #12]
    position++;
 8001f82:	3301      	adds	r3, #1
 8001f84:	e754      	b.n	8001e30 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f86:	2600      	movs	r6, #0
 8001f88:	e7da      	b.n	8001f40 <HAL_GPIO_Init+0x120>
 8001f8a:	2601      	movs	r6, #1
 8001f8c:	e7d8      	b.n	8001f40 <HAL_GPIO_Init+0x120>
 8001f8e:	2602      	movs	r6, #2
 8001f90:	e7d6      	b.n	8001f40 <HAL_GPIO_Init+0x120>
 8001f92:	2603      	movs	r6, #3
 8001f94:	e7d4      	b.n	8001f40 <HAL_GPIO_Init+0x120>
 8001f96:	bf00      	nop
 8001f98:	40010400 	.word	0x40010400
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	b10a      	cbz	r2, 8001faa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	6181      	str	r1, [r0, #24]
 8001fa8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001faa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001fac:	4770      	bx	lr
 8001fae:	0000      	movs	r0, r0

08001fb0 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fb0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fb2:	6883      	ldr	r3, [r0, #8]
 8001fb4:	69c1      	ldr	r1, [r0, #28]
{
 8001fb6:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fb8:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fba:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fbc:	432b      	orrs	r3, r5
 8001fbe:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fc0:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fc6:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fca:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fcc:	4323      	orrs	r3, r4
 8001fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd0:	6853      	ldr	r3, [r2, #4]
 8001fd2:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001fd4:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fda:	4323      	orrs	r3, r4
 8001fdc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001fde:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001fe0:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001fe2:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001fe6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001fe8:	4323      	orrs	r3, r4
 8001fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fec:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <UART_SetConfig+0x1b4>)
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d112      	bne.n	8002018 <UART_SetConfig+0x68>
 8001ff2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001ff6:	4c5c      	ldr	r4, [pc, #368]	; (8002168 <UART_SetConfig+0x1b8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	5ce3      	ldrb	r3, [r4, r3]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002000:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002004:	d170      	bne.n	80020e8 <UART_SetConfig+0x138>
  {
    switch (clocksource)
 8002006:	2b08      	cmp	r3, #8
 8002008:	d86b      	bhi.n	80020e2 <UART_SetConfig+0x132>
 800200a:	e8df f003 	tbb	[pc, r3]
 800200e:	9e9e      	.short	0x9e9e
 8002010:	6a9e6a23 	.word	0x6a9e6a23
 8002014:	6a6a      	.short	0x6a6a
 8002016:	a6          	.byte	0xa6
 8002017:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002018:	4b54      	ldr	r3, [pc, #336]	; (800216c <UART_SetConfig+0x1bc>)
 800201a:	429a      	cmp	r2, r3
 800201c:	d12b      	bne.n	8002076 <UART_SetConfig+0xc6>
 800201e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	f000 808a 	beq.w	8002144 <UART_SetConfig+0x194>
 8002030:	d806      	bhi.n	8002040 <UART_SetConfig+0x90>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0e4      	beq.n	8002000 <UART_SetConfig+0x50>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002036:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800203a:	d052      	beq.n	80020e2 <UART_SetConfig+0x132>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800203c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800203e:	e019      	b.n	8002074 <UART_SetConfig+0xc4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002044:	f000 8086 	beq.w	8002154 <UART_SetConfig+0x1a4>
 8002048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800204c:	d1f3      	bne.n	8002036 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002052:	d161      	bne.n	8002118 <UART_SetConfig+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002054:	6841      	ldr	r1, [r0, #4]
 8002056:	084b      	lsrs	r3, r1, #1
 8002058:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800205c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002060:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8002064:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002066:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002068:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800206c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002070:	430b      	orrs	r3, r1
 8002072:	60d3      	str	r3, [r2, #12]

}
 8002074:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <UART_SetConfig+0x1c0>)
 8002078:	429a      	cmp	r2, r3
 800207a:	d10e      	bne.n	800209a <UART_SetConfig+0xea>
 800207c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800208a:	d05b      	beq.n	8002144 <UART_SetConfig+0x194>
 800208c:	d9d1      	bls.n	8002032 <UART_SetConfig+0x82>
 800208e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002092:	d05f      	beq.n	8002154 <UART_SetConfig+0x1a4>
 8002094:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002098:	e7d8      	b.n	800204c <UART_SetConfig+0x9c>
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <UART_SetConfig+0x1c4>)
 800209c:	429a      	cmp	r2, r3
 800209e:	d10e      	bne.n	80020be <UART_SetConfig+0x10e>
 80020a0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80020aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020ae:	d049      	beq.n	8002144 <UART_SetConfig+0x194>
 80020b0:	d9bf      	bls.n	8002032 <UART_SetConfig+0x82>
 80020b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020b6:	d04d      	beq.n	8002154 <UART_SetConfig+0x1a4>
 80020b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020bc:	e7c6      	b.n	800204c <UART_SetConfig+0x9c>
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <UART_SetConfig+0x1c8>)
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d1b8      	bne.n	8002036 <UART_SetConfig+0x86>
 80020c4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80020ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d2:	d037      	beq.n	8002144 <UART_SetConfig+0x194>
 80020d4:	d9ad      	bls.n	8002032 <UART_SetConfig+0x82>
 80020d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020da:	d03b      	beq.n	8002154 <UART_SetConfig+0x1a4>
 80020dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020e0:	e7b4      	b.n	800204c <UART_SetConfig+0x9c>
        ret = HAL_ERROR;
 80020e2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e7bf      	b.n	8002068 <UART_SetConfig+0xb8>
    switch (clocksource)
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d8a7      	bhi.n	800203c <UART_SetConfig+0x8c>
 80020ec:	a101      	add	r1, pc, #4	; (adr r1, 80020f4 <UART_SetConfig+0x144>)
 80020ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002131 	.word	0x08002131
 80020f8:	08002131 	.word	0x08002131
 80020fc:	08002119 	.word	0x08002119
 8002100:	0800203d 	.word	0x0800203d
 8002104:	08002131 	.word	0x08002131
 8002108:	0800203d 	.word	0x0800203d
 800210c:	0800203d 	.word	0x0800203d
 8002110:	0800203d 	.word	0x0800203d
 8002114:	0800213b 	.word	0x0800213b
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002118:	6841      	ldr	r1, [r0, #4]
 800211a:	084b      	lsrs	r3, r1, #1
 800211c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002120:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002124:	fbb3 f3f1 	udiv	r3, r3, r1
 8002128:	b29b      	uxth	r3, r3
 800212a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800212c:	2000      	movs	r0, #0
        break;
 800212e:	e7a1      	b.n	8002074 <UART_SetConfig+0xc4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002130:	6841      	ldr	r1, [r0, #4]
 8002132:	084b      	lsrs	r3, r1, #1
 8002134:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8002138:	e7f4      	b.n	8002124 <UART_SetConfig+0x174>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800213a:	6841      	ldr	r1, [r0, #4]
 800213c:	084b      	lsrs	r3, r1, #1
 800213e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002142:	e7ef      	b.n	8002124 <UART_SetConfig+0x174>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002144:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002148:	d1f2      	bne.n	8002130 <UART_SetConfig+0x180>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800214a:	6841      	ldr	r1, [r0, #4]
 800214c:	084b      	lsrs	r3, r1, #1
 800214e:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8002152:	e785      	b.n	8002060 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002154:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002158:	d1ef      	bne.n	800213a <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800215a:	6841      	ldr	r1, [r0, #4]
 800215c:	084b      	lsrs	r3, r1, #1
 800215e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002162:	e77d      	b.n	8002060 <UART_SetConfig+0xb0>
 8002164:	40013800 	.word	0x40013800
 8002168:	08002594 	.word	0x08002594
 800216c:	40004400 	.word	0x40004400
 8002170:	40004800 	.word	0x40004800
 8002174:	40004c00 	.word	0x40004c00
 8002178:	40005000 	.word	0x40005000

0800217c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217e:	9d06      	ldr	r5, [sp, #24]
 8002180:	4604      	mov	r4, r0
 8002182:	4616      	mov	r6, r2
 8002184:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002186:	6820      	ldr	r0, [r4, #0]
 8002188:	69c2      	ldr	r2, [r0, #28]
 800218a:	ea31 0302 	bics.w	r3, r1, r2
 800218e:	bf0c      	ite	eq
 8002190:	2201      	moveq	r2, #1
 8002192:	2200      	movne	r2, #0
 8002194:	42b2      	cmp	r2, r6
 8002196:	d001      	beq.n	800219c <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002198:	2000      	movs	r0, #0
 800219a:	e014      	b.n	80021c6 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800219c:	1c6b      	adds	r3, r5, #1
 800219e:	d0f3      	beq.n	8002188 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80021a0:	b995      	cbnz	r5, 80021c8 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80021b4:	2320      	movs	r3, #32
 80021b6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80021ba:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80021be:	2300      	movs	r3, #0
 80021c0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80021c4:	2003      	movs	r0, #3
}
 80021c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80021c8:	f7ff fb12 	bl	80017f0 <HAL_GetTick>
 80021cc:	1bc0      	subs	r0, r0, r7
 80021ce:	42a8      	cmp	r0, r5
 80021d0:	d9d9      	bls.n	8002186 <UART_WaitOnFlagUntilTimeout+0xa>
 80021d2:	e7e6      	b.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x26>

080021d4 <UART_CheckIdleState>:
{
 80021d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d8:	2100      	movs	r1, #0
 80021da:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80021dc:	f7ff fb08 	bl	80017f0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80021e6:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021e8:	d417      	bmi.n	800221a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	075b      	lsls	r3, r3, #29
 80021f0:	d50a      	bpl.n	8002208 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	462b      	mov	r3, r5
 80021fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff ffbb 	bl	800217c <UART_WaitOnFlagUntilTimeout>
 8002206:	b9a0      	cbnz	r0, 8002232 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002208:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800220a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800220c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002210:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002214:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002218:	e00c      	b.n	8002234 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800221a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	460a      	mov	r2, r1
 8002222:	4603      	mov	r3, r0
 8002224:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002228:	4620      	mov	r0, r4
 800222a:	f7ff ffa7 	bl	800217c <UART_WaitOnFlagUntilTimeout>
 800222e:	2800      	cmp	r0, #0
 8002230:	d0db      	beq.n	80021ea <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002232:	2003      	movs	r0, #3
}
 8002234:	b003      	add	sp, #12
 8002236:	bd30      	pop	{r4, r5, pc}

08002238 <HAL_UART_Init>:
{
 8002238:	b510      	push	{r4, lr}
  if(huart == NULL)
 800223a:	4604      	mov	r4, r0
 800223c:	b328      	cbz	r0, 800228a <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 800223e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002242:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002246:	b90b      	cbnz	r3, 800224c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8002248:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 800224c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800224e:	2324      	movs	r3, #36	; 0x24
 8002250:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff fea7 	bl	8001fb0 <UART_SetConfig>
 8002262:	2801      	cmp	r0, #1
 8002264:	d011      	beq.n	800228a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800226e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002276:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 800227e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8002286:	f7ff bfa5 	b.w	80021d4 <UART_CheckIdleState>
}
 800228a:	2001      	movs	r0, #1
 800228c:	bd10      	pop	{r4, pc}

0800228e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002290:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002292:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002296:	2b20      	cmp	r3, #32
{
 8002298:	460d      	mov	r5, r1
 800229a:	4604      	mov	r4, r0
 800229c:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800229e:	d14b      	bne.n	8002338 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 80022a0:	2d00      	cmp	r5, #0
 80022a2:	d047      	beq.n	8002334 <HAL_UART_Transmit+0xa6>
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	d045      	beq.n	8002334 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022a8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d043      	beq.n	8002338 <HAL_UART_Transmit+0xaa>
 80022b0:	2301      	movs	r3, #1
 80022b2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ba:	2321      	movs	r3, #33	; 0x21
 80022bc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80022c0:	f7ff fa96 	bl	80017f0 <HAL_GetTick>
 80022c4:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 80022c6:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80022ca:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80022ce:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80022d2:	b292      	uxth	r2, r2
 80022d4:	b962      	cbnz	r2, 80022f0 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d6:	9700      	str	r7, [sp, #0]
 80022d8:	4633      	mov	r3, r6
 80022da:	2140      	movs	r1, #64	; 0x40
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff ff4d 	bl	800217c <UART_WaitOnFlagUntilTimeout>
 80022e2:	b998      	cbnz	r0, 800230c <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e4:	2320      	movs	r3, #32
 80022e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022ea:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80022ee:	e00e      	b.n	800230e <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80022f0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022f4:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022fe:	2200      	movs	r2, #0
 8002300:	4633      	mov	r3, r6
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff ff39 	bl	800217c <UART_WaitOnFlagUntilTimeout>
 800230a:	b110      	cbz	r0, 8002312 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800230c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800230e:	b003      	add	sp, #12
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002312:	68a3      	ldr	r3, [r4, #8]
 8002314:	6822      	ldr	r2, [r4, #0]
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	d107      	bne.n	800232c <HAL_UART_Transmit+0x9e>
 800231c:	6923      	ldr	r3, [r4, #16]
 800231e:	b92b      	cbnz	r3, 800232c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002320:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800232a:	e7d0      	b.n	80022ce <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800232c:	782b      	ldrb	r3, [r5, #0]
 800232e:	8513      	strh	r3, [r2, #40]	; 0x28
 8002330:	3501      	adds	r5, #1
 8002332:	e7cc      	b.n	80022ce <HAL_UART_Transmit+0x40>
      return  HAL_ERROR;
 8002334:	2001      	movs	r0, #1
 8002336:	e7ea      	b.n	800230e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002338:	2002      	movs	r0, #2
 800233a:	e7e8      	b.n	800230e <HAL_UART_Transmit+0x80>

0800233c <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002340:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002342:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002346:	2b20      	cmp	r3, #32
{
 8002348:	460d      	mov	r5, r1
 800234a:	4604      	mov	r4, r0
 800234c:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800234e:	d15d      	bne.n	800240c <HAL_UART_Receive+0xd0>
  {
    if((pData == NULL ) || (Size == 0U))
 8002350:	2d00      	cmp	r5, #0
 8002352:	d059      	beq.n	8002408 <HAL_UART_Receive+0xcc>
 8002354:	2a00      	cmp	r2, #0
 8002356:	d057      	beq.n	8002408 <HAL_UART_Receive+0xcc>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002358:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800235c:	2b01      	cmp	r3, #1
 800235e:	d055      	beq.n	800240c <HAL_UART_Receive+0xd0>
 8002360:	2301      	movs	r3, #1
 8002362:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	2300      	movs	r3, #0
 8002370:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002372:	2322      	movs	r3, #34	; 0x22
 8002374:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002378:	f7ff fa3a 	bl	80017f0 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800237c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800237e:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002386:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8002388:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800238c:	d115      	bne.n	80023ba <HAL_UART_Receive+0x7e>
 800238e:	6923      	ldr	r3, [r4, #16]
 8002390:	b98b      	cbnz	r3, 80023b6 <HAL_UART_Receive+0x7a>
 8002392:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002396:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800239a:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800239e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80023a2:	b280      	uxth	r0, r0
 80023a4:	b980      	cbnz	r0, 80023c8 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023a6:	2320      	movs	r3, #32
 80023a8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ac:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 80023b0:	b002      	add	sp, #8
 80023b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80023b6:	23ff      	movs	r3, #255	; 0xff
 80023b8:	e7ed      	b.n	8002396 <HAL_UART_Receive+0x5a>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ed      	bne.n	800239a <HAL_UART_Receive+0x5e>
 80023be:	6923      	ldr	r3, [r4, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f8      	beq.n	80023b6 <HAL_UART_Receive+0x7a>
 80023c4:	237f      	movs	r3, #127	; 0x7f
 80023c6:	e7e6      	b.n	8002396 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 80023c8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023cc:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023d8:	2200      	movs	r2, #0
 80023da:	463b      	mov	r3, r7
 80023dc:	2120      	movs	r1, #32
 80023de:	4620      	mov	r0, r4
 80023e0:	f7ff fecc 	bl	800217c <UART_WaitOnFlagUntilTimeout>
 80023e4:	b9a0      	cbnz	r0, 8002410 <HAL_UART_Receive+0xd4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e6:	68a2      	ldr	r2, [r4, #8]
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80023ee:	d106      	bne.n	80023fe <HAL_UART_Receive+0xc2>
 80023f0:	6922      	ldr	r2, [r4, #16]
 80023f2:	b922      	cbnz	r2, 80023fe <HAL_UART_Receive+0xc2>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80023f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80023f6:	4033      	ands	r3, r6
 80023f8:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80023fc:	e7cf      	b.n	800239e <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002400:	4033      	ands	r3, r6
 8002402:	702b      	strb	r3, [r5, #0]
 8002404:	3501      	adds	r5, #1
 8002406:	e7ca      	b.n	800239e <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8002408:	2001      	movs	r0, #1
 800240a:	e7d1      	b.n	80023b0 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 800240c:	2002      	movs	r0, #2
 800240e:	e7cf      	b.n	80023b0 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8002410:	2003      	movs	r0, #3
 8002412:	e7cd      	b.n	80023b0 <HAL_UART_Receive+0x74>

08002414 <Reset_Handler>:
 8002414:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002416:	e003      	b.n	8002420 <LoopCopyDataInit>

08002418 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 800241a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800241c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800241e:	3104      	adds	r1, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002420:	480a      	ldr	r0, [pc, #40]	; (800244c <LoopForever+0x6>)
	ldr	r3, =_edata
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <LoopForever+0xa>)
	adds	r2, r0, r1
 8002424:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002426:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002428:	d3f6      	bcc.n	8002418 <CopyDataInit>
	ldr	r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <LoopForever+0xe>)
	b	LoopFillZerobss
 800242c:	e002      	b.n	8002434 <LoopFillZerobss>

0800242e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 800242e:	2300      	movs	r3, #0
 	str  r3, [r2]
 8002430:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 8002432:	3204      	adds	r2, #4

08002434 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <LoopForever+0x12>)
	cmp	r2, r3
 8002436:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002438:	d3f9      	bcc.n	800242e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800243a:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 800243e:	f000 f80f 	bl	8002460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002442:	f7fe ffe1 	bl	8001408 <main>

08002446 <LoopForever>:



LoopForever:
    b LoopForever
 8002446:	e7fe      	b.n	8002446 <LoopForever>
 8002448:	080025ec 	.word	0x080025ec
 800244c:	20000000 	.word	0x20000000
 8002450:	20000000 	.word	0x20000000
 8002454:	20000000 	.word	0x20000000
 8002458:	200001dc 	.word	0x200001dc

0800245c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800245c:	e7fe      	b.n	800245c <BusFault_Handler>
 800245e:	0000      	movs	r0, r0

08002460 <__libc_init_array>:
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	4e0d      	ldr	r6, [pc, #52]	; (8002498 <__libc_init_array+0x38>)
 8002464:	4c0d      	ldr	r4, [pc, #52]	; (800249c <__libc_init_array+0x3c>)
 8002466:	1ba4      	subs	r4, r4, r6
 8002468:	10a4      	asrs	r4, r4, #2
 800246a:	2500      	movs	r5, #0
 800246c:	42a5      	cmp	r5, r4
 800246e:	d109      	bne.n	8002484 <__libc_init_array+0x24>
 8002470:	4e0b      	ldr	r6, [pc, #44]	; (80024a0 <__libc_init_array+0x40>)
 8002472:	4c0c      	ldr	r4, [pc, #48]	; (80024a4 <__libc_init_array+0x44>)
 8002474:	f000 f820 	bl	80024b8 <_init>
 8002478:	1ba4      	subs	r4, r4, r6
 800247a:	10a4      	asrs	r4, r4, #2
 800247c:	2500      	movs	r5, #0
 800247e:	42a5      	cmp	r5, r4
 8002480:	d105      	bne.n	800248e <__libc_init_array+0x2e>
 8002482:	bd70      	pop	{r4, r5, r6, pc}
 8002484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002488:	4798      	blx	r3
 800248a:	3501      	adds	r5, #1
 800248c:	e7ee      	b.n	800246c <__libc_init_array+0xc>
 800248e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002492:	4798      	blx	r3
 8002494:	3501      	adds	r5, #1
 8002496:	e7f2      	b.n	800247e <__libc_init_array+0x1e>
 8002498:	080025e4 	.word	0x080025e4
 800249c:	080025e4 	.word	0x080025e4
 80024a0:	080025e4 	.word	0x080025e4
 80024a4:	080025e8 	.word	0x080025e8

080024a8 <memset>:
 80024a8:	4402      	add	r2, r0
 80024aa:	4603      	mov	r3, r0
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d100      	bne.n	80024b2 <memset+0xa>
 80024b0:	4770      	bx	lr
 80024b2:	f803 1b01 	strb.w	r1, [r3], #1
 80024b6:	e7f9      	b.n	80024ac <memset+0x4>

080024b8 <_init>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr

080024c4 <_fini>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr
