
simpleserial-ecc-nofwtrigger-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002490  08002490  00012498  2**0
                  CONTENTS
  4 .ARM          00000000  08002490  08002490  00012498  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002490  08002498  00012498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002494  08002494  00012494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000000  08002498  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000218  08002498  00020218  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00012498  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  000124c2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1af  00000000  00000000  00012569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001442  00000000  00000000  0001e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00005fd5  00000000  00000000  0001fb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000428  00000000  00000000  00025b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000758  00000000  00000000  00025f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004441  00000000  00000000  000266af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000022c5  00000000  00000000  0002aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d98  00000000  00000000  0002cdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0002db50  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0002dc94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08002350 	.word	0x08002350

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	08002350 	.word	0x08002350

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	3401      	adds	r4, #1
 8000220:	f855 3b04 	ldr.w	r3, [r5], #4
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f002 f88e 	bl	8002350 <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	3401      	adds	r4, #1
 800023c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	08002490 	.word	0x08002490
 800024c:	08002490 	.word	0x08002490
 8000250:	08002494 	.word	0x08002494
 8000254:	08002490 	.word	0x08002490

08000258 <memset>:
 8000258:	b4f0      	push	{r4, r5, r6, r7}
 800025a:	0786      	lsls	r6, r0, #30
 800025c:	d046      	beq.n	80002ec <memset+0x94>
 800025e:	1e54      	subs	r4, r2, #1
 8000260:	2a00      	cmp	r2, #0
 8000262:	d03c      	beq.n	80002de <memset+0x86>
 8000264:	b2ca      	uxtb	r2, r1
 8000266:	4603      	mov	r3, r0
 8000268:	e002      	b.n	8000270 <memset+0x18>
 800026a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800026e:	d336      	bcc.n	80002de <memset+0x86>
 8000270:	f803 2b01 	strb.w	r2, [r3], #1
 8000274:	079d      	lsls	r5, r3, #30
 8000276:	d1f8      	bne.n	800026a <memset+0x12>
 8000278:	2c03      	cmp	r4, #3
 800027a:	d929      	bls.n	80002d0 <memset+0x78>
 800027c:	b2cd      	uxtb	r5, r1
 800027e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000282:	2c0f      	cmp	r4, #15
 8000284:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000288:	d933      	bls.n	80002f2 <memset+0x9a>
 800028a:	f1a4 0610 	sub.w	r6, r4, #16
 800028e:	0936      	lsrs	r6, r6, #4
 8000290:	f103 0720 	add.w	r7, r3, #32
 8000294:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000298:	f103 0210 	add.w	r2, r3, #16
 800029c:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002a0:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002a4:	3210      	adds	r2, #16
 80002a6:	42ba      	cmp	r2, r7
 80002a8:	d1f8      	bne.n	800029c <memset+0x44>
 80002aa:	1c72      	adds	r2, r6, #1
 80002ac:	f014 0f0c 	tst.w	r4, #12
 80002b0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002b4:	f004 060f 	and.w	r6, r4, #15
 80002b8:	d013      	beq.n	80002e2 <memset+0x8a>
 80002ba:	1f33      	subs	r3, r6, #4
 80002bc:	f023 0303 	bic.w	r3, r3, #3
 80002c0:	3304      	adds	r3, #4
 80002c2:	4413      	add	r3, r2
 80002c4:	f842 5b04 	str.w	r5, [r2], #4
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d1fb      	bne.n	80002c4 <memset+0x6c>
 80002cc:	f006 0403 	and.w	r4, r6, #3
 80002d0:	b12c      	cbz	r4, 80002de <memset+0x86>
 80002d2:	b2c9      	uxtb	r1, r1
 80002d4:	441c      	add	r4, r3
 80002d6:	f803 1b01 	strb.w	r1, [r3], #1
 80002da:	429c      	cmp	r4, r3
 80002dc:	d1fb      	bne.n	80002d6 <memset+0x7e>
 80002de:	bcf0      	pop	{r4, r5, r6, r7}
 80002e0:	4770      	bx	lr
 80002e2:	4634      	mov	r4, r6
 80002e4:	4613      	mov	r3, r2
 80002e6:	2c00      	cmp	r4, #0
 80002e8:	d1f3      	bne.n	80002d2 <memset+0x7a>
 80002ea:	e7f8      	b.n	80002de <memset+0x86>
 80002ec:	4614      	mov	r4, r2
 80002ee:	4603      	mov	r3, r0
 80002f0:	e7c2      	b.n	8000278 <memset+0x20>
 80002f2:	461a      	mov	r2, r3
 80002f4:	4626      	mov	r6, r4
 80002f6:	e7e0      	b.n	80002ba <memset+0x62>

080002f8 <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 80002f8:	b510      	push	{r4, lr}
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 80002fa:	3a01      	subs	r2, #1
 80002fc:	b252      	sxtb	r2, r2
 80002fe:	0613      	lsls	r3, r2, #24
 8000300:	d501      	bpl.n	8000306 <uECC_vli_cmp_unsafe+0xe>
            return 1;
        } else if (left[i] < right[i]) {
            return -1;
        }
    }
    return 0;
 8000302:	2000      	movs	r0, #0
}
 8000304:	bd10      	pop	{r4, pc}
        if (left[i] > right[i]) {
 8000306:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800030a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800030e:	429c      	cmp	r4, r3
 8000310:	d805      	bhi.n	800031e <uECC_vli_cmp_unsafe+0x26>
        } else if (left[i] < right[i]) {
 8000312:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8000316:	d2f2      	bcs.n	80002fe <uECC_vli_cmp_unsafe+0x6>
            return -1;
 8000318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800031c:	e7f2      	b.n	8000304 <uECC_vli_cmp_unsafe+0xc>
            return 1;
 800031e:	2001      	movs	r0, #1
 8000320:	e7f0      	b.n	8000304 <uECC_vli_cmp_unsafe+0xc>
 8000322:	0000      	movs	r0, r0

08000324 <set_px>:
   }
}


uint8_t set_px(uint8_t* x, uint8_t len)
{
 8000324:	2300      	movs	r3, #0
 8000326:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <set_px+0x30>)
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
   int i, j;
   for (i = 0; i < 8; i++) {
      P[7-i] = 0;
 800032a:	461f      	mov	r7, r3
 800032c:	f842 7904 	str.w	r7, [r2], #-4
      for (j = 0; j < 4; j++) {
 8000330:	18c6      	adds	r6, r0, r3
      P[7-i] = 0;
 8000332:	2118      	movs	r1, #24
         P[7-i] |= x[i*4+j] << ((3-j)*8);
 8000334:	f816 4b01 	ldrb.w	r4, [r6], #1
 8000338:	fa04 f501 	lsl.w	r5, r4, r1
 800033c:	6854      	ldr	r4, [r2, #4]
 800033e:	3908      	subs	r1, #8
 8000340:	432c      	orrs	r4, r5
      for (j = 0; j < 4; j++) {
 8000342:	f111 0f08 	cmn.w	r1, #8
         P[7-i] |= x[i*4+j] << ((3-j)*8);
 8000346:	6054      	str	r4, [r2, #4]
      for (j = 0; j < 4; j++) {
 8000348:	d1f4      	bne.n	8000334 <set_px+0x10>
   for (i = 0; i < 8; i++) {
 800034a:	3304      	adds	r3, #4
 800034c:	2b20      	cmp	r3, #32
 800034e:	d1ed      	bne.n	800032c <set_px+0x8>
      }
   }
   return 0x00;
}
 8000350:	2000      	movs	r0, #0
 8000352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000354:	20000184 	.word	0x20000184

08000358 <set_py>:


uint8_t set_py(uint8_t* y, uint8_t len)
{
 8000358:	2300      	movs	r3, #0
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <set_py+0x30>)
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
   // TODO: this conversion is used in multiple places, move it to a function:
   int i, j;
   for (i = 0; i < 8; i++) {
      P[15-i] = 0;
 800035e:	461f      	mov	r7, r3
 8000360:	f842 7904 	str.w	r7, [r2], #-4
      for (j = 0; j < 4; j++) {
 8000364:	18c6      	adds	r6, r0, r3
      P[15-i] = 0;
 8000366:	2118      	movs	r1, #24
         P[15-i] |= y[i*4+j] << ((3-j)*8);
 8000368:	f816 4b01 	ldrb.w	r4, [r6], #1
 800036c:	fa04 f501 	lsl.w	r5, r4, r1
 8000370:	6854      	ldr	r4, [r2, #4]
 8000372:	3908      	subs	r1, #8
 8000374:	432c      	orrs	r4, r5
      for (j = 0; j < 4; j++) {
 8000376:	f111 0f08 	cmn.w	r1, #8
         P[15-i] |= y[i*4+j] << ((3-j)*8);
 800037a:	6054      	str	r4, [r2, #4]
      for (j = 0; j < 4; j++) {
 800037c:	d1f4      	bne.n	8000368 <set_py+0x10>
   for (i = 0; i < 8; i++) {
 800037e:	3304      	adds	r3, #4
 8000380:	2b20      	cmp	r3, #32
 8000382:	d1ed      	bne.n	8000360 <set_py+0x8>
      }
   }
   return 0x00;
}
 8000384:	2000      	movs	r0, #0
 8000386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000388:	200001a4 	.word	0x200001a4

0800038c <reset>:

uint8_t reset(uint8_t* x, uint8_t len)
{
    // Reset key here if needed
	return 0x00;
}
 800038c:	2000      	movs	r0, #0
 800038e:	4770      	bx	lr

08000390 <get_qx>:
{
 8000390:	b538      	push	{r3, r4, r5, lr}
 8000392:	4602      	mov	r2, r0
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <get_qx+0x30>)
 8000396:	2100      	movs	r1, #0
       for (j = 0; j < 4; j++) {
 8000398:	1855      	adds	r5, r2, r1
{
 800039a:	2318      	movs	r3, #24
          x[i*4+j] = (int)((Q[7-i] >> (3-j)*8) & 255);
 800039c:	6804      	ldr	r4, [r0, #0]
 800039e:	40dc      	lsrs	r4, r3
 80003a0:	3b08      	subs	r3, #8
       for (j = 0; j < 4; j++) {
 80003a2:	f113 0f08 	cmn.w	r3, #8
          x[i*4+j] = (int)((Q[7-i] >> (3-j)*8) & 255);
 80003a6:	f805 4b01 	strb.w	r4, [r5], #1
       for (j = 0; j < 4; j++) {
 80003aa:	d1f7      	bne.n	800039c <get_qx+0xc>
    for (i = 0; i < 8; i++) {
 80003ac:	3104      	adds	r1, #4
 80003ae:	2920      	cmp	r1, #32
 80003b0:	f1a0 0004 	sub.w	r0, r0, #4
 80003b4:	d1f0      	bne.n	8000398 <get_qx+0x8>
    simpleserial_put('r', 32, x);
 80003b6:	2072      	movs	r0, #114	; 0x72
 80003b8:	f000 fff4 	bl	80013a4 <simpleserial_put>
}
 80003bc:	2000      	movs	r0, #0
 80003be:	bd38      	pop	{r3, r4, r5, pc}
 80003c0:	20000144 	.word	0x20000144

080003c4 <get_qy>:
{
 80003c4:	b538      	push	{r3, r4, r5, lr}
 80003c6:	4602      	mov	r2, r0
 80003c8:	480a      	ldr	r0, [pc, #40]	; (80003f4 <get_qy+0x30>)
 80003ca:	2100      	movs	r1, #0
       for (j = 0; j < 4; j++) {
 80003cc:	1855      	adds	r5, r2, r1
{
 80003ce:	2318      	movs	r3, #24
          y[i*4+j] = (int)((Q[15-i] >> (3-j)*8) & 255);
 80003d0:	6804      	ldr	r4, [r0, #0]
 80003d2:	40dc      	lsrs	r4, r3
 80003d4:	3b08      	subs	r3, #8
       for (j = 0; j < 4; j++) {
 80003d6:	f113 0f08 	cmn.w	r3, #8
          y[i*4+j] = (int)((Q[15-i] >> (3-j)*8) & 255);
 80003da:	f805 4b01 	strb.w	r4, [r5], #1
       for (j = 0; j < 4; j++) {
 80003de:	d1f7      	bne.n	80003d0 <get_qy+0xc>
    for (i = 0; i < 8; i++) {
 80003e0:	3104      	adds	r1, #4
 80003e2:	2920      	cmp	r1, #32
 80003e4:	f1a0 0004 	sub.w	r0, r0, #4
 80003e8:	d1f0      	bne.n	80003cc <get_qy+0x8>
    simpleserial_put('r', 32, y);
 80003ea:	2072      	movs	r0, #114	; 0x72
 80003ec:	f000 ffda 	bl	80013a4 <simpleserial_put>
}
 80003f0:	2000      	movs	r0, #0
 80003f2:	bd38      	pop	{r3, r4, r5, pc}
 80003f4:	20000164 	.word	0x20000164

080003f8 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 80003f8:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 80003fa:	4603      	mov	r3, r0
 80003fc:	2000      	movs	r0, #0
 80003fe:	c910      	ldmia	r1!, {r4}
 8000400:	ca20      	ldmia	r2!, {r5}
 8000402:	1964      	adds	r4, r4, r5
 8000404:	c310      	stmia	r3!, {r4}
 8000406:	c910      	ldmia	r1!, {r4}
 8000408:	ca20      	ldmia	r2!, {r5}
 800040a:	416c      	adcs	r4, r5
 800040c:	c310      	stmia	r3!, {r4}
 800040e:	c910      	ldmia	r1!, {r4}
 8000410:	ca20      	ldmia	r2!, {r5}
 8000412:	416c      	adcs	r4, r5
 8000414:	c310      	stmia	r3!, {r4}
 8000416:	c910      	ldmia	r1!, {r4}
 8000418:	ca20      	ldmia	r2!, {r5}
 800041a:	416c      	adcs	r4, r5
 800041c:	c310      	stmia	r3!, {r4}
 800041e:	c910      	ldmia	r1!, {r4}
 8000420:	ca20      	ldmia	r2!, {r5}
 8000422:	416c      	adcs	r4, r5
 8000424:	c310      	stmia	r3!, {r4}
 8000426:	c910      	ldmia	r1!, {r4}
 8000428:	ca20      	ldmia	r2!, {r5}
 800042a:	416c      	adcs	r4, r5
 800042c:	c310      	stmia	r3!, {r4}
 800042e:	c910      	ldmia	r1!, {r4}
 8000430:	ca20      	ldmia	r2!, {r5}
 8000432:	416c      	adcs	r4, r5
 8000434:	c310      	stmia	r3!, {r4}
 8000436:	c910      	ldmia	r1!, {r4}
 8000438:	ca20      	ldmia	r2!, {r5}
 800043a:	416c      	adcs	r4, r5
 800043c:	c310      	stmia	r3!, {r4}
 800043e:	4140      	adcs	r0, r0
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
}
 8000440:	bd30      	pop	{r4, r5, pc}

08000442 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 8000442:	b530      	push	{r4, r5, lr}
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 8000444:	2300      	movs	r3, #0
 8000446:	c910      	ldmia	r1!, {r4}
 8000448:	ca20      	ldmia	r2!, {r5}
 800044a:	1b64      	subs	r4, r4, r5
 800044c:	c010      	stmia	r0!, {r4}
 800044e:	c910      	ldmia	r1!, {r4}
 8000450:	ca20      	ldmia	r2!, {r5}
 8000452:	41ac      	sbcs	r4, r5
 8000454:	c010      	stmia	r0!, {r4}
 8000456:	c910      	ldmia	r1!, {r4}
 8000458:	ca20      	ldmia	r2!, {r5}
 800045a:	41ac      	sbcs	r4, r5
 800045c:	c010      	stmia	r0!, {r4}
 800045e:	c910      	ldmia	r1!, {r4}
 8000460:	ca20      	ldmia	r2!, {r5}
 8000462:	41ac      	sbcs	r4, r5
 8000464:	c010      	stmia	r0!, {r4}
 8000466:	c910      	ldmia	r1!, {r4}
 8000468:	ca20      	ldmia	r2!, {r5}
 800046a:	41ac      	sbcs	r4, r5
 800046c:	c010      	stmia	r0!, {r4}
 800046e:	c910      	ldmia	r1!, {r4}
 8000470:	ca20      	ldmia	r2!, {r5}
 8000472:	41ac      	sbcs	r4, r5
 8000474:	c010      	stmia	r0!, {r4}
 8000476:	c910      	ldmia	r1!, {r4}
 8000478:	ca20      	ldmia	r2!, {r5}
 800047a:	41ac      	sbcs	r4, r5
 800047c:	c010      	stmia	r0!, {r4}
 800047e:	c910      	ldmia	r1!, {r4}
 8000480:	ca20      	ldmia	r2!, {r5}
 8000482:	41ac      	sbcs	r4, r5
 8000484:	c010      	stmia	r0!, {r4}
 8000486:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
                      (for some reason...) */
}
 8000488:	fab3 f083 	clz	r0, r3
 800048c:	0940      	lsrs	r0, r0, #5
 800048e:	bd30      	pop	{r4, r5, pc}

08000490 <uECC_vli_mult>:
        );
        return;
    }
#endif
#if (uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1)
    if (num_words == 8) {
 8000490:	2b08      	cmp	r3, #8
                                wordcount_t num_words) {
 8000492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (num_words == 8) {
 8000496:	f040 8102 	bne.w	800069e <uECC_vli_mult+0x20e>
        __asm__ volatile (
 800049a:	caf0      	ldmia	r2!, {r4, r5, r6, r7}
 800049c:	f851 eb04 	ldr.w	lr, [r1], #4
 80004a0:	fba4 890e 	umull	r8, r9, r4, lr
 80004a4:	f840 8b04 	str.w	r8, [r0], #4
 80004a8:	f04f 0a00 	mov.w	sl, #0
 80004ac:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80004b0:	f04f 0b00 	mov.w	fp, #0
 80004b4:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80004b8:	f04f 0c00 	mov.w	ip, #0
 80004bc:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80004c0:	f851 eb04 	ldr.w	lr, [r1], #4
 80004c4:	f04f 0800 	mov.w	r8, #0
 80004c8:	fbe4 896e 	umaal	r8, r9, r4, lr
 80004cc:	f840 8b04 	str.w	r8, [r0], #4
 80004d0:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80004d4:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80004d8:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80004dc:	f851 eb04 	ldr.w	lr, [r1], #4
 80004e0:	f04f 0800 	mov.w	r8, #0
 80004e4:	fbe4 896e 	umaal	r8, r9, r4, lr
 80004e8:	f840 8b04 	str.w	r8, [r0], #4
 80004ec:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80004f0:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80004f4:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80004f8:	f851 eb04 	ldr.w	lr, [r1], #4
 80004fc:	f04f 0800 	mov.w	r8, #0
 8000500:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000504:	f840 8b04 	str.w	r8, [r0], #4
 8000508:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800050c:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000510:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000514:	f851 eb04 	ldr.w	lr, [r1], #4
 8000518:	f04f 0800 	mov.w	r8, #0
 800051c:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000520:	f840 8b04 	str.w	r8, [r0], #4
 8000524:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000528:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800052c:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000530:	f851 eb04 	ldr.w	lr, [r1], #4
 8000534:	f04f 0800 	mov.w	r8, #0
 8000538:	fbe4 896e 	umaal	r8, r9, r4, lr
 800053c:	f840 8b04 	str.w	r8, [r0], #4
 8000540:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000544:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000548:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800054c:	f851 eb04 	ldr.w	lr, [r1], #4
 8000550:	f04f 0800 	mov.w	r8, #0
 8000554:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000558:	f840 8b04 	str.w	r8, [r0], #4
 800055c:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000560:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000564:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000568:	f851 eb04 	ldr.w	lr, [r1], #4
 800056c:	f04f 0800 	mov.w	r8, #0
 8000570:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000574:	f840 8b04 	str.w	r8, [r0], #4
 8000578:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800057c:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000580:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000584:	f840 9b04 	str.w	r9, [r0], #4
 8000588:	f840 ab04 	str.w	sl, [r0], #4
 800058c:	f840 bb04 	str.w	fp, [r0], #4
 8000590:	f840 cb04 	str.w	ip, [r0], #4
 8000594:	f1a0 0020 	sub.w	r0, r0, #32
 8000598:	f1a1 0120 	sub.w	r1, r1, #32
 800059c:	caf0      	ldmia	r2!, {r4, r5, r6, r7}
 800059e:	f851 eb04 	ldr.w	lr, [r1], #4
 80005a2:	f8d0 8000 	ldr.w	r8, [r0]
 80005a6:	f04f 0900 	mov.w	r9, #0
 80005aa:	fbe4 896e 	umaal	r8, r9, r4, lr
 80005ae:	f840 8b04 	str.w	r8, [r0], #4
 80005b2:	f04f 0a00 	mov.w	sl, #0
 80005b6:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80005ba:	f04f 0b00 	mov.w	fp, #0
 80005be:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80005c2:	f04f 0c00 	mov.w	ip, #0
 80005c6:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80005ca:	f851 eb04 	ldr.w	lr, [r1], #4
 80005ce:	f8d0 8000 	ldr.w	r8, [r0]
 80005d2:	fbe4 896e 	umaal	r8, r9, r4, lr
 80005d6:	f840 8b04 	str.w	r8, [r0], #4
 80005da:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80005de:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80005e2:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 80005e6:	f851 eb04 	ldr.w	lr, [r1], #4
 80005ea:	f8d0 8000 	ldr.w	r8, [r0]
 80005ee:	fbe4 896e 	umaal	r8, r9, r4, lr
 80005f2:	f840 8b04 	str.w	r8, [r0], #4
 80005f6:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 80005fa:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 80005fe:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000602:	f851 eb04 	ldr.w	lr, [r1], #4
 8000606:	f8d0 8000 	ldr.w	r8, [r0]
 800060a:	fbe4 896e 	umaal	r8, r9, r4, lr
 800060e:	f840 8b04 	str.w	r8, [r0], #4
 8000612:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000616:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800061a:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800061e:	f851 eb04 	ldr.w	lr, [r1], #4
 8000622:	f8d0 8000 	ldr.w	r8, [r0]
 8000626:	fbe4 896e 	umaal	r8, r9, r4, lr
 800062a:	f840 8b04 	str.w	r8, [r0], #4
 800062e:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000632:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000636:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800063a:	f851 eb04 	ldr.w	lr, [r1], #4
 800063e:	f8d0 8000 	ldr.w	r8, [r0]
 8000642:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000646:	f840 8b04 	str.w	r8, [r0], #4
 800064a:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800064e:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 8000652:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000656:	f851 eb04 	ldr.w	lr, [r1], #4
 800065a:	f8d0 8000 	ldr.w	r8, [r0]
 800065e:	fbe4 896e 	umaal	r8, r9, r4, lr
 8000662:	f840 8b04 	str.w	r8, [r0], #4
 8000666:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 800066a:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800066e:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 8000672:	f851 eb04 	ldr.w	lr, [r1], #4
 8000676:	f8d0 8000 	ldr.w	r8, [r0]
 800067a:	fbe4 896e 	umaal	r8, r9, r4, lr
 800067e:	f840 8b04 	str.w	r8, [r0], #4
 8000682:	fbe5 9a6e 	umaal	r9, sl, r5, lr
 8000686:	fbe6 ab6e 	umaal	sl, fp, r6, lr
 800068a:	fbe7 bc6e 	umaal	fp, ip, r7, lr
 800068e:	f840 9b04 	str.w	r9, [r0], #4
 8000692:	f840 ab04 	str.w	sl, [r0], #4
 8000696:	f840 bb04 	str.w	fp, [r0], #4
 800069a:	f840 cb04 	str.w	ip, [r0], #4
            : "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
        );
        return;
    }
#endif
}
 800069e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006a2 <uECC_vli_clear>:
    for (i = 0; i < num_words; ++i) {
 80006a2:	2300      	movs	r3, #0
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 80006a4:	b510      	push	{r4, lr}
        vli[i] = 0;
 80006a6:	461c      	mov	r4, r3
    for (i = 0; i < num_words; ++i) {
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	4291      	cmp	r1, r2
 80006ac:	dc00      	bgt.n	80006b0 <uECC_vli_clear+0xe>
}
 80006ae:	bd10      	pop	{r4, pc}
        vli[i] = 0;
 80006b0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i = 0; i < num_words; ++i) {
 80006b4:	3301      	adds	r3, #1
 80006b6:	e7f7      	b.n	80006a8 <uECC_vli_clear+0x6>

080006b8 <uECC_vli_isZero>:
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 80006b8:	b510      	push	{r4, lr}
    for (i = 0; i < num_words; ++i) {
 80006ba:	2300      	movs	r3, #0
    uECC_word_t bits = 0;
 80006bc:	461a      	mov	r2, r3
    for (i = 0; i < num_words; ++i) {
 80006be:	b25c      	sxtb	r4, r3
 80006c0:	42a1      	cmp	r1, r4
 80006c2:	dc03      	bgt.n	80006cc <uECC_vli_isZero+0x14>
}
 80006c4:	fab2 f082 	clz	r0, r2
 80006c8:	0940      	lsrs	r0, r0, #5
 80006ca:	bd10      	pop	{r4, pc}
        bits |= vli[i];
 80006cc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4322      	orrs	r2, r4
    for (i = 0; i < num_words; ++i) {
 80006d4:	e7f3      	b.n	80006be <uECC_vli_isZero+0x6>

080006d6 <uECC_vli_testBit>:
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 80006d6:	114a      	asrs	r2, r1, #5
 80006d8:	2301      	movs	r3, #1
 80006da:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80006de:	f001 011f 	and.w	r1, r1, #31
 80006e2:	fa03 f101 	lsl.w	r1, r3, r1
}
 80006e6:	4008      	ands	r0, r1
 80006e8:	4770      	bx	lr

080006ea <regularize_k>:
}

static uECC_word_t regularize_k(const uECC_word_t * const k,
                                uECC_word_t *k0,
                                uECC_word_t *k1,
                                uECC_Curve curve) {
 80006ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80006ee:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 80006f2:	f119 081f 	adds.w	r8, r9, #31
                                uECC_Curve curve) {
 80006f6:	461d      	mov	r5, r3
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 80006f8:	bf48      	it	mi
 80006fa:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
                                uECC_Curve curve) {
 80006fe:	460e      	mov	r6, r1
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8000700:	f348 1847 	sbfx	r8, r8, #5, #8
    bitcount_t num_n_bits = curve->num_n_bits;
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 8000704:	3524      	adds	r5, #36	; 0x24
 8000706:	4601      	mov	r1, r0
                                uECC_Curve curve) {
 8000708:	4617      	mov	r7, r2
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 800070a:	4643      	mov	r3, r8
 800070c:	462a      	mov	r2, r5
 800070e:	4630      	mov	r0, r6
 8000710:	f7ff fe72 	bl	80003f8 <uECC_vli_add>
 8000714:	4604      	mov	r4, r0
 8000716:	b990      	cbnz	r0, 800073e <regularize_k+0x54>
 8000718:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
 800071c:	da06      	bge.n	800072c <regularize_k+0x42>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
         uECC_vli_testBit(k0, num_n_bits));
 800071e:	4649      	mov	r1, r9
 8000720:	4630      	mov	r0, r6
 8000722:	f7ff ffd8 	bl	80006d6 <uECC_vli_testBit>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 8000726:	1e04      	subs	r4, r0, #0
 8000728:	bf18      	it	ne
 800072a:	2401      	movne	r4, #1
    uECC_vli_add(k1, k0, curve->n, num_n_words);
 800072c:	4643      	mov	r3, r8
 800072e:	462a      	mov	r2, r5
 8000730:	4631      	mov	r1, r6
 8000732:	4638      	mov	r0, r7
 8000734:	f7ff fe60 	bl	80003f8 <uECC_vli_add>
    return carry;
}
 8000738:	4620      	mov	r0, r4
 800073a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 800073e:	2401      	movs	r4, #1
 8000740:	e7f4      	b.n	800072c <regularize_k+0x42>

08000742 <uECC_vli_numBits>:
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8000742:	3901      	subs	r1, #1
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 8000744:	b510      	push	{r4, lr}
 8000746:	4602      	mov	r2, r0
 8000748:	b249      	sxtb	r1, r1
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 800074a:	1d04      	adds	r4, r0, #4
 800074c:	0608      	lsls	r0, r1, #24
 800074e:	b2cb      	uxtb	r3, r1
 8000750:	d404      	bmi.n	800075c <uECC_vli_numBits+0x1a>
 8000752:	3901      	subs	r1, #1
 8000754:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8000758:	2800      	cmp	r0, #0
 800075a:	d0f7      	beq.n	800074c <uECC_vli_numBits+0xa>
    return (i + 1);
 800075c:	3301      	adds	r3, #1
 800075e:	b258      	sxtb	r0, r3
    if (num_digits == 0) {
 8000760:	b150      	cbz	r0, 8000778 <uECC_vli_numBits+0x36>
    digit = vli[num_digits - 1];
 8000762:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8000766:	3b01      	subs	r3, #1
 8000768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (i = 0; digit; ++i) {
 800076c:	2300      	movs	r3, #0
 800076e:	b922      	cbnz	r2, 800077a <uECC_vli_numBits+0x38>
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 8000770:	3801      	subs	r0, #1
 8000772:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8000776:	b200      	sxth	r0, r0
}
 8000778:	bd10      	pop	{r4, pc}
        digit >>= 1;
 800077a:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
 800077c:	3301      	adds	r3, #1
 800077e:	e7f6      	b.n	800076e <uECC_vli_numBits+0x2c>

08000780 <uECC_vli_set>:
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 8000780:	b510      	push	{r4, lr}
    for (i = 0; i < num_words; ++i) {
 8000782:	2300      	movs	r3, #0
 8000784:	b25c      	sxtb	r4, r3
 8000786:	42a2      	cmp	r2, r4
 8000788:	dc00      	bgt.n	800078c <uECC_vli_set+0xc>
}
 800078a:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
 800078c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000790:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i = 0; i < num_words; ++i) {
 8000794:	3301      	adds	r3, #1
 8000796:	e7f5      	b.n	8000784 <uECC_vli_set+0x4>

08000798 <vli_mmod_fast_secp256r1>:
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t tmp[num_words_secp256r1];
    int carry;
    
    /* t */
    uECC_vli_set(result, product, num_words_secp256r1);
 800079a:	2208      	movs	r2, #8
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 800079c:	b089      	sub	sp, #36	; 0x24
 800079e:	460c      	mov	r4, r1
 80007a0:	4606      	mov	r6, r0
    uECC_vli_set(result, product, num_words_secp256r1);
 80007a2:	f7ff ffed 	bl	8000780 <uECC_vli_set>
    
    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
    tmp[3] = product[11];
 80007a6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80007a8:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
 80007aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80007ac:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
 80007ae:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80007b0:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
 80007b2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80007b4:	9306      	str	r3, [sp, #24]
    tmp[7] = product[15];
 80007b6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007b8:	9307      	str	r3, [sp, #28]
    tmp[0] = tmp[1] = tmp[2] = 0;
 80007ba:	2700      	movs	r7, #0
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80007bc:	2308      	movs	r3, #8
 80007be:	466a      	mov	r2, sp
 80007c0:	4669      	mov	r1, sp
 80007c2:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
 80007c4:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80007c8:	9700      	str	r7, [sp, #0]
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80007ca:	f7ff fe15 	bl	80003f8 <uECC_vli_add>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80007ce:	2308      	movs	r3, #8
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80007d0:	4605      	mov	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80007d2:	466a      	mov	r2, sp
 80007d4:	4631      	mov	r1, r6
 80007d6:	4630      	mov	r0, r6
 80007d8:	f7ff fe0e 	bl	80003f8 <uECC_vli_add>
    
    /* s2 */
    tmp[3] = product[12];
 80007dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007de:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
 80007e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007e2:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
 80007e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007e6:	9305      	str	r3, [sp, #20]
    tmp[6] = product[15];
 80007e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80007ea:	4405      	add	r5, r0
    tmp[7] = 0;
 80007ec:	e9cd 3706 	strd	r3, r7, [sp, #24]
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80007f0:	466a      	mov	r2, sp
 80007f2:	2308      	movs	r3, #8
 80007f4:	4669      	mov	r1, sp
 80007f6:	4668      	mov	r0, sp
 80007f8:	f7ff fdfe 	bl	80003f8 <uECC_vli_add>
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 80007fc:	2308      	movs	r3, #8
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80007fe:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000800:	466a      	mov	r2, sp
 8000802:	4631      	mov	r1, r6
 8000804:	4630      	mov	r0, r6
 8000806:	f7ff fdf7 	bl	80003f8 <uECC_vli_add>
    
    /* s3 */
    tmp[0] = product[8];
 800080a:	6a23      	ldr	r3, [r4, #32]
 800080c:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
 800080e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000810:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
 8000812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000814:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[14];
 8000816:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000818:	9306      	str	r3, [sp, #24]
    tmp[7] = product[15];
 800081a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800081c:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 800081e:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000820:	2308      	movs	r3, #8
 8000822:	466a      	mov	r2, sp
 8000824:	4631      	mov	r1, r6
 8000826:	4630      	mov	r0, r6
    tmp[3] = tmp[4] = tmp[5] = 0;
 8000828:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800082c:	9703      	str	r7, [sp, #12]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 800082e:	f7ff fde3 	bl	80003f8 <uECC_vli_add>
    
    /* s4 */
    tmp[0] = product[9];
 8000832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000834:	9300      	str	r3, [sp, #0]
    tmp[1] = product[10];
 8000836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp[2] = product[11];
    tmp[3] = product[13];
    tmp[4] = product[14];
 8000838:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp[1] = product[10];
 800083a:	9301      	str	r3, [sp, #4]
    tmp[2] = product[11];
 800083c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800083e:	9302      	str	r3, [sp, #8]
    tmp[4] = product[14];
 8000840:	9204      	str	r2, [sp, #16]
    tmp[3] = product[13];
 8000842:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmp[5] = product[15];
 8000844:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    tmp[3] = product[13];
 8000846:	9303      	str	r3, [sp, #12]
    tmp[6] = product[13];
 8000848:	e9cd 2305 	strd	r2, r3, [sp, #20]
    tmp[7] = product[8];
 800084c:	6a23      	ldr	r3, [r4, #32]
 800084e:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000850:	4405      	add	r5, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000852:	2308      	movs	r3, #8
 8000854:	466a      	mov	r2, sp
 8000856:	4631      	mov	r1, r6
 8000858:	4630      	mov	r0, r6
 800085a:	f7ff fdcd 	bl	80003f8 <uECC_vli_add>
    
    /* d1 */
    tmp[0] = product[11];
 800085e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000860:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
 8000862:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000864:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
 8000866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000868:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[8];
 800086a:	6a23      	ldr	r3, [r4, #32]
 800086c:	9306      	str	r3, [sp, #24]
    tmp[7] = product[10];
 800086e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000870:	9307      	str	r3, [sp, #28]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 8000872:	4405      	add	r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000874:	2308      	movs	r3, #8
 8000876:	466a      	mov	r2, sp
 8000878:	4631      	mov	r1, r6
 800087a:	4630      	mov	r0, r6
    tmp[3] = tmp[4] = tmp[5] = 0;
 800087c:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8000880:	9703      	str	r7, [sp, #12]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 8000882:	f7ff fdde 	bl	8000442 <uECC_vli_sub>
    
    /* d2 */
    tmp[0] = product[12];
 8000886:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000888:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
 800088a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800088c:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
 800088e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000890:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
 8000892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000894:	9303      	str	r3, [sp, #12]
    tmp[4] = tmp[5] = 0;
    tmp[6] = product[9];
 8000896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000898:	9306      	str	r3, [sp, #24]
    tmp[7] = product[11];
 800089a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800089c:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 800089e:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80008a0:	2308      	movs	r3, #8
 80008a2:	466a      	mov	r2, sp
 80008a4:	4631      	mov	r1, r6
 80008a6:	4630      	mov	r0, r6
    tmp[4] = tmp[5] = 0;
 80008a8:	e9cd 7704 	strd	r7, r7, [sp, #16]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80008ac:	f7ff fdc9 	bl	8000442 <uECC_vli_sub>
    
    /* d3 */
    tmp[0] = product[13];
 80008b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008b2:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
 80008b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008b6:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
 80008b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008ba:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
 80008bc:	6a23      	ldr	r3, [r4, #32]
 80008be:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
 80008c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008c2:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
 80008c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp[6] = 0;
 80008c6:	e9cd 3705 	strd	r3, r7, [sp, #20]
    tmp[7] = product[12];
 80008ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008cc:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80008ce:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80008d0:	2308      	movs	r3, #8
 80008d2:	466a      	mov	r2, sp
 80008d4:	4631      	mov	r1, r6
 80008d6:	4630      	mov	r0, r6
 80008d8:	f7ff fdb3 	bl	8000442 <uECC_vli_sub>
    
    /* d4 */
    tmp[0] = product[14];
 80008dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008de:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
 80008e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmp[2] = 0;
 80008e2:	e9cd 3701 	strd	r3, r7, [sp, #4]
    tmp[3] = product[9];
 80008e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008e8:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
 80008ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008ec:	9304      	str	r3, [sp, #16]
    tmp[5] = product[11];
 80008ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    tmp[6] = 0;
 80008f0:	e9cd 3705 	strd	r3, r7, [sp, #20]
    tmp[7] = product[13];
 80008f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008f6:	9307      	str	r3, [sp, #28]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80008f8:	1a2d      	subs	r5, r5, r0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 80008fa:	2308      	movs	r3, #8
 80008fc:	466a      	mov	r2, sp
 80008fe:	4631      	mov	r1, r6
 8000900:	4630      	mov	r0, r6
 8000902:	f7ff fd9e 	bl	8000442 <uECC_vli_sub>
    
    if (carry < 0) {
 8000906:	1a2d      	subs	r5, r5, r0
        do {
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 8000908:	4c0d      	ldr	r4, [pc, #52]	; (8000940 <vli_mmod_fast_secp256r1+0x1a8>)
    if (carry < 0) {
 800090a:	d40f      	bmi.n	800092c <vli_mmod_fast_secp256r1+0x194>
        } while (carry < 0);
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 800090c:	b935      	cbnz	r5, 800091c <vli_mmod_fast_secp256r1+0x184>
 800090e:	2208      	movs	r2, #8
 8000910:	4631      	mov	r1, r6
 8000912:	4620      	mov	r0, r4
 8000914:	f7ff fcf0 	bl	80002f8 <uECC_vli_cmp_unsafe>
 8000918:	2801      	cmp	r0, #1
 800091a:	d00f      	beq.n	800093c <vli_mmod_fast_secp256r1+0x1a4>
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 800091c:	2308      	movs	r3, #8
 800091e:	4622      	mov	r2, r4
 8000920:	4631      	mov	r1, r6
 8000922:	4630      	mov	r0, r6
 8000924:	f7ff fd8d 	bl	8000442 <uECC_vli_sub>
 8000928:	1a2d      	subs	r5, r5, r0
 800092a:	e7ef      	b.n	800090c <vli_mmod_fast_secp256r1+0x174>
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 800092c:	2308      	movs	r3, #8
 800092e:	4622      	mov	r2, r4
 8000930:	4631      	mov	r1, r6
 8000932:	4630      	mov	r0, r6
 8000934:	f7ff fd60 	bl	80003f8 <uECC_vli_add>
        } while (carry < 0);
 8000938:	182d      	adds	r5, r5, r0
 800093a:	d4f7      	bmi.n	800092c <vli_mmod_fast_secp256r1+0x194>
        }
    }
}
 800093c:	b009      	add	sp, #36	; 0x24
 800093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000940:	0800236c 	.word	0x0800236c

08000944 <uECC_vli_rshift1>:
    vli += num_words;
 8000944:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    uECC_word_t carry = 0;
 8000948:	2300      	movs	r3, #0
    while (vli-- > end) {
 800094a:	4288      	cmp	r0, r1
 800094c:	d300      	bcc.n	8000950 <uECC_vli_rshift1+0xc>
}
 800094e:	4770      	bx	lr
        uECC_word_t temp = *vli;
 8000950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
        *vli = (temp >> 1) | carry;
 8000954:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8000958:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 800095a:	07d3      	lsls	r3, r2, #31
 800095c:	e7f5      	b.n	800094a <uECC_vli_rshift1+0x6>

0800095e <vli_modInv_update>:
    if (!EVEN(uv)) {
 800095e:	6803      	ldr	r3, [r0, #0]
                              wordcount_t num_words) {
 8000960:	b570      	push	{r4, r5, r6, lr}
    if (!EVEN(uv)) {
 8000962:	f013 0601 	ands.w	r6, r3, #1
                              wordcount_t num_words) {
 8000966:	4605      	mov	r5, r0
 8000968:	4614      	mov	r4, r2
    if (!EVEN(uv)) {
 800096a:	d005      	beq.n	8000978 <vli_modInv_update+0x1a>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 800096c:	4613      	mov	r3, r2
 800096e:	460a      	mov	r2, r1
 8000970:	4601      	mov	r1, r0
 8000972:	f7ff fd41 	bl	80003f8 <uECC_vli_add>
 8000976:	4606      	mov	r6, r0
    uECC_vli_rshift1(uv, num_words);
 8000978:	4621      	mov	r1, r4
 800097a:	4628      	mov	r0, r5
 800097c:	f7ff ffe2 	bl	8000944 <uECC_vli_rshift1>
    if (carry) {
 8000980:	b146      	cbz	r6, 8000994 <vli_modInv_update+0x36>
        uv[num_words - 1] |= HIGH_BIT_SET;
 8000982:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8000986:	3a01      	subs	r2, #1
 8000988:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 800098c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000990:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
 8000994:	bd70      	pop	{r4, r5, r6, pc}

08000996 <uECC_vli_modAdd>:
                                  wordcount_t num_words) {
 8000996:	b570      	push	{r4, r5, r6, lr}
 8000998:	f99d 6010 	ldrsb.w	r6, [sp, #16]
 800099c:	461d      	mov	r5, r3
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 800099e:	4633      	mov	r3, r6
                                  wordcount_t num_words) {
 80009a0:	4604      	mov	r4, r0
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 80009a2:	f7ff fd29 	bl	80003f8 <uECC_vli_add>
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 80009a6:	b930      	cbnz	r0, 80009b6 <uECC_vli_modAdd+0x20>
 80009a8:	4632      	mov	r2, r6
 80009aa:	4621      	mov	r1, r4
 80009ac:	4628      	mov	r0, r5
 80009ae:	f7ff fca3 	bl	80002f8 <uECC_vli_cmp_unsafe>
 80009b2:	2801      	cmp	r0, #1
 80009b4:	d007      	beq.n	80009c6 <uECC_vli_modAdd+0x30>
        uECC_vli_sub(result, result, mod, num_words);
 80009b6:	4633      	mov	r3, r6
 80009b8:	462a      	mov	r2, r5
 80009ba:	4621      	mov	r1, r4
 80009bc:	4620      	mov	r0, r4
}
 80009be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        uECC_vli_sub(result, result, mod, num_words);
 80009c2:	f7ff bd3e 	b.w	8000442 <uECC_vli_sub>
}
 80009c6:	bd70      	pop	{r4, r5, r6, pc}

080009c8 <uECC_vli_modSub>:
                                  wordcount_t num_words) {
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	f99d 6010 	ldrsb.w	r6, [sp, #16]
 80009ce:	461d      	mov	r5, r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 80009d0:	4633      	mov	r3, r6
                                  wordcount_t num_words) {
 80009d2:	4604      	mov	r4, r0
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 80009d4:	f7ff fd35 	bl	8000442 <uECC_vli_sub>
    if (l_borrow) {
 80009d8:	b138      	cbz	r0, 80009ea <uECC_vli_modSub+0x22>
        uECC_vli_add(result, result, mod, num_words);
 80009da:	4633      	mov	r3, r6
 80009dc:	462a      	mov	r2, r5
 80009de:	4621      	mov	r1, r4
 80009e0:	4620      	mov	r0, r4
}
 80009e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        uECC_vli_add(result, result, mod, num_words);
 80009e6:	f7ff bd07 	b.w	80003f8 <uECC_vli_add>
}
 80009ea:	bd70      	pop	{r4, r5, r6, pc}

080009ec <uECC_vli_modMult_fast>:
                                        uECC_Curve curve) {
 80009ec:	b530      	push	{r4, r5, lr}
 80009ee:	461c      	mov	r4, r3
 80009f0:	b091      	sub	sp, #68	; 0x44
 80009f2:	4605      	mov	r5, r0
    uECC_vli_mult(product, left, right, curve->num_words);
 80009f4:	f993 3000 	ldrsb.w	r3, [r3]
 80009f8:	4668      	mov	r0, sp
 80009fa:	f7ff fd49 	bl	8000490 <uECC_vli_mult>
    curve->mmod_fast(result, product);
 80009fe:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8000a02:	4669      	mov	r1, sp
 8000a04:	4628      	mov	r0, r5
 8000a06:	4798      	blx	r3
}
 8000a08:	b011      	add	sp, #68	; 0x44
 8000a0a:	bd30      	pop	{r4, r5, pc}

08000a0c <uECC_vli_modSquare_fast>:
                                          uECC_Curve curve) {
 8000a0c:	4613      	mov	r3, r2
    uECC_vli_modMult_fast(result, left, left, curve);
 8000a0e:	460a      	mov	r2, r1
 8000a10:	f7ff bfec 	b.w	80009ec <uECC_vli_modMult_fast>

08000a14 <x_side_default>:
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 8000a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a18:	4615      	mov	r5, r2
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	4604      	mov	r4, r0
 8000a1e:	460e      	mov	r6, r1
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8000a20:	221c      	movs	r2, #28
 8000a22:	2100      	movs	r1, #0
 8000a24:	a803      	add	r0, sp, #12
 8000a26:	f7ff fc17 	bl	8000258 <memset>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 8000a2a:	1d2f      	adds	r7, r5, #4
    wordcount_t num_words = curve->num_words;
 8000a2c:	f995 8000 	ldrsb.w	r8, [r5]
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8000a30:	2303      	movs	r3, #3
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 8000a32:	462a      	mov	r2, r5
 8000a34:	4631      	mov	r1, r6
 8000a36:	4620      	mov	r0, r4
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 8000a38:	9302      	str	r3, [sp, #8]
    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 8000a3a:	f7ff ffe7 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 8000a3e:	463b      	mov	r3, r7
 8000a40:	aa02      	add	r2, sp, #8
 8000a42:	4621      	mov	r1, r4
 8000a44:	4620      	mov	r0, r4
 8000a46:	f8cd 8000 	str.w	r8, [sp]
 8000a4a:	f7ff ffbd 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 8000a4e:	462b      	mov	r3, r5
 8000a50:	4632      	mov	r2, r6
 8000a52:	4621      	mov	r1, r4
 8000a54:	4620      	mov	r0, r4
 8000a56:	f7ff ffc9 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 8000a5a:	f8cd 8000 	str.w	r8, [sp]
 8000a5e:	463b      	mov	r3, r7
 8000a60:	f105 0284 	add.w	r2, r5, #132	; 0x84
 8000a64:	4621      	mov	r1, r4
 8000a66:	4620      	mov	r0, r4
 8000a68:	f7ff ff95 	bl	8000996 <uECC_vli_modAdd>
}
 8000a6c:	b00a      	add	sp, #40	; 0x28
 8000a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000a72 <mod_sqrt_default>:
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8000a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a74:	b091      	sub	sp, #68	; 0x44
 8000a76:	460d      	mov	r5, r1
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000a78:	221c      	movs	r2, #28
 8000a7a:	2100      	movs	r1, #0
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 8000a7c:	4606      	mov	r6, r0
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000a7e:	a801      	add	r0, sp, #4
 8000a80:	f7ff fbea 	bl	8000258 <memset>
 8000a84:	2401      	movs	r4, #1
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000a86:	221c      	movs	r2, #28
 8000a88:	2100      	movs	r1, #0
 8000a8a:	a809      	add	r0, sp, #36	; 0x24
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 8000a8c:	9400      	str	r4, [sp, #0]
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000a8e:	f7ff fbe3 	bl	8000258 <memset>
    wordcount_t num_words = curve->num_words;
 8000a92:	4629      	mov	r1, r5
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8000a94:	466a      	mov	r2, sp
    wordcount_t num_words = curve->num_words;
 8000a96:	f911 7b04 	ldrsb.w	r7, [r1], #4
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 8000a9a:	9408      	str	r4, [sp, #32]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4668      	mov	r0, sp
 8000aa0:	f7ff fcaa 	bl	80003f8 <uECC_vli_add>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	4668      	mov	r0, sp
 8000aa8:	f7ff fe4b 	bl	8000742 <uECC_vli_numBits>
 8000aac:	1e44      	subs	r4, r0, #1
 8000aae:	b224      	sxth	r4, r4
 8000ab0:	2c01      	cmp	r4, #1
 8000ab2:	dc06      	bgt.n	8000ac2 <mod_sqrt_default+0x50>
    uECC_vli_set(a, l_result, num_words);
 8000ab4:	463a      	mov	r2, r7
 8000ab6:	a908      	add	r1, sp, #32
 8000ab8:	4630      	mov	r0, r6
 8000aba:	f7ff fe61 	bl	8000780 <uECC_vli_set>
}
 8000abe:	b011      	add	sp, #68	; 0x44
 8000ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 8000ac2:	a908      	add	r1, sp, #32
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	462a      	mov	r2, r5
 8000ac8:	f7ff ffa0 	bl	8000a0c <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 8000acc:	4621      	mov	r1, r4
 8000ace:	4668      	mov	r0, sp
 8000ad0:	f7ff fe01 	bl	80006d6 <uECC_vli_testBit>
 8000ad4:	b128      	cbz	r0, 8000ae2 <mod_sqrt_default+0x70>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 8000ad6:	a908      	add	r1, sp, #32
 8000ad8:	462b      	mov	r3, r5
 8000ada:	4632      	mov	r2, r6
 8000adc:	4608      	mov	r0, r1
 8000ade:	f7ff ff85 	bl	80009ec <uECC_vli_modMult_fast>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 8000ae2:	3c01      	subs	r4, #1
 8000ae4:	e7e3      	b.n	8000aae <mod_sqrt_default+0x3c>

08000ae6 <double_jacobian_default>:
                                    uECC_Curve curve) {
 8000ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    wordcount_t num_words = curve->num_words;
 8000aea:	f993 6000 	ldrsb.w	r6, [r3]
                                    uECC_Curve curve) {
 8000aee:	b092      	sub	sp, #72	; 0x48
 8000af0:	4604      	mov	r4, r0
 8000af2:	4689      	mov	r9, r1
    if (uECC_vli_isZero(Z1, num_words)) {
 8000af4:	4610      	mov	r0, r2
 8000af6:	4631      	mov	r1, r6
                                    uECC_Curve curve) {
 8000af8:	4615      	mov	r5, r2
 8000afa:	461f      	mov	r7, r3
    if (uECC_vli_isZero(Z1, num_words)) {
 8000afc:	f7ff fddc 	bl	80006b8 <uECC_vli_isZero>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	f040 8091 	bne.w	8000c28 <double_jacobian_default+0x142>
    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8000b06:	463a      	mov	r2, r7
 8000b08:	4649      	mov	r1, r9
 8000b0a:	a802      	add	r0, sp, #8
 8000b0c:	f7ff ff7e 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8000b10:	463b      	mov	r3, r7
 8000b12:	aa02      	add	r2, sp, #8
 8000b14:	4621      	mov	r1, r4
 8000b16:	a80a      	add	r0, sp, #40	; 0x28
 8000b18:	f7ff ff68 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8000b1c:	a902      	add	r1, sp, #8
 8000b1e:	4608      	mov	r0, r1
 8000b20:	463a      	mov	r2, r7
 8000b22:	f7ff ff73 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8000b26:	463b      	mov	r3, r7
 8000b28:	462a      	mov	r2, r5
 8000b2a:	4649      	mov	r1, r9
 8000b2c:	4648      	mov	r0, r9
 8000b2e:	f7ff ff5d 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8000b32:	f107 0804 	add.w	r8, r7, #4
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8000b36:	463a      	mov	r2, r7
 8000b38:	4629      	mov	r1, r5
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f7ff ff66 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 8000b40:	4643      	mov	r3, r8
 8000b42:	462a      	mov	r2, r5
 8000b44:	4621      	mov	r1, r4
 8000b46:	4620      	mov	r0, r4
 8000b48:	9600      	str	r6, [sp, #0]
 8000b4a:	f7ff ff24 	bl	8000996 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8000b4e:	4643      	mov	r3, r8
 8000b50:	462a      	mov	r2, r5
 8000b52:	4629      	mov	r1, r5
 8000b54:	4628      	mov	r0, r5
 8000b56:	9600      	str	r6, [sp, #0]
 8000b58:	f7ff ff1d 	bl	8000996 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	462a      	mov	r2, r5
 8000b60:	4621      	mov	r1, r4
 8000b62:	4628      	mov	r0, r5
 8000b64:	9600      	str	r6, [sp, #0]
 8000b66:	f7ff ff2f 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	462a      	mov	r2, r5
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4620      	mov	r0, r4
 8000b72:	f7ff ff3b 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 8000b76:	4643      	mov	r3, r8
 8000b78:	4622      	mov	r2, r4
 8000b7a:	4621      	mov	r1, r4
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	9600      	str	r6, [sp, #0]
 8000b80:	f7ff ff09 	bl	8000996 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 8000b84:	4643      	mov	r3, r8
 8000b86:	9600      	str	r6, [sp, #0]
 8000b88:	462a      	mov	r2, r5
 8000b8a:	4621      	mov	r1, r4
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff ff02 	bl	8000996 <uECC_vli_modAdd>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8000b92:	6823      	ldr	r3, [r4, #0]
    if (uECC_vli_testBit(X1, 0)) {
 8000b94:	07db      	lsls	r3, r3, #31
 8000b96:	d54a      	bpl.n	8000c2e <double_jacobian_default+0x148>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8000b98:	4633      	mov	r3, r6
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f7ff fc2a 	bl	80003f8 <uECC_vli_add>
        uECC_vli_rshift1(X1, num_words);
 8000ba4:	4631      	mov	r1, r6
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 8000ba6:	4682      	mov	sl, r0
        uECC_vli_rshift1(X1, num_words);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff fecb 	bl	8000944 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 8000bae:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8000bb8:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
 8000bbc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 8000bc0:	463a      	mov	r2, r7
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	f7ff ff21 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8000bca:	4643      	mov	r3, r8
 8000bcc:	aa0a      	add	r2, sp, #40	; 0x28
 8000bce:	4629      	mov	r1, r5
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	9600      	str	r6, [sp, #0]
 8000bd4:	f7ff fef8 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 8000bd8:	4643      	mov	r3, r8
 8000bda:	aa0a      	add	r2, sp, #40	; 0x28
 8000bdc:	4629      	mov	r1, r5
 8000bde:	4628      	mov	r0, r5
 8000be0:	9600      	str	r6, [sp, #0]
 8000be2:	f7ff fef1 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8000be6:	a90a      	add	r1, sp, #40	; 0x28
 8000be8:	4608      	mov	r0, r1
 8000bea:	4643      	mov	r3, r8
 8000bec:	462a      	mov	r2, r5
 8000bee:	9600      	str	r6, [sp, #0]
 8000bf0:	f7ff feea 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	aa0a      	add	r2, sp, #40	; 0x28
 8000bf8:	4621      	mov	r1, r4
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff fef6 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 8000c00:	aa02      	add	r2, sp, #8
 8000c02:	4643      	mov	r3, r8
 8000c04:	4610      	mov	r0, r2
 8000c06:	4621      	mov	r1, r4
 8000c08:	9600      	str	r6, [sp, #0]
 8000c0a:	f7ff fedd 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_set(X1, Z1, num_words);
 8000c0e:	4632      	mov	r2, r6
 8000c10:	4629      	mov	r1, r5
 8000c12:	4620      	mov	r0, r4
 8000c14:	f7ff fdb4 	bl	8000780 <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 8000c18:	4649      	mov	r1, r9
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f7ff fdb0 	bl	8000780 <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 8000c20:	a902      	add	r1, sp, #8
 8000c22:	4648      	mov	r0, r9
 8000c24:	f7ff fdac 	bl	8000780 <uECC_vli_set>
}
 8000c28:	b012      	add	sp, #72	; 0x48
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uECC_vli_rshift1(X1, num_words);
 8000c2e:	4631      	mov	r1, r6
 8000c30:	4620      	mov	r0, r4
 8000c32:	f7ff fe87 	bl	8000944 <uECC_vli_rshift1>
 8000c36:	e7c3      	b.n	8000bc0 <double_jacobian_default+0xda>

08000c38 <XYcZ_addC>:
                      uECC_Curve curve) {
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	b09a      	sub	sp, #104	; 0x68
 8000c3e:	4616      	mov	r6, r2
 8000c40:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
    wordcount_t num_words = curve->num_words;
 8000c44:	4644      	mov	r4, r8
                      uECC_Curve curve) {
 8000c46:	4699      	mov	r9, r3
    wordcount_t num_words = curve->num_words;
 8000c48:	f914 5b04 	ldrsb.w	r5, [r4], #4
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000c4c:	9500      	str	r5, [sp, #0]
                      uECC_Curve curve) {
 8000c4e:	4607      	mov	r7, r0
 8000c50:	468a      	mov	sl, r1
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000c52:	4623      	mov	r3, r4
 8000c54:	4602      	mov	r2, r0
 8000c56:	4631      	mov	r1, r6
 8000c58:	a802      	add	r0, sp, #8
 8000c5a:	f7ff feb5 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 8000c5e:	a902      	add	r1, sp, #8
 8000c60:	4642      	mov	r2, r8
 8000c62:	4608      	mov	r0, r1
 8000c64:	f7ff fed2 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 8000c68:	4643      	mov	r3, r8
 8000c6a:	aa02      	add	r2, sp, #8
 8000c6c:	4639      	mov	r1, r7
 8000c6e:	4638      	mov	r0, r7
 8000c70:	f7ff febc 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 8000c74:	4643      	mov	r3, r8
 8000c76:	aa02      	add	r2, sp, #8
 8000c78:	4631      	mov	r1, r6
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f7ff feb6 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 8000c80:	4623      	mov	r3, r4
 8000c82:	4652      	mov	r2, sl
 8000c84:	4649      	mov	r1, r9
 8000c86:	a802      	add	r0, sp, #8
 8000c88:	9500      	str	r5, [sp, #0]
 8000c8a:	f7ff fe84 	bl	8000996 <uECC_vli_modAdd>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8000c8e:	4623      	mov	r3, r4
 8000c90:	4652      	mov	r2, sl
 8000c92:	4649      	mov	r1, r9
 8000c94:	4648      	mov	r0, r9
 8000c96:	9500      	str	r5, [sp, #0]
 8000c98:	f7ff fe96 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	463a      	mov	r2, r7
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	a80a      	add	r0, sp, #40	; 0x28
 8000ca4:	9500      	str	r5, [sp, #0]
 8000ca6:	f7ff fe8f 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, t6, curve);                /* t2 = y1 * (C - B) = E */
 8000caa:	4643      	mov	r3, r8
 8000cac:	aa0a      	add	r2, sp, #40	; 0x28
 8000cae:	4651      	mov	r1, sl
 8000cb0:	4650      	mov	r0, sl
 8000cb2:	f7ff fe9b 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	4632      	mov	r2, r6
 8000cba:	4639      	mov	r1, r7
 8000cbc:	a80a      	add	r0, sp, #40	; 0x28
 8000cbe:	9500      	str	r5, [sp, #0]
 8000cc0:	f7ff fe69 	bl	8000996 <uECC_vli_modAdd>
    uECC_vli_modSquare_fast(X2, Y2, curve);                  /* t3 = (y2 - y1)^2 = D */
 8000cc4:	4642      	mov	r2, r8
 8000cc6:	4649      	mov	r1, r9
 8000cc8:	4630      	mov	r0, r6
 8000cca:	f7ff fe9f 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 8000cce:	4623      	mov	r3, r4
 8000cd0:	aa0a      	add	r2, sp, #40	; 0x28
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	9500      	str	r5, [sp, #0]
 8000cd8:	f7ff fe76 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 8000cdc:	4623      	mov	r3, r4
 8000cde:	4632      	mov	r2, r6
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	a812      	add	r0, sp, #72	; 0x48
 8000ce4:	9500      	str	r5, [sp, #0]
 8000ce6:	f7ff fe6f 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, t7, curve);                /* t4 = (y2 - y1)*(B - x3) */
 8000cea:	4643      	mov	r3, r8
 8000cec:	aa12      	add	r2, sp, #72	; 0x48
 8000cee:	4649      	mov	r1, r9
 8000cf0:	4648      	mov	r0, r9
 8000cf2:	f7ff fe7b 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	4652      	mov	r2, sl
 8000cfa:	4649      	mov	r1, r9
 8000cfc:	4648      	mov	r0, r9
 8000cfe:	9500      	str	r5, [sp, #0]
 8000d00:	f7ff fe62 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t7, t5, curve);                  /* t7 = (y2 + y1)^2 = F */
 8000d04:	4642      	mov	r2, r8
 8000d06:	a902      	add	r1, sp, #8
 8000d08:	a812      	add	r0, sp, #72	; 0x48
 8000d0a:	f7ff fe7f 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 8000d0e:	a912      	add	r1, sp, #72	; 0x48
 8000d10:	4623      	mov	r3, r4
 8000d12:	aa0a      	add	r2, sp, #40	; 0x28
 8000d14:	4608      	mov	r0, r1
 8000d16:	9500      	str	r5, [sp, #0]
 8000d18:	f7ff fe56 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 8000d1c:	4623      	mov	r3, r4
 8000d1e:	463a      	mov	r2, r7
 8000d20:	a912      	add	r1, sp, #72	; 0x48
 8000d22:	a80a      	add	r0, sp, #40	; 0x28
 8000d24:	9500      	str	r5, [sp, #0]
 8000d26:	f7ff fe4f 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(t6, t6, t5, curve);                /* t6 = (y2+y1)*(x3' - B) */
 8000d2a:	a90a      	add	r1, sp, #40	; 0x28
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	aa02      	add	r2, sp, #8
 8000d30:	4608      	mov	r0, r1
 8000d32:	f7ff fe5b 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */
 8000d36:	4623      	mov	r3, r4
 8000d38:	4652      	mov	r2, sl
 8000d3a:	a90a      	add	r1, sp, #40	; 0x28
 8000d3c:	4650      	mov	r0, sl
 8000d3e:	9500      	str	r5, [sp, #0]
 8000d40:	f7ff fe42 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_set(X1, t7, num_words);
 8000d44:	462a      	mov	r2, r5
 8000d46:	a912      	add	r1, sp, #72	; 0x48
 8000d48:	4638      	mov	r0, r7
 8000d4a:	f7ff fd19 	bl	8000780 <uECC_vli_set>
}
 8000d4e:	b01a      	add	sp, #104	; 0x68
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000d54 <XYcZ_add>:
                     uECC_Curve curve) {
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	b08a      	sub	sp, #40	; 0x28
 8000d5a:	4614      	mov	r4, r2
 8000d5c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
    wordcount_t num_words = curve->num_words;
 8000d60:	4655      	mov	r5, sl
                     uECC_Curve curve) {
 8000d62:	461f      	mov	r7, r3
    wordcount_t num_words = curve->num_words;
 8000d64:	f915 6b04 	ldrsb.w	r6, [r5], #4
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000d68:	9600      	str	r6, [sp, #0]
                     uECC_Curve curve) {
 8000d6a:	4680      	mov	r8, r0
 8000d6c:	4689      	mov	r9, r1
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8000d6e:	462b      	mov	r3, r5
 8000d70:	4602      	mov	r2, r0
 8000d72:	4621      	mov	r1, r4
 8000d74:	a802      	add	r0, sp, #8
 8000d76:	f7ff fe27 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 8000d7a:	a902      	add	r1, sp, #8
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	4608      	mov	r0, r1
 8000d80:	f7ff fe44 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 8000d84:	4653      	mov	r3, sl
 8000d86:	aa02      	add	r2, sp, #8
 8000d88:	4641      	mov	r1, r8
 8000d8a:	4640      	mov	r0, r8
 8000d8c:	f7ff fe2e 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 8000d90:	4653      	mov	r3, sl
 8000d92:	aa02      	add	r2, sp, #8
 8000d94:	4621      	mov	r1, r4
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff fe28 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8000d9c:	462b      	mov	r3, r5
 8000d9e:	464a      	mov	r2, r9
 8000da0:	4639      	mov	r1, r7
 8000da2:	4638      	mov	r0, r7
 8000da4:	9600      	str	r6, [sp, #0]
 8000da6:	f7ff fe0f 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 8000daa:	4652      	mov	r2, sl
 8000dac:	4639      	mov	r1, r7
 8000dae:	a802      	add	r0, sp, #8
 8000db0:	f7ff fe2c 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8000db4:	a902      	add	r1, sp, #8
 8000db6:	462b      	mov	r3, r5
 8000db8:	4642      	mov	r2, r8
 8000dba:	4608      	mov	r0, r1
 8000dbc:	9600      	str	r6, [sp, #0]
 8000dbe:	f7ff fe03 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 8000dc2:	a902      	add	r1, sp, #8
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	4622      	mov	r2, r4
 8000dc8:	4608      	mov	r0, r1
 8000dca:	9600      	str	r6, [sp, #0]
 8000dcc:	f7ff fdfc 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 8000dd0:	462b      	mov	r3, r5
 8000dd2:	4642      	mov	r2, r8
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	9600      	str	r6, [sp, #0]
 8000dda:	f7ff fdf5 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 8000dde:	4653      	mov	r3, sl
 8000de0:	4622      	mov	r2, r4
 8000de2:	4649      	mov	r1, r9
 8000de4:	4648      	mov	r0, r9
 8000de6:	f7ff fe01 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 8000dea:	462b      	mov	r3, r5
 8000dec:	aa02      	add	r2, sp, #8
 8000dee:	4641      	mov	r1, r8
 8000df0:	4620      	mov	r0, r4
 8000df2:	9600      	str	r6, [sp, #0]
 8000df4:	f7ff fde8 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 8000df8:	4653      	mov	r3, sl
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	4638      	mov	r0, r7
 8000e00:	f7ff fdf4 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 8000e04:	462b      	mov	r3, r5
 8000e06:	464a      	mov	r2, r9
 8000e08:	4639      	mov	r1, r7
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	9600      	str	r6, [sp, #0]
 8000e0e:	f7ff fddb 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_set(X2, t5, num_words);
 8000e12:	4632      	mov	r2, r6
 8000e14:	a902      	add	r1, sp, #8
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff fcb2 	bl	8000780 <uECC_vli_set>
}
 8000e1c:	b00a      	add	sp, #40	; 0x28
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000e22 <apply_z>:
                    uECC_Curve curve) {
 8000e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e24:	4615      	mov	r5, r2
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	461c      	mov	r4, r3
 8000e2a:	4607      	mov	r7, r0
 8000e2c:	460e      	mov	r6, r1
    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4629      	mov	r1, r5
 8000e32:	4668      	mov	r0, sp
 8000e34:	f7ff fdea 	bl	8000a0c <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8000e38:	4623      	mov	r3, r4
 8000e3a:	466a      	mov	r2, sp
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f7ff fdd4 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 8000e44:	4623      	mov	r3, r4
 8000e46:	462a      	mov	r2, r5
 8000e48:	4669      	mov	r1, sp
 8000e4a:	4668      	mov	r0, sp
 8000e4c:	f7ff fdce 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 8000e50:	4623      	mov	r3, r4
 8000e52:	466a      	mov	r2, sp
 8000e54:	4631      	mov	r1, r6
 8000e56:	4630      	mov	r0, r6
 8000e58:	f7ff fdc8 	bl	80009ec <uECC_vli_modMult_fast>
}
 8000e5c:	b009      	add	sp, #36	; 0x24
 8000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e60 <uECC_vli_modInv>:
                                  wordcount_t num_words) {
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	460f      	mov	r7, r1
 8000e64:	b0a1      	sub	sp, #132	; 0x84
 8000e66:	4606      	mov	r6, r0
    if (uECC_vli_isZero(input, num_words)) {
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4638      	mov	r0, r7
                                  wordcount_t num_words) {
 8000e6c:	4615      	mov	r5, r2
 8000e6e:	461c      	mov	r4, r3
    if (uECC_vli_isZero(input, num_words)) {
 8000e70:	f7ff fc22 	bl	80006b8 <uECC_vli_isZero>
 8000e74:	b120      	cbz	r0, 8000e80 <uECC_vli_modInv+0x20>
        uECC_vli_clear(result, num_words);
 8000e76:	4630      	mov	r0, r6
 8000e78:	f7ff fc13 	bl	80006a2 <uECC_vli_clear>
}
 8000e7c:	b021      	add	sp, #132	; 0x84
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uECC_vli_set(a, input, num_words);
 8000e80:	4622      	mov	r2, r4
 8000e82:	4639      	mov	r1, r7
 8000e84:	4668      	mov	r0, sp
 8000e86:	f7ff fc7b 	bl	8000780 <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	a808      	add	r0, sp, #32
 8000e8e:	f7ff fc77 	bl	8000780 <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 8000e92:	a810      	add	r0, sp, #64	; 0x40
 8000e94:	4621      	mov	r1, r4
 8000e96:	f7ff fc04 	bl	80006a2 <uECC_vli_clear>
    u[0] = 1;
 8000e9a:	2301      	movs	r3, #1
    uECC_vli_clear(v, num_words);
 8000e9c:	a818      	add	r0, sp, #96	; 0x60
    u[0] = 1;
 8000e9e:	9310      	str	r3, [sp, #64]	; 0x40
    uECC_vli_clear(v, num_words);
 8000ea0:	f7ff fbff 	bl	80006a2 <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	a908      	add	r1, sp, #32
 8000ea8:	4668      	mov	r0, sp
 8000eaa:	f7ff fa25 	bl	80002f8 <uECC_vli_cmp_unsafe>
 8000eae:	b928      	cbnz	r0, 8000ebc <uECC_vli_modInv+0x5c>
    uECC_vli_set(result, u, num_words);
 8000eb0:	4622      	mov	r2, r4
 8000eb2:	a910      	add	r1, sp, #64	; 0x40
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f7ff fc63 	bl	8000780 <uECC_vli_set>
 8000eba:	e7df      	b.n	8000e7c <uECC_vli_modInv+0x1c>
        if (EVEN(a)) {
 8000ebc:	9b00      	ldr	r3, [sp, #0]
 8000ebe:	07da      	lsls	r2, r3, #31
 8000ec0:	d409      	bmi.n	8000ed6 <uECC_vli_modInv+0x76>
            uECC_vli_rshift1(a, num_words);
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	4668      	mov	r0, sp
 8000ec6:	f7ff fd3d 	bl	8000944 <uECC_vli_rshift1>
            vli_modInv_update(u, mod, num_words);
 8000eca:	4622      	mov	r2, r4
 8000ecc:	4629      	mov	r1, r5
 8000ece:	a810      	add	r0, sp, #64	; 0x40
            vli_modInv_update(v, mod, num_words);
 8000ed0:	f7ff fd45 	bl	800095e <vli_modInv_update>
 8000ed4:	e7e6      	b.n	8000ea4 <uECC_vli_modInv+0x44>
        } else if (EVEN(b)) {
 8000ed6:	9b08      	ldr	r3, [sp, #32]
 8000ed8:	07db      	lsls	r3, r3, #31
 8000eda:	d407      	bmi.n	8000eec <uECC_vli_modInv+0x8c>
            uECC_vli_rshift1(b, num_words);
 8000edc:	4621      	mov	r1, r4
 8000ede:	a808      	add	r0, sp, #32
 8000ee0:	f7ff fd30 	bl	8000944 <uECC_vli_rshift1>
            vli_modInv_update(v, mod, num_words);
 8000ee4:	4622      	mov	r2, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	a818      	add	r0, sp, #96	; 0x60
 8000eea:	e7f1      	b.n	8000ed0 <uECC_vli_modInv+0x70>
        } else if (cmpResult > 0) {
 8000eec:	2800      	cmp	r0, #0
            uECC_vli_sub(a, a, b, num_words);
 8000eee:	4623      	mov	r3, r4
        } else if (cmpResult > 0) {
 8000ef0:	dd1c      	ble.n	8000f2c <uECC_vli_modInv+0xcc>
            uECC_vli_sub(a, a, b, num_words);
 8000ef2:	aa08      	add	r2, sp, #32
 8000ef4:	4669      	mov	r1, sp
 8000ef6:	4668      	mov	r0, sp
 8000ef8:	f7ff faa3 	bl	8000442 <uECC_vli_sub>
            uECC_vli_rshift1(a, num_words);
 8000efc:	4621      	mov	r1, r4
 8000efe:	4668      	mov	r0, sp
 8000f00:	f7ff fd20 	bl	8000944 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 8000f04:	4622      	mov	r2, r4
 8000f06:	a918      	add	r1, sp, #96	; 0x60
 8000f08:	a810      	add	r0, sp, #64	; 0x40
 8000f0a:	f7ff f9f5 	bl	80002f8 <uECC_vli_cmp_unsafe>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	da05      	bge.n	8000f1e <uECC_vli_modInv+0xbe>
                uECC_vli_add(u, u, mod, num_words);
 8000f12:	a910      	add	r1, sp, #64	; 0x40
 8000f14:	4623      	mov	r3, r4
 8000f16:	462a      	mov	r2, r5
 8000f18:	4608      	mov	r0, r1
 8000f1a:	f7ff fa6d 	bl	80003f8 <uECC_vli_add>
            uECC_vli_sub(u, u, v, num_words);
 8000f1e:	a910      	add	r1, sp, #64	; 0x40
 8000f20:	4623      	mov	r3, r4
 8000f22:	aa18      	add	r2, sp, #96	; 0x60
 8000f24:	4608      	mov	r0, r1
 8000f26:	f7ff fa8c 	bl	8000442 <uECC_vli_sub>
 8000f2a:	e7ce      	b.n	8000eca <uECC_vli_modInv+0x6a>
            uECC_vli_sub(b, b, a, num_words);
 8000f2c:	a908      	add	r1, sp, #32
 8000f2e:	466a      	mov	r2, sp
 8000f30:	4608      	mov	r0, r1
 8000f32:	f7ff fa86 	bl	8000442 <uECC_vli_sub>
            uECC_vli_rshift1(b, num_words);
 8000f36:	4621      	mov	r1, r4
 8000f38:	a808      	add	r0, sp, #32
 8000f3a:	f7ff fd03 	bl	8000944 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 8000f3e:	4622      	mov	r2, r4
 8000f40:	a910      	add	r1, sp, #64	; 0x40
 8000f42:	a818      	add	r0, sp, #96	; 0x60
 8000f44:	f7ff f9d8 	bl	80002f8 <uECC_vli_cmp_unsafe>
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	da05      	bge.n	8000f58 <uECC_vli_modInv+0xf8>
                uECC_vli_add(v, v, mod, num_words);
 8000f4c:	a918      	add	r1, sp, #96	; 0x60
 8000f4e:	4623      	mov	r3, r4
 8000f50:	462a      	mov	r2, r5
 8000f52:	4608      	mov	r0, r1
 8000f54:	f7ff fa50 	bl	80003f8 <uECC_vli_add>
            uECC_vli_sub(v, v, u, num_words);
 8000f58:	a918      	add	r1, sp, #96	; 0x60
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	aa10      	add	r2, sp, #64	; 0x40
 8000f5e:	4608      	mov	r0, r1
 8000f60:	f7ff fa6f 	bl	8000442 <uECC_vli_sub>
 8000f64:	e7be      	b.n	8000ee4 <uECC_vli_modInv+0x84>

08000f66 <EccPoint_mult>:
                          uECC_Curve curve) {
 8000f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f6a:	b0b1      	sub	sp, #196	; 0xc4
 8000f6c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8000f70:	9c3b      	ldr	r4, [sp, #236]	; 0xec
    wordcount_t num_words = curve->num_words;
 8000f72:	f994 7000 	ldrsb.w	r7, [r4]
    uECC_vli_set(Rx[1], point, num_words);
 8000f76:	a818      	add	r0, sp, #96	; 0x60
                          uECC_Curve curve) {
 8000f78:	4692      	mov	sl, r2
    uECC_vli_set(Rx[1], point, num_words);
 8000f7a:	463a      	mov	r2, r7
                          uECC_Curve curve) {
 8000f7c:	461e      	mov	r6, r3
    uECC_vli_set(Rx[1], point, num_words);
 8000f7e:	f7ff fbff 	bl	8000780 <uECC_vli_set>
    uECC_vli_set(Ry[1], point + num_words, num_words);
 8000f82:	00bb      	lsls	r3, r7, #2
 8000f84:	9305      	str	r3, [sp, #20]
 8000f86:	9b04      	ldr	r3, [sp, #16]
 8000f88:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	a828      	add	r0, sp, #160	; 0xa0
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	f7ff fbf5 	bl	8000780 <uECC_vli_set>
    wordcount_t num_words = curve->num_words;
 8000f96:	f994 5000 	ldrsb.w	r5, [r4]
    if (initial_Z) {
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	f000 8088 	beq.w	80010b0 <EccPoint_mult+0x14a>
        uECC_vli_set(z, initial_Z, num_words);
 8000fa0:	462a      	mov	r2, r5
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	a808      	add	r0, sp, #32
 8000fa6:	f7ff fbeb 	bl	8000780 <uECC_vli_set>
    uECC_vli_set(X2, X1, num_words);
 8000faa:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8000fae:	462a      	mov	r2, r5
 8000fb0:	a918      	add	r1, sp, #96	; 0x60
 8000fb2:	4640      	mov	r0, r8
    uECC_vli_set(Y2, Y1, num_words);
 8000fb4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
    uECC_vli_set(X2, X1, num_words);
 8000fb8:	f7ff fbe2 	bl	8000780 <uECC_vli_set>
    uECC_vli_set(Y2, Y1, num_words);
 8000fbc:	a928      	add	r1, sp, #160	; 0xa0
 8000fbe:	4648      	mov	r0, r9
 8000fc0:	f7ff fbde 	bl	8000780 <uECC_vli_set>
    apply_z(X1, Y1, z, curve);
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	aa08      	add	r2, sp, #32
 8000fc8:	a928      	add	r1, sp, #160	; 0xa0
 8000fca:	a818      	add	r0, sp, #96	; 0x60
 8000fcc:	f7ff ff29 	bl	8000e22 <apply_z>
    curve->double_jacobian(X1, Y1, z, curve);
 8000fd0:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	aa08      	add	r2, sp, #32
 8000fd8:	a928      	add	r1, sp, #160	; 0xa0
 8000fda:	a818      	add	r0, sp, #96	; 0x60
 8000fdc:	47a8      	blx	r5
    apply_z(X2, Y2, z, curve);
 8000fde:	4623      	mov	r3, r4
 8000fe0:	aa08      	add	r2, sp, #32
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	f7ff ff1c 	bl	8000e22 <apply_z>
    for (i = num_bits - 2; i > 0; --i) {
 8000fea:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
 8000fee:	3d02      	subs	r5, #2
 8000ff0:	b22d      	sxth	r5, r5
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	dc63      	bgt.n	80010be <EccPoint_mult+0x158>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8000ff6:	f8da 5000 	ldr.w	r5, [sl]
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8000ffa:	9400      	str	r4, [sp, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 8000ffc:	f005 0601 	and.w	r6, r5, #1
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001000:	ab10      	add	r3, sp, #64	; 0x40
 8001002:	eb03 1846 	add.w	r8, r3, r6, lsl #5
 8001006:	43ed      	mvns	r5, r5
 8001008:	ab20      	add	r3, sp, #128	; 0x80
 800100a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
 800100e:	f005 0501 	and.w	r5, r5, #1
 8001012:	ab10      	add	r3, sp, #64	; 0x40
 8001014:	eb03 1945 	add.w	r9, r3, r5, lsl #5
 8001018:	ab20      	add	r3, sp, #128	; 0x80
 800101a:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 800101e:	f104 0a04 	add.w	sl, r4, #4
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8001022:	462b      	mov	r3, r5
 8001024:	464a      	mov	r2, r9
 8001026:	4631      	mov	r1, r6
 8001028:	4640      	mov	r0, r8
 800102a:	f7ff fe05 	bl	8000c38 <XYcZ_addC>
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 800102e:	4653      	mov	r3, sl
 8001030:	aa10      	add	r2, sp, #64	; 0x40
 8001032:	a918      	add	r1, sp, #96	; 0x60
 8001034:	a808      	add	r0, sp, #32
 8001036:	9700      	str	r7, [sp, #0]
 8001038:	f7ff fcc6 	bl	80009c8 <uECC_vli_modSub>
    uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve);               /* Yb * (X1 - X0) */
 800103c:	a908      	add	r1, sp, #32
 800103e:	4623      	mov	r3, r4
 8001040:	4632      	mov	r2, r6
 8001042:	4608      	mov	r0, r1
 8001044:	f7ff fcd2 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, point, curve);                    /* xP * Yb * (X1 - X0) */
 8001048:	a908      	add	r1, sp, #32
 800104a:	9a04      	ldr	r2, [sp, #16]
 800104c:	4623      	mov	r3, r4
 800104e:	4608      	mov	r0, r1
 8001050:	f7ff fccc 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modInv(z, z, curve->p, num_words);            /* 1 / (xP * Yb * (X1 - X0)) */
 8001054:	a908      	add	r1, sp, #32
 8001056:	463b      	mov	r3, r7
 8001058:	4652      	mov	r2, sl
 800105a:	4608      	mov	r0, r1
 800105c:	f7ff ff00 	bl	8000e60 <uECC_vli_modInv>
    uECC_vli_modMult_fast(z, z, point + num_words, curve);
 8001060:	a908      	add	r1, sp, #32
 8001062:	9a02      	ldr	r2, [sp, #8]
 8001064:	4623      	mov	r3, r4
 8001066:	4608      	mov	r0, r1
 8001068:	f7ff fcc0 	bl	80009ec <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
 800106c:	a908      	add	r1, sp, #32
 800106e:	4623      	mov	r3, r4
 8001070:	4642      	mov	r2, r8
 8001072:	4608      	mov	r0, r1
 8001074:	f7ff fcba 	bl	80009ec <uECC_vli_modMult_fast>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8001078:	9400      	str	r4, [sp, #0]
 800107a:	4633      	mov	r3, r6
 800107c:	4642      	mov	r2, r8
 800107e:	4629      	mov	r1, r5
 8001080:	4648      	mov	r0, r9
 8001082:	f7ff fe67 	bl	8000d54 <XYcZ_add>
    apply_z(Rx[0], Ry[0], z, curve);
 8001086:	4623      	mov	r3, r4
 8001088:	aa08      	add	r2, sp, #32
 800108a:	a920      	add	r1, sp, #128	; 0x80
 800108c:	a810      	add	r0, sp, #64	; 0x40
 800108e:	f7ff fec8 	bl	8000e22 <apply_z>
    uECC_vli_set(result, Rx[0], num_words);
 8001092:	9803      	ldr	r0, [sp, #12]
 8001094:	463a      	mov	r2, r7
 8001096:	a910      	add	r1, sp, #64	; 0x40
 8001098:	f7ff fb72 	bl	8000780 <uECC_vli_set>
    uECC_vli_set(result + num_words, Ry[0], num_words);
 800109c:	9b03      	ldr	r3, [sp, #12]
 800109e:	9c05      	ldr	r4, [sp, #20]
 80010a0:	4423      	add	r3, r4
 80010a2:	a920      	add	r1, sp, #128	; 0x80
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb6b 	bl	8000780 <uECC_vli_set>
}
 80010aa:	b031      	add	sp, #196	; 0xc4
 80010ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uECC_vli_clear(z, num_words);
 80010b0:	4629      	mov	r1, r5
 80010b2:	a808      	add	r0, sp, #32
 80010b4:	f7ff faf5 	bl	80006a2 <uECC_vli_clear>
        z[0] = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	9308      	str	r3, [sp, #32]
 80010bc:	e775      	b.n	8000faa <EccPoint_mult+0x44>
        nb = !uECC_vli_testBit(scalar, i);
 80010be:	4629      	mov	r1, r5
 80010c0:	4650      	mov	r0, sl
 80010c2:	f7ff fb08 	bl	80006d6 <uECC_vli_testBit>
 80010c6:	fab0 f680 	clz	r6, r0
 80010ca:	0976      	lsrs	r6, r6, #5
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 80010cc:	f1c6 0101 	rsb	r1, r6, #1
 80010d0:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
 80010d4:	eb09 1646 	add.w	r6, r9, r6, lsl #5
 80010d8:	eb08 1041 	add.w	r0, r8, r1, lsl #5
 80010dc:	4633      	mov	r3, r6
 80010de:	eb09 1141 	add.w	r1, r9, r1, lsl #5
 80010e2:	465a      	mov	r2, fp
 80010e4:	9400      	str	r4, [sp, #0]
 80010e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80010ea:	f7ff fda5 	bl	8000c38 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 80010ee:	9907      	ldr	r1, [sp, #28]
 80010f0:	9806      	ldr	r0, [sp, #24]
 80010f2:	9400      	str	r4, [sp, #0]
 80010f4:	460b      	mov	r3, r1
 80010f6:	4602      	mov	r2, r0
 80010f8:	4631      	mov	r1, r6
 80010fa:	4658      	mov	r0, fp
 80010fc:	f7ff fe2a 	bl	8000d54 <XYcZ_add>
    for (i = num_bits - 2; i > 0; --i) {
 8001100:	3d01      	subs	r5, #1
 8001102:	e775      	b.n	8000ff0 <EccPoint_mult+0x8a>

08001104 <uECC_point_mult>:
}

void uECC_point_mult(uECC_word_t *result,
                     const uECC_word_t *point,
                     const uECC_word_t *scalar,
                     uECC_Curve curve) {
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	4604      	mov	r4, r0
 800110a:	460d      	mov	r5, r1
 800110c:	4610      	mov	r0, r2
    uECC_word_t tmp1[uECC_MAX_WORDS];
    uECC_word_t tmp2[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
 800110e:	a904      	add	r1, sp, #16
 8001110:	aa0c      	add	r2, sp, #48	; 0x30
                     uECC_Curve curve) {
 8001112:	461e      	mov	r6, r3
    uECC_word_t *p2[2] = {tmp1, tmp2};
 8001114:	9102      	str	r1, [sp, #8]
 8001116:	9203      	str	r2, [sp, #12]
    uECC_word_t carry = regularize_k(scalar, tmp1, tmp2, curve);
 8001118:	f7ff fae7 	bl	80006ea <regularize_k>

    EccPoint_mult(result, point, p2[!carry], 0, curve->num_n_bits + 1, curve);
 800111c:	fab0 f280 	clz	r2, r0
 8001120:	ab14      	add	r3, sp, #80	; 0x50
 8001122:	0952      	lsrs	r2, r2, #5
 8001124:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001128:	8873      	ldrh	r3, [r6, #2]
 800112a:	9601      	str	r6, [sp, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	b21b      	sxth	r3, r3
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f852 2c48 	ldr.w	r2, [r2, #-72]
 8001136:	2300      	movs	r3, #0
 8001138:	4629      	mov	r1, r5
 800113a:	4620      	mov	r0, r4
 800113c:	f7ff ff13 	bl	8000f66 <EccPoint_mult>
}
 8001140:	b014      	add	sp, #80	; 0x50
 8001142:	bd70      	pop	{r4, r5, r6, pc}

08001144 <run_pmul>:
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	2300      	movs	r3, #0
 8001148:	b089      	sub	sp, #36	; 0x24
 800114a:	a907      	add	r1, sp, #28
       kwords[7-i] = 0;
 800114c:	461f      	mov	r7, r3
 800114e:	f841 7904 	str.w	r7, [r1], #-4
       for (j = 0; j < 4; j++) {
 8001152:	18c6      	adds	r6, r0, r3
       kwords[7-i] = 0;
 8001154:	2218      	movs	r2, #24
 8001156:	2400      	movs	r4, #0
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 8001158:	f816 5b01 	ldrb.w	r5, [r6], #1
 800115c:	4095      	lsls	r5, r2
 800115e:	3a08      	subs	r2, #8
       for (j = 0; j < 4; j++) {
 8001160:	f112 0f08 	cmn.w	r2, #8
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 8001164:	ea44 0405 	orr.w	r4, r4, r5
       for (j = 0; j < 4; j++) {
 8001168:	d1f6      	bne.n	8001158 <run_pmul+0x14>
 800116a:	3304      	adds	r3, #4
    for (i = 0; i < 8; i++) {
 800116c:	2b20      	cmp	r3, #32
 800116e:	604c      	str	r4, [r1, #4]
 8001170:	d1ed      	bne.n	800114e <run_pmul+0xa>
    uECC_point_mult(Q, P, kwords, curve);
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <run_pmul+0x44>)
 8001174:	4905      	ldr	r1, [pc, #20]	; (800118c <run_pmul+0x48>)
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <run_pmul+0x4c>)
 8001178:	466a      	mov	r2, sp
 800117a:	f7ff ffc3 	bl	8001104 <uECC_point_mult>
    trigger_low();
 800117e:	f000 fa6f 	bl	8001660 <trigger_low>
}
 8001182:	2000      	movs	r0, #0
 8001184:	b009      	add	sp, #36	; 0x24
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001188:	08002368 	.word	0x08002368
 800118c:	20000168 	.word	0x20000168
 8001190:	20000128 	.word	0x20000128

08001194 <run_pmul_fixed>:
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	2300      	movs	r3, #0
 8001198:	b089      	sub	sp, #36	; 0x24
 800119a:	a907      	add	r1, sp, #28
       kwords[7-i] = 0;
 800119c:	461f      	mov	r7, r3
 800119e:	f841 7904 	str.w	r7, [r1], #-4
       for (j = 0; j < 4; j++) {
 80011a2:	18c6      	adds	r6, r0, r3
       kwords[7-i] = 0;
 80011a4:	2218      	movs	r2, #24
 80011a6:	2400      	movs	r4, #0
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 80011a8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80011ac:	4095      	lsls	r5, r2
 80011ae:	3a08      	subs	r2, #8
       for (j = 0; j < 4; j++) {
 80011b0:	f112 0f08 	cmn.w	r2, #8
          kwords[7-i] |= k[i*4+j] << ((3-j)*8);
 80011b4:	ea44 0405 	orr.w	r4, r4, r5
       for (j = 0; j < 4; j++) {
 80011b8:	d1f6      	bne.n	80011a8 <run_pmul_fixed+0x14>
 80011ba:	3304      	adds	r3, #4
    for (i = 0; i < 8; i++) {
 80011bc:	2b20      	cmp	r3, #32
 80011be:	604c      	str	r4, [r1, #4]
 80011c0:	d1ed      	bne.n	800119e <run_pmul_fixed+0xa>
    uECC_point_mult(Q, curve->G, kwords, curve);
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <run_pmul_fixed+0x48>)
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <run_pmul_fixed+0x4c>)
 80011c6:	466a      	mov	r2, sp
 80011c8:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80011cc:	f7ff ff9a 	bl	8001104 <uECC_point_mult>
    trigger_low();
 80011d0:	f000 fa46 	bl	8001660 <trigger_low>
}
 80011d4:	2000      	movs	r0, #0
 80011d6:	b009      	add	sp, #36	; 0x24
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011da:	bf00      	nop
 80011dc:	08002368 	.word	0x08002368
 80011e0:	20000128 	.word	0x20000128

080011e4 <print>:
{
 80011e4:	b510      	push	{r4, lr}
 80011e6:	1e44      	subs	r4, r0, #1
   while (*ptr != (char)0) {
 80011e8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80011ec:	b900      	cbnz	r0, 80011f0 <print+0xc>
}
 80011ee:	bd10      	pop	{r4, pc}
      putch(*ptr);
 80011f0:	f000 fa58 	bl	80016a4 <putch>
      ptr++;
 80011f4:	e7f8      	b.n	80011e8 <print+0x4>
 80011f6:	0000      	movs	r0, r0

080011f8 <info>:


uint8_t info(uint8_t* x, uint8_t len)
{
 80011f8:	b508      	push	{r3, lr}
        print("ChipWhisperer simpleserial-ecc-notrace, compiled ");
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <info+0x2c>)
 80011fc:	f7ff fff2 	bl	80011e4 <print>
        print(__DATE__);
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <info+0x30>)
 8001202:	f7ff ffef 	bl	80011e4 <print>
        print(", ");
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <info+0x34>)
 8001208:	f7ff ffec 	bl	80011e4 <print>
        print(__TIME__);
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <info+0x38>)
 800120e:	f7ff ffe9 	bl	80011e4 <print>
#ifdef FW_TRIGGER
        print(" with FW trigger");
#else
        print(" without FW trigger");
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <info+0x3c>)
 8001214:	f7ff ffe6 	bl	80011e4 <print>
#endif
        print("\n");
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <info+0x40>)
 800121a:	f7ff ffe3 	bl	80011e4 <print>
	return 0x00;
}
 800121e:	2000      	movs	r0, #0
 8001220:	bd08      	pop	{r3, pc}
 8001222:	bf00      	nop
 8001224:	0800242f 	.word	0x0800242f
 8001228:	08002461 	.word	0x08002461
 800122c:	0800246d 	.word	0x0800246d
 8001230:	08002470 	.word	0x08002470
 8001234:	08002479 	.word	0x08002479
 8001238:	0800248d 	.word	0x0800248d

0800123c <main>:


int main(void)
{
 800123c:	b508      	push	{r3, lr}
    platform_init();
 800123e:	f000 f96d 	bl	800151c <platform_init>
    init_uart();
 8001242:	f000 f9ab 	bl	800159c <init_uart>
    trigger_setup();
 8001246:	f000 f9e7 	bl	8001618 <trigger_setup>

    simpleserial_init();
 800124a:	f000 f893 	bl	8001374 <simpleserial_init>
    simpleserial_addcmd('k', 32, run_pmul);
 800124e:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <main+0x68>)
 8001250:	2120      	movs	r1, #32
 8001252:	206b      	movs	r0, #107	; 0x6b
 8001254:	f000 f88a 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('f', 32, run_pmul_fixed);
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <main+0x6c>)
 800125a:	2120      	movs	r1, #32
 800125c:	2066      	movs	r0, #102	; 0x66
 800125e:	f000 f885 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('a', 32, set_px);
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <main+0x70>)
 8001264:	2120      	movs	r1, #32
 8001266:	2061      	movs	r0, #97	; 0x61
 8001268:	f000 f880 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('b', 32, set_py);
 800126c:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <main+0x74>)
 800126e:	2120      	movs	r1, #32
 8001270:	2062      	movs	r0, #98	; 0x62
 8001272:	f000 f87b 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('p', 32, get_qx);
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <main+0x78>)
 8001278:	2120      	movs	r1, #32
 800127a:	2070      	movs	r0, #112	; 0x70
 800127c:	f000 f876 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('q', 32, get_qy);
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <main+0x7c>)
 8001282:	2120      	movs	r1, #32
 8001284:	2071      	movs	r0, #113	; 0x71
 8001286:	f000 f871 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('x',  0, reset);
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <main+0x80>)
 800128c:	2100      	movs	r1, #0
 800128e:	2078      	movs	r0, #120	; 0x78
 8001290:	f000 f86c 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('i',  0, info);
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <main+0x84>)
 8001296:	2100      	movs	r1, #0
 8001298:	2069      	movs	r0, #105	; 0x69
 800129a:	f000 f867 	bl	800136c <simpleserial_addcmd>

    while(1)
        simpleserial_get();
 800129e:	f000 f8db 	bl	8001458 <simpleserial_get>
    while(1)
 80012a2:	e7fc      	b.n	800129e <main+0x62>
 80012a4:	08001145 	.word	0x08001145
 80012a8:	08001195 	.word	0x08001195
 80012ac:	08000325 	.word	0x08000325
 80012b0:	08000359 	.word	0x08000359
 80012b4:	08000391 	.word	0x08000391
 80012b8:	080003c5 	.word	0x080003c5
 80012bc:	0800038d 	.word	0x0800038d
 80012c0:	080011f9 	.word	0x080011f9

080012c4 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 80012c4:	2001      	movs	r0, #1
 80012c6:	4770      	bx	lr

080012c8 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 80012ca:	2300      	movs	r3, #0
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 80012cc:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 80012ce:	4283      	cmp	r3, r0
 80012d0:	db01      	blt.n	80012d6 <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 80012d2:	2000      	movs	r0, #0
 80012d4:	e020      	b.n	8001318 <hex_decode+0x50>
		char n_lo = ascii_buf[2*i+1];
 80012d6:	f817 5013 	ldrb.w	r5, [r7, r3, lsl #1]
		char n_hi = ascii_buf[2*i];
 80012da:	f811 4013 	ldrb.w	r4, [r1, r3, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 80012de:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 80012e2:	b2f6      	uxtb	r6, r6
 80012e4:	2e09      	cmp	r6, #9
 80012e6:	d80b      	bhi.n	8001300 <hex_decode+0x38>
			data_buf[i] = n_lo - '0';
 80012e8:	54d6      	strb	r6, [r2, r3]
		if(n_hi >= '0' && n_hi <= '9')
 80012ea:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80012ee:	b2ee      	uxtb	r6, r5
 80012f0:	2e09      	cmp	r6, #9
 80012f2:	d814      	bhi.n	800131e <hex_decode+0x56>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80012f4:	5cd4      	ldrb	r4, [r2, r3]
 80012f6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80012fa:	54d4      	strb	r4, [r2, r3]
	for(int i = 0; i < len; i++)
 80012fc:	3301      	adds	r3, #1
 80012fe:	e7e6      	b.n	80012ce <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8001300:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8001304:	2e05      	cmp	r6, #5
 8001306:	d802      	bhi.n	800130e <hex_decode+0x46>
			data_buf[i] = n_lo - 'A' + 10;
 8001308:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 800130a:	54d5      	strb	r5, [r2, r3]
 800130c:	e7ed      	b.n	80012ea <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 800130e:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 8001312:	2e05      	cmp	r6, #5
 8001314:	d901      	bls.n	800131a <hex_decode+0x52>
			return 1;
 8001316:	2001      	movs	r0, #1
}
 8001318:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 800131a:	3d57      	subs	r5, #87	; 0x57
 800131c:	e7f5      	b.n	800130a <hex_decode+0x42>
		else if(n_hi >= 'A' && n_hi <= 'F')
 800131e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8001322:	2d05      	cmp	r5, #5
 8001324:	d802      	bhi.n	800132c <hex_decode+0x64>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8001326:	f1a4 0537 	sub.w	r5, r4, #55	; 0x37
 800132a:	e7e3      	b.n	80012f4 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800132c:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8001330:	2d05      	cmp	r5, #5
 8001332:	d8f0      	bhi.n	8001316 <hex_decode+0x4e>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8001334:	5cd5      	ldrb	r5, [r2, r3]
 8001336:	3c57      	subs	r4, #87	; 0x57
 8001338:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 800133c:	e7dd      	b.n	80012fa <hex_decode+0x32>
 800133e:	0000      	movs	r0, r0

08001340 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8001340:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 8001342:	4e09      	ldr	r6, [pc, #36]	; (8001368 <simpleserial_addcmd_flags+0x28>)
 8001344:	6834      	ldr	r4, [r6, #0]
 8001346:	2c0f      	cmp	r4, #15
 8001348:	dc0b      	bgt.n	8001362 <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 800134a:	29ff      	cmp	r1, #255	; 0xff
 800134c:	d809      	bhi.n	8001362 <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 800134e:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 8001352:	e9c5 1202 	strd	r1, r2, [r5, #8]
	commands[num_commands].flags = fl;
	num_commands++;
 8001356:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8001358:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 800135a:	742b      	strb	r3, [r5, #16]
	num_commands++;
 800135c:	6034      	str	r4, [r6, #0]

	return 0;
 800135e:	2000      	movs	r0, #0
}
 8001360:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8001362:	2001      	movs	r0, #1
 8001364:	e7fc      	b.n	8001360 <simpleserial_addcmd_flags+0x20>
 8001366:	bf00      	nop
 8001368:	2000001c 	.word	0x2000001c

0800136c <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 800136c:	2300      	movs	r3, #0
 800136e:	f7ff bfe7 	b.w	8001340 <simpleserial_addcmd_flags>
 8001372:	0000      	movs	r0, r0

08001374 <simpleserial_init>:
{
 8001374:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <simpleserial_init+0x24>)
 8001378:	2100      	movs	r1, #0
 800137a:	2076      	movs	r0, #118	; 0x76
 800137c:	f7ff fff6 	bl	800136c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <simpleserial_init+0x28>)
 8001382:	2100      	movs	r1, #0
 8001384:	2077      	movs	r0, #119	; 0x77
 8001386:	f7ff fff1 	bl	800136c <simpleserial_addcmd>
}
 800138a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <simpleserial_init+0x2c>)
 8001390:	2100      	movs	r1, #0
 8001392:	2079      	movs	r0, #121	; 0x79
 8001394:	f7ff bfea 	b.w	800136c <simpleserial_addcmd>
 8001398:	080012c5 	.word	0x080012c5
 800139c:	08001409 	.word	0x08001409
 80013a0:	080013e5 	.word	0x080013e5

080013a4 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	4614      	mov	r4, r2
 80013a8:	460e      	mov	r6, r1
	// Write first character
	putch(c);
 80013aa:	f000 f97b 	bl	80016a4 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 80013ae:	4f0c      	ldr	r7, [pc, #48]	; (80013e0 <simpleserial_put+0x3c>)
 80013b0:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 80013b2:	f1c4 0401 	rsb	r4, r4, #1
 80013b6:	1963      	adds	r3, r4, r5
 80013b8:	429e      	cmp	r6, r3
 80013ba:	dc04      	bgt.n	80013c6 <simpleserial_put+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 80013bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 80013c0:	200a      	movs	r0, #10
 80013c2:	f000 b96f 	b.w	80016a4 <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 80013c6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	5cf8      	ldrb	r0, [r7, r3]
 80013ce:	f000 f969 	bl	80016a4 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 80013d2:	782b      	ldrb	r3, [r5, #0]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	5cf8      	ldrb	r0, [r7, r3]
 80013da:	f000 f963 	bl	80016a4 <putch>
	for(int i = 0; i < size; i++)
 80013de:	e7ea      	b.n	80013b6 <simpleserial_put+0x12>
 80013e0:	0800241c 	.word	0x0800241c

080013e4 <ss_num_commands>:
{
 80013e4:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <ss_num_commands+0x20>)
    simpleserial_put('r', 0x01, &ncmds);
 80013e8:	f10d 0207 	add.w	r2, sp, #7
    uint8_t ncmds = num_commands & 0xFF;
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 0x01, &ncmds);
 80013f2:	2101      	movs	r1, #1
 80013f4:	2072      	movs	r0, #114	; 0x72
 80013f6:	f7ff ffd5 	bl	80013a4 <simpleserial_put>
}
 80013fa:	2000      	movs	r0, #0
 80013fc:	b003      	add	sp, #12
 80013fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001402:	bf00      	nop
 8001404:	2000001c 	.word	0x2000001c

08001408 <ss_get_commands>:
{
 8001408:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <ss_get_commands+0x4c>)
 800140c:	6801      	ldr	r1, [r0, #0]
{
 800140e:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001410:	b2cd      	uxtb	r5, r1
 8001412:	2400      	movs	r4, #0
 8001414:	b2e3      	uxtb	r3, r4
 8001416:	42ab      	cmp	r3, r5
 8001418:	f104 0401 	add.w	r4, r4, #1
 800141c:	db09      	blt.n	8001432 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 800141e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001422:	466a      	mov	r2, sp
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	2072      	movs	r0, #114	; 0x72
 8001428:	f7ff ffbc 	bl	80013a4 <simpleserial_put>
}
 800142c:	2000      	movs	r0, #0
 800142e:	b00c      	add	sp, #48	; 0x30
 8001430:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 8001432:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001436:	ae0c      	add	r6, sp, #48	; 0x30
 8001438:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800143c:	4432      	add	r2, r6
 800143e:	791e      	ldrb	r6, [r3, #4]
 8001440:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 8001444:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 8001446:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 8001448:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 800144c:	f802 3c2e 	strb.w	r3, [r2, #-46]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8001450:	e7e0      	b.n	8001414 <ss_get_commands+0xc>
 8001452:	bf00      	nop
 8001454:	2000001c 	.word	0x2000001c

08001458 <simpleserial_get>:
{
 8001458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 800145c:	4c2e      	ldr	r4, [pc, #184]	; (8001518 <simpleserial_get+0xc0>)
{
 800145e:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
 8001462:	f000 f905 	bl	8001670 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8001466:	6822      	ldr	r2, [r4, #0]
 8001468:	2300      	movs	r3, #0
		if(commands[cmd].c == c)
 800146a:	1d21      	adds	r1, r4, #4
	for(cmd = 0; cmd < num_commands; cmd++)
 800146c:	429a      	cmp	r2, r3
 800146e:	dc04      	bgt.n	800147a <simpleserial_get+0x22>
	if(cmd == num_commands)
 8001470:	d107      	bne.n	8001482 <simpleserial_get+0x2a>
}
 8001472:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 8001476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 800147a:	011d      	lsls	r5, r3, #4
 800147c:	5c6d      	ldrb	r5, [r5, r1]
 800147e:	4285      	cmp	r5, r0
 8001480:	d13d      	bne.n	80014fe <simpleserial_get+0xa6>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8001482:	eb04 1503 	add.w	r5, r4, r3, lsl #4
 8001486:	011e      	lsls	r6, r3, #4
 8001488:	7c2b      	ldrb	r3, [r5, #16]
 800148a:	07db      	lsls	r3, r3, #31
 800148c:	d514      	bpl.n	80014b8 <simpleserial_get+0x60>
		uint8_t l = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 8001494:	f000 f8ec 	bl	8001670 <getch>
 8001498:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
 800149c:	f000 f8e8 	bl	8001670 <getch>
		if (hex_decode(1, buff, &l))
 80014a0:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 80014a2:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
 80014a6:	a942      	add	r1, sp, #264	; 0x108
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff ff0d 	bl	80012c8 <hex_decode>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d1df      	bne.n	8001472 <simpleserial_get+0x1a>
		commands[cmd].len = l;
 80014b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80014b6:	60ab      	str	r3, [r5, #8]
	for(cmd = 0; cmd < num_commands; cmd++)
 80014b8:	2500      	movs	r5, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80014ba:	19a7      	adds	r7, r4, r6
		ascii_buf[i] = c;
 80014bc:	f50d 7884 	add.w	r8, sp, #264	; 0x108
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 80014c6:	d31c      	bcc.n	8001502 <simpleserial_get+0xaa>
	c = getch();
 80014c8:	f000 f8d2 	bl	8001670 <getch>
	if(c != '\n' && c != '\r')
 80014cc:	280a      	cmp	r0, #10
 80014ce:	d001      	beq.n	80014d4 <simpleserial_get+0x7c>
 80014d0:	280d      	cmp	r0, #13
 80014d2:	d1ce      	bne.n	8001472 <simpleserial_get+0x1a>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 80014d4:	4434      	add	r4, r6
 80014d6:	aa02      	add	r2, sp, #8
 80014d8:	68a5      	ldr	r5, [r4, #8]
 80014da:	a942      	add	r1, sp, #264	; 0x108
 80014dc:	4628      	mov	r0, r5
 80014de:	f7ff fef3 	bl	80012c8 <hex_decode>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d1c5      	bne.n	8001472 <simpleserial_get+0x1a>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80014e6:	b2e9      	uxtb	r1, r5
 80014e8:	68e3      	ldr	r3, [r4, #12]
 80014ea:	a802      	add	r0, sp, #8
 80014ec:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 80014ee:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80014f0:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 80014f4:	2101      	movs	r1, #1
 80014f6:	207a      	movs	r0, #122	; 0x7a
 80014f8:	f7ff ff54 	bl	80013a4 <simpleserial_put>
 80014fc:	e7b9      	b.n	8001472 <simpleserial_get+0x1a>
	for(cmd = 0; cmd < num_commands; cmd++)
 80014fe:	3301      	adds	r3, #1
 8001500:	e7b4      	b.n	800146c <simpleserial_get+0x14>
		c = getch();
 8001502:	f000 f8b5 	bl	8001670 <getch>
		if(c == '\n' || c == '\r')
 8001506:	280a      	cmp	r0, #10
 8001508:	d0b3      	beq.n	8001472 <simpleserial_get+0x1a>
 800150a:	280d      	cmp	r0, #13
 800150c:	d0b1      	beq.n	8001472 <simpleserial_get+0x1a>
		ascii_buf[i] = c;
 800150e:	f805 0008 	strb.w	r0, [r5, r8]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8001512:	3501      	adds	r5, #1
 8001514:	e7d4      	b.n	80014c0 <simpleserial_get+0x68>
 8001516:	bf00      	nop
 8001518:	2000001c 	.word	0x2000001c

0800151c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001520:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001522:	2603      	movs	r6, #3
 8001524:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001528:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800152a:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800152c:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8001530:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8001532:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001534:	f000 f8ce 	bl	80016d4 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001538:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 800153a:	4621      	mov	r1, r4
 800153c:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800153e:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001542:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8001548:	f000 fb32 	bl	8001bb0 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <platform_init+0x78>)
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001558:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001560:	4c0d      	ldr	r4, [pc, #52]	; (8001598 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001566:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8001568:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800156c:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800156e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8001572:	f000 fbc3 	bl	8001cfc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001576:	462a      	mov	r2, r5
 8001578:	4620      	mov	r0, r4
 800157a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157e:	f000 fc81 	bl	8001e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001582:	462a      	mov	r2, r5
 8001584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001588:	4620      	mov	r0, r4
 800158a:	f000 fc7b 	bl	8001e84 <HAL_GPIO_WritePin>
#endif
}
 800158e:	b016      	add	sp, #88	; 0x58
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	48000800 	.word	0x48000800

0800159c <init_uart>:

void init_uart(void)
{
 800159c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800159e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 80015a2:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2101      	movs	r1, #1
 80015ac:	2303      	movs	r3, #3
 80015ae:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 80015b2:	4c16      	ldr	r4, [pc, #88]	; (800160c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 80015b8:	6963      	ldr	r3, [r4, #20]
 80015ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015be:	6163      	str	r3, [r4, #20]
 80015c0:	6963      	ldr	r3, [r4, #20]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80015c8:	a903      	add	r1, sp, #12
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 80015ce:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80015d0:	f000 fb94 	bl	8001cfc <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 80015d4:	480e      	ldr	r0, [pc, #56]	; (8001610 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 80015d6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001614 <init_uart+0x78>
 80015da:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80015de:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80015e4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80015e8:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80015ea:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80015ec:	230c      	movs	r3, #12
 80015ee:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 80015f0:	69a3      	ldr	r3, [r4, #24]
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	61a3      	str	r3, [r4, #24]
 80015f8:	69a3      	ldr	r3, [r4, #24]
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8001602:	f000 fd93 	bl	800212c <HAL_UART_Init>
}
 8001606:	b008      	add	sp, #32
 8001608:	bd10      	pop	{r4, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	200001a8 	.word	0x200001a8
 8001614:	40013800 	.word	0x40013800

08001618 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <trigger_setup+0x44>)
{
 800161a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	695b      	ldr	r3, [r3, #20]
{
 8001626:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001630:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001634:	2301      	movs	r3, #1
 8001636:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800163a:	2500      	movs	r5, #0
 800163c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800163e:	a901      	add	r1, sp, #4
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001644:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8001648:	f000 fb58 	bl	8001cfc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800164c:	462a      	mov	r2, r5
 800164e:	4621      	mov	r1, r4
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f000 fc16 	bl	8001e84 <HAL_GPIO_WritePin>
}
 8001658:	b007      	add	sp, #28
 800165a:	bd30      	pop	{r4, r5, pc}
 800165c:	40021000 	.word	0x40021000

08001660 <trigger_low>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f000 bc0b 	b.w	8001e84 <HAL_GPIO_WritePin>
 800166e:	0000      	movs	r0, r0

08001670 <getch>:
}

char getch(void)
{
 8001670:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001672:	4d0a      	ldr	r5, [pc, #40]	; (800169c <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8001674:	4c0a      	ldr	r4, [pc, #40]	; (80016a0 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8001676:	f241 3388 	movw	r3, #5000	; 0x1388
 800167a:	2201      	movs	r2, #1
 800167c:	f10d 0107 	add.w	r1, sp, #7
 8001680:	4628      	mov	r0, r5
 8001682:	f000 fdd4 	bl	800222e <HAL_UART_Receive>
 8001686:	b918      	cbnz	r0, 8001690 <getch+0x20>
  //putch(d);
  return d;
}
 8001688:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800168c:	b003      	add	sp, #12
 800168e:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8001690:	6a23      	ldr	r3, [r4, #32]
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6223      	str	r3, [r4, #32]
 8001698:	e7ed      	b.n	8001676 <getch+0x6>
 800169a:	bf00      	nop
 800169c:	200001a8 	.word	0x200001a8
 80016a0:	40013800 	.word	0x40013800

080016a4 <putch>:

void putch(char c)
{
 80016a4:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80016a6:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 80016aa:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f10d 0107 	add.w	r1, sp, #7
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <putch+0x1c>)
 80016b6:	f000 fd64 	bl	8002182 <HAL_UART_Transmit>
}
 80016ba:	b003      	add	sp, #12
 80016bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80016c0:	200001a8 	.word	0x200001a8

080016c4 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0xc>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	1c42      	adds	r2, r0, #1
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000120 	.word	0x20000120

080016d4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d4:	6803      	ldr	r3, [r0, #0]
{
 80016d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	07d9      	lsls	r1, r3, #31
{
 80016dc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	d411      	bmi.n	8001704 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	079a      	lsls	r2, r3, #30
 80016e4:	f100 8086 	bmi.w	80017f4 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	071e      	lsls	r6, r3, #28
 80016ec:	f100 80f4 	bmi.w	80018d8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	075d      	lsls	r5, r3, #29
 80016f4:	f100 813b 	bmi.w	800196e <HAL_RCC_OscConfig+0x29a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f8:	69e2      	ldr	r2, [r4, #28]
 80016fa:	2a00      	cmp	r2, #0
 80016fc:	f040 81ce 	bne.w	8001a9c <HAL_RCC_OscConfig+0x3c8>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001700:	2000      	movs	r0, #0
 8001702:	e021      	b.n	8001748 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001704:	49b7      	ldr	r1, [pc, #732]	; (80019e4 <HAL_RCC_OscConfig+0x310>)
 8001706:	684b      	ldr	r3, [r1, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b04      	cmp	r3, #4
 800170e:	d007      	beq.n	8001720 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001710:	684b      	ldr	r3, [r1, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d119      	bne.n	800174e <HAL_RCC_OscConfig+0x7a>
 800171a:	684b      	ldr	r3, [r1, #4]
 800171c:	03db      	lsls	r3, r3, #15
 800171e:	d516      	bpl.n	800174e <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001724:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	6809      	ldr	r1, [r1, #0]
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2201      	movs	r2, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	420b      	tst	r3, r1
 800173e:	d0cf      	beq.n	80016e0 <HAL_RCC_OscConfig+0xc>
 8001740:	6863      	ldr	r3, [r4, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1cc      	bne.n	80016e0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001746:	2001      	movs	r0, #1
}
 8001748:	b003      	add	sp, #12
 800174a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174e:	6862      	ldr	r2, [r4, #4]
 8001750:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001754:	d124      	bne.n	80017a0 <HAL_RCC_OscConfig+0xcc>
 8001756:	680b      	ldr	r3, [r1, #0]
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800175e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001760:	68a0      	ldr	r0, [r4, #8]
 8001762:	f023 030f 	bic.w	r3, r3, #15
 8001766:	4303      	orrs	r3, r0
 8001768:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176a:	b34a      	cbz	r2, 80017c0 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 800176c:	f7ff ffaa 	bl	80016c4 <HAL_GetTick>
 8001770:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001774:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	2701      	movs	r7, #1
 8001778:	fa96 f3a6 	rbit	r3, r6
 800177c:	680a      	ldr	r2, [r1, #0]
 800177e:	fa96 f3a6 	rbit	r3, r6
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	fa07 f303 	lsl.w	r3, r7, r3
 800178e:	4213      	tst	r3, r2
 8001790:	d1a6      	bne.n	80016e0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001792:	f7ff ff97 	bl	80016c4 <HAL_GetTick>
 8001796:	1b40      	subs	r0, r0, r5
 8001798:	2864      	cmp	r0, #100	; 0x64
 800179a:	d9ed      	bls.n	8001778 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
 800179e:	e7d3      	b.n	8001748 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	680b      	ldr	r3, [r1, #0]
 80017a2:	b932      	cbnz	r2, 80017b2 <HAL_RCC_OscConfig+0xde>
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a8:	600b      	str	r3, [r1, #0]
 80017aa:	680b      	ldr	r3, [r1, #0]
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b0:	e7d4      	b.n	800175c <HAL_RCC_OscConfig+0x88>
 80017b2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80017b6:	d1f5      	bne.n	80017a4 <HAL_RCC_OscConfig+0xd0>
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	600b      	str	r3, [r1, #0]
 80017be:	e7ca      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80017c0:	f7ff ff80 	bl	80016c4 <HAL_GetTick>
 80017c4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80017c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	2701      	movs	r7, #1
 80017cc:	fa96 f3a6 	rbit	r3, r6
 80017d0:	680a      	ldr	r2, [r1, #0]
 80017d2:	fa96 f3a6 	rbit	r3, r6
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	fa07 f303 	lsl.w	r3, r7, r3
 80017e2:	4213      	tst	r3, r2
 80017e4:	f43f af7c 	beq.w	80016e0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff ff6c 	bl	80016c4 <HAL_GetTick>
 80017ec:	1b40      	subs	r0, r0, r5
 80017ee:	2864      	cmp	r0, #100	; 0x64
 80017f0:	d9ec      	bls.n	80017cc <HAL_RCC_OscConfig+0xf8>
 80017f2:	e7d3      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017f4:	497b      	ldr	r1, [pc, #492]	; (80019e4 <HAL_RCC_OscConfig+0x310>)
 80017f6:	684b      	ldr	r3, [r1, #4]
 80017f8:	f013 0f0c 	tst.w	r3, #12
 80017fc:	d007      	beq.n	800180e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017fe:	684b      	ldr	r3, [r1, #4]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b08      	cmp	r3, #8
 8001806:	d121      	bne.n	800184c <HAL_RCC_OscConfig+0x178>
 8001808:	684b      	ldr	r3, [r1, #4]
 800180a:	03df      	lsls	r7, r3, #15
 800180c:	d41e      	bmi.n	800184c <HAL_RCC_OscConfig+0x178>
 800180e:	2302      	movs	r3, #2
 8001810:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001814:	6808      	ldr	r0, [r1, #0]
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2201      	movs	r2, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	4203      	tst	r3, r0
 800182a:	d002      	beq.n	8001832 <HAL_RCC_OscConfig+0x15e>
 800182c:	6923      	ldr	r3, [r4, #16]
 800182e:	4293      	cmp	r3, r2
 8001830:	d189      	bne.n	8001746 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	6808      	ldr	r0, [r1, #0]
 8001834:	23f8      	movs	r3, #248	; 0xf8
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	fab3 f283 	clz	r2, r3
 800183e:	6963      	ldr	r3, [r4, #20]
 8001840:	4093      	lsls	r3, r2
 8001842:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
 800184a:	e74d      	b.n	80016e8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184c:	6922      	ldr	r2, [r4, #16]
 800184e:	2501      	movs	r5, #1
 8001850:	b302      	cbz	r2, 8001894 <HAL_RCC_OscConfig+0x1c0>
 8001852:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	2702      	movs	r7, #2
 8001866:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001868:	f7ff ff2c 	bl	80016c4 <HAL_GetTick>
 800186c:	4606      	mov	r6, r0
 800186e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	680a      	ldr	r2, [r1, #0]
 8001874:	fa97 f3a7 	rbit	r3, r7
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	fa05 f303 	lsl.w	r3, r5, r3
 8001884:	4213      	tst	r3, r2
 8001886:	d1d4      	bne.n	8001832 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff ff1c 	bl	80016c4 <HAL_GetTick>
 800188c:	1b80      	subs	r0, r0, r6
 800188e:	2802      	cmp	r0, #2
 8001890:	d9ed      	bls.n	800186e <HAL_RCC_OscConfig+0x19a>
 8001892:	e783      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
 8001894:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	2702      	movs	r7, #2
 80018a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018aa:	f7ff ff0b 	bl	80016c4 <HAL_GetTick>
 80018ae:	4606      	mov	r6, r0
 80018b0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b4:	680a      	ldr	r2, [r1, #0]
 80018b6:	fa97 f3a7 	rbit	r3, r7
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	fa05 f303 	lsl.w	r3, r5, r3
 80018c6:	4213      	tst	r3, r2
 80018c8:	f43f af0e 	beq.w	80016e8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fefa 	bl	80016c4 <HAL_GetTick>
 80018d0:	1b80      	subs	r0, r0, r6
 80018d2:	2802      	cmp	r0, #2
 80018d4:	d9ec      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1dc>
 80018d6:	e761      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d8:	69a2      	ldr	r2, [r4, #24]
 80018da:	4d42      	ldr	r5, [pc, #264]	; (80019e4 <HAL_RCC_OscConfig+0x310>)
 80018dc:	4842      	ldr	r0, [pc, #264]	; (80019e8 <HAL_RCC_OscConfig+0x314>)
 80018de:	2101      	movs	r1, #1
 80018e0:	b312      	cbz	r2, 8001928 <HAL_RCC_OscConfig+0x254>
 80018e2:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	4403      	add	r3, r0
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	2602      	movs	r6, #2
 80018f0:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 80018f2:	f7ff fee7 	bl	80016c4 <HAL_GetTick>
 80018f6:	4607      	mov	r7, r0
 80018f8:	fa96 f3a6 	rbit	r3, r6
 80018fc:	fa96 f3a6 	rbit	r3, r6
 8001900:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001904:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001906:	fa96 f3a6 	rbit	r3, r6
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	4213      	tst	r3, r2
 8001918:	f47f aeea 	bne.w	80016f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fed2 	bl	80016c4 <HAL_GetTick>
 8001920:	1bc0      	subs	r0, r0, r7
 8001922:	2802      	cmp	r0, #2
 8001924:	d9e8      	bls.n	80018f8 <HAL_RCC_OscConfig+0x224>
 8001926:	e739      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
 8001928:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	4403      	add	r3, r0
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	2602      	movs	r6, #2
 8001936:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001938:	f7ff fec4 	bl	80016c4 <HAL_GetTick>
 800193c:	4607      	mov	r7, r0
 800193e:	fa96 f3a6 	rbit	r3, r6
 8001942:	fa96 f3a6 	rbit	r3, r6
 8001946:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800194c:	fa96 f3a6 	rbit	r3, r6
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	4213      	tst	r3, r2
 800195e:	f43f aec7 	beq.w	80016f0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff feaf 	bl	80016c4 <HAL_GetTick>
 8001966:	1bc0      	subs	r0, r0, r7
 8001968:	2802      	cmp	r0, #2
 800196a:	d9e8      	bls.n	800193e <HAL_RCC_OscConfig+0x26a>
 800196c:	e716      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	491d      	ldr	r1, [pc, #116]	; (80019e4 <HAL_RCC_OscConfig+0x310>)
 8001970:	69cb      	ldr	r3, [r1, #28]
 8001972:	00d8      	lsls	r0, r3, #3
 8001974:	d434      	bmi.n	80019e0 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	69cb      	ldr	r3, [r1, #28]
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	61cb      	str	r3, [r1, #28]
 800197e:	69cb      	ldr	r3, [r1, #28]
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001988:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4e18      	ldr	r6, [pc, #96]	; (80019ec <HAL_RCC_OscConfig+0x318>)
 800198c:	6833      	ldr	r3, [r6, #0]
 800198e:	05da      	lsls	r2, r3, #23
 8001990:	d52e      	bpl.n	80019f0 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	68e3      	ldr	r3, [r4, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d13b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x33c>
 8001998:	6a0b      	ldr	r3, [r1, #32]
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80019a0:	f7ff fe90 	bl	80016c4 <HAL_GetTick>
 80019a4:	2602      	movs	r6, #2
 80019a6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	46b1      	mov	r9, r6
 80019aa:	f04f 0801 	mov.w	r8, #1
 80019ae:	fa96 f3a6 	rbit	r3, r6
 80019b2:	fa96 f3a6 	rbit	r3, r6
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d068      	beq.n	8001a8c <HAL_RCC_OscConfig+0x3b8>
 80019ba:	6a0a      	ldr	r2, [r1, #32]
 80019bc:	fa99 f3a9 	rbit	r3, r9
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	fa08 f303 	lsl.w	r3, r8, r3
 80019cc:	4213      	tst	r3, r2
 80019ce:	d055      	beq.n	8001a7c <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 80019d0:	2d00      	cmp	r5, #0
 80019d2:	f43f ae91 	beq.w	80016f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d6:	69cb      	ldr	r3, [r1, #28]
 80019d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019dc:	61cb      	str	r3, [r1, #28]
 80019de:	e68b      	b.n	80016f8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2500      	movs	r5, #0
 80019e2:	e7d2      	b.n	800198a <HAL_RCC_OscConfig+0x2b6>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	10908120 	.word	0x10908120
 80019ec:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f0:	6833      	ldr	r3, [r6, #0]
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019f8:	f7ff fe64 	bl	80016c4 <HAL_GetTick>
 80019fc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	6833      	ldr	r3, [r6, #0]
 8001a00:	05db      	lsls	r3, r3, #23
 8001a02:	d4c6      	bmi.n	8001992 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a04:	f7ff fe5e 	bl	80016c4 <HAL_GetTick>
 8001a08:	1bc0      	subs	r0, r0, r7
 8001a0a:	2864      	cmp	r0, #100	; 0x64
 8001a0c:	d9f7      	bls.n	80019fe <HAL_RCC_OscConfig+0x32a>
 8001a0e:	e6c5      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a10:	bb33      	cbnz	r3, 8001a60 <HAL_RCC_OscConfig+0x38c>
 8001a12:	6a0b      	ldr	r3, [r1, #32]
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	620b      	str	r3, [r1, #32]
 8001a1a:	6a0b      	ldr	r3, [r1, #32]
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001a22:	f7ff fe4f 	bl	80016c4 <HAL_GetTick>
 8001a26:	2602      	movs	r6, #2
 8001a28:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2a:	46b1      	mov	r9, r6
 8001a2c:	f04f 0801 	mov.w	r8, #1
 8001a30:	fa96 f3a6 	rbit	r3, r6
 8001a34:	fa96 f3a6 	rbit	r3, r6
 8001a38:	b363      	cbz	r3, 8001a94 <HAL_RCC_OscConfig+0x3c0>
 8001a3a:	6a0a      	ldr	r2, [r1, #32]
 8001a3c:	fa99 f3a9 	rbit	r3, r9
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	fa08 f303 	lsl.w	r3, r8, r3
 8001a4c:	4213      	tst	r3, r2
 8001a4e:	d0bf      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff fe38 	bl	80016c4 <HAL_GetTick>
 8001a54:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a58:	1bc0      	subs	r0, r0, r7
 8001a5a:	4298      	cmp	r0, r3
 8001a5c:	d9e8      	bls.n	8001a30 <HAL_RCC_OscConfig+0x35c>
 8001a5e:	e69d      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	6a0b      	ldr	r3, [r1, #32]
 8001a64:	d103      	bne.n	8001a6e <HAL_RCC_OscConfig+0x39a>
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	620b      	str	r3, [r1, #32]
 8001a6c:	e794      	b.n	8001998 <HAL_RCC_OscConfig+0x2c4>
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	620b      	str	r3, [r1, #32]
 8001a74:	6a0b      	ldr	r3, [r1, #32]
 8001a76:	f023 0304 	bic.w	r3, r3, #4
 8001a7a:	e790      	b.n	800199e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fe22 	bl	80016c4 <HAL_GetTick>
 8001a80:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a84:	1bc0      	subs	r0, r0, r7
 8001a86:	4298      	cmp	r0, r3
 8001a88:	d991      	bls.n	80019ae <HAL_RCC_OscConfig+0x2da>
 8001a8a:	e687      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
 8001a8c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001a92:	e793      	b.n	80019bc <HAL_RCC_OscConfig+0x2e8>
 8001a94:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001a9a:	e7cf      	b.n	8001a3c <HAL_RCC_OscConfig+0x368>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4942      	ldr	r1, [pc, #264]	; (8001ba8 <HAL_RCC_OscConfig+0x4d4>)
 8001a9e:	684b      	ldr	r3, [r1, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	f43f ae4e 	beq.w	8001746 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	2a02      	cmp	r2, #2
 8001aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab0:	d154      	bne.n	8001b5c <HAL_RCC_OscConfig+0x488>
 8001ab2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001abe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fdfc 	bl	80016c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001bac <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8001ad0:	4606      	mov	r6, r0
 8001ad2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	2501      	movs	r5, #1
 8001ad8:	fa97 f3a7 	rbit	r3, r7
 8001adc:	680a      	ldr	r2, [r1, #0]
 8001ade:	fa97 f3a7 	rbit	r3, r7
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	fa05 f303 	lsl.w	r3, r5, r3
 8001aee:	4213      	tst	r3, r2
 8001af0:	d12e      	bne.n	8001b50 <HAL_RCC_OscConfig+0x47c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af2:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8001af6:	684a      	ldr	r2, [r1, #4]
 8001af8:	4303      	orrs	r3, r0
 8001afa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
 8001b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b06:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b16:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	4f24      	ldr	r7, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8001b1a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fdd2 	bl	80016c4 <HAL_GetTick>
 8001b20:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001b24:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b26:	2601      	movs	r6, #1
 8001b28:	fa95 f3a5 	rbit	r3, r5
 8001b2c:	680a      	ldr	r2, [r1, #0]
 8001b2e:	fa95 f3a5 	rbit	r3, r5
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	fa06 f303 	lsl.w	r3, r6, r3
 8001b3e:	4213      	tst	r3, r2
 8001b40:	f47f adde 	bne.w	8001700 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fdbe 	bl	80016c4 <HAL_GetTick>
 8001b48:	1b00      	subs	r0, r0, r4
 8001b4a:	42b8      	cmp	r0, r7
 8001b4c:	d9ec      	bls.n	8001b28 <HAL_RCC_OscConfig+0x454>
 8001b4e:	e625      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fdb8 	bl	80016c4 <HAL_GetTick>
 8001b54:	1b80      	subs	r0, r0, r6
 8001b56:	4540      	cmp	r0, r8
 8001b58:	d9be      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x404>
 8001b5a:	e61f      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
 8001b5c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b72:	f7ff fda7 	bl	80016c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b76:	4f0d      	ldr	r7, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8001b78:	4604      	mov	r4, r0
 8001b7a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7e:	2601      	movs	r6, #1
 8001b80:	fa95 f3a5 	rbit	r3, r5
 8001b84:	680a      	ldr	r2, [r1, #0]
 8001b86:	fa95 f3a5 	rbit	r3, r5
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	fa06 f303 	lsl.w	r3, r6, r3
 8001b96:	4213      	tst	r3, r2
 8001b98:	f43f adb2 	beq.w	8001700 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fd92 	bl	80016c4 <HAL_GetTick>
 8001ba0:	1b00      	subs	r0, r0, r4
 8001ba2:	42b8      	cmp	r0, r7
 8001ba4:	d9ec      	bls.n	8001b80 <HAL_RCC_OscConfig+0x4ac>
 8001ba6:	e5f9      	b.n	800179c <HAL_RCC_OscConfig+0xc8>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	00030d40 	.word	0x00030d40

08001bb0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bb0:	4a50      	ldr	r2, [pc, #320]	; (8001cf4 <HAL_RCC_ClockConfig+0x144>)
{
 8001bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	428b      	cmp	r3, r1
{
 8001bbc:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bbe:	d31b      	bcc.n	8001bf8 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	0790      	lsls	r0, r2, #30
 8001bc4:	d424      	bmi.n	8001c10 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	07d2      	lsls	r2, r2, #31
 8001bc8:	d42a      	bmi.n	8001c20 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bca:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_RCC_ClockConfig+0x144>)
 8001bcc:	6813      	ldr	r3, [r2, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	428b      	cmp	r3, r1
 8001bd4:	d87a      	bhi.n	8001ccc <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	6820      	ldr	r0, [r4, #0]
 8001bd8:	0743      	lsls	r3, r0, #29
 8001bda:	f100 8082 	bmi.w	8001ce2 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	f010 0008 	ands.w	r0, r0, #8
 8001be2:	d014      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be4:	4a44      	ldr	r2, [pc, #272]	; (8001cf8 <HAL_RCC_ClockConfig+0x148>)
 8001be6:	6921      	ldr	r1, [r4, #16]
 8001be8:	6853      	ldr	r3, [r2, #4]
 8001bea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001bee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bf2:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f023 0307 	bic.w	r3, r3, #7
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	428b      	cmp	r3, r1
 8001c0a:	d0d9      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
}
 8001c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4839      	ldr	r0, [pc, #228]	; (8001cf8 <HAL_RCC_ClockConfig+0x148>)
 8001c12:	68a5      	ldr	r5, [r4, #8]
 8001c14:	6843      	ldr	r3, [r0, #4]
 8001c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1a:	432b      	orrs	r3, r5
 8001c1c:	6043      	str	r3, [r0, #4]
 8001c1e:	e7d2      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c20:	6862      	ldr	r2, [r4, #4]
 8001c22:	4d35      	ldr	r5, [pc, #212]	; (8001cf8 <HAL_RCC_ClockConfig+0x148>)
 8001c24:	2a01      	cmp	r2, #1
 8001c26:	d127      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xc8>
 8001c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c30:	6828      	ldr	r0, [r5, #0]
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	d0e2      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	686b      	ldr	r3, [r5, #4]
 8001c48:	f023 0303 	bic.w	r3, r3, #3
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8001c50:	f7ff fd38 	bl	80016c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	6863      	ldr	r3, [r4, #4]
 8001c56:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001c58:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5a:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	d11e      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c60:	686b      	ldr	r3, [r5, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d0af      	beq.n	8001bca <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f7ff fd2b 	bl	80016c4 <HAL_GetTick>
 8001c6e:	1b80      	subs	r0, r0, r6
 8001c70:	42b8      	cmp	r0, r7
 8001c72:	d9f5      	bls.n	8001c60 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
 8001c76:	e7ca      	b.n	8001c0e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c78:	2a02      	cmp	r2, #2
 8001c7a:	bf0c      	ite	eq
 8001c7c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001c80:	2302      	movne	r3, #2
 8001c82:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	682e      	ldr	r6, [r5, #0]
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f303 	lsl.w	r3, r0, r3
 8001c9a:	4233      	tst	r3, r6
 8001c9c:	e7d2      	b.n	8001c44 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca2:	686b      	ldr	r3, [r5, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d08e      	beq.n	8001bca <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff fd0a 	bl	80016c4 <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	42b8      	cmp	r0, r7
 8001cb4:	d9f5      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0xf2>
 8001cb6:	e7dd      	b.n	8001c74 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff fd04 	bl	80016c4 <HAL_GetTick>
 8001cbc:	1b80      	subs	r0, r0, r6
 8001cbe:	42b8      	cmp	r0, r7
 8001cc0:	d8d8      	bhi.n	8001c74 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc2:	686b      	ldr	r3, [r5, #4]
 8001cc4:	f013 0f0c 	tst.w	r3, #12
 8001cc8:	d1f6      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x108>
 8001cca:	e77e      	b.n	8001bca <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	428b      	cmp	r3, r1
 8001cde:	d195      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x5c>
 8001ce0:	e779      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce2:	4905      	ldr	r1, [pc, #20]	; (8001cf8 <HAL_RCC_ClockConfig+0x148>)
 8001ce4:	68e3      	ldr	r3, [r4, #12]
 8001ce6:	684a      	ldr	r2, [r1, #4]
 8001ce8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cec:	431a      	orrs	r2, r3
 8001cee:	604a      	str	r2, [r1, #4]
 8001cf0:	e775      	b.n	8001bde <HAL_RCC_ClockConfig+0x2e>
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d00:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8001e80 <HAL_GPIO_Init+0x184>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d04:	4c5c      	ldr	r4, [pc, #368]	; (8001e78 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00U;
 8001d06:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d08:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d0c:	680a      	ldr	r2, [r1, #0]
 8001d0e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001d12:	d102      	bne.n	8001d1a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8001d14:	b003      	add	sp, #12
 8001d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d1a:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 8001d1e:	ea1a 0202 	ands.w	r2, sl, r2
 8001d22:	f000 809e 	beq.w	8001e62 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d26:	684d      	ldr	r5, [r1, #4]
 8001d28:	f025 0e10 	bic.w	lr, r5, #16
 8001d2c:	f1be 0f02 	cmp.w	lr, #2
 8001d30:	d114      	bne.n	8001d5c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001d32:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001d36:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001d3e:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001d46:	270f      	movs	r7, #15
 8001d48:	fa07 f70b 	lsl.w	r7, r7, fp
 8001d4c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d50:	690e      	ldr	r6, [r1, #16]
 8001d52:	fa06 f60b 	lsl.w	r6, r6, fp
 8001d56:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001d58:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8001d5c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001d64:	2603      	movs	r6, #3
 8001d66:	fa06 f70c 	lsl.w	r7, r6, ip
 8001d6a:	ea2b 0b07 	bic.w	fp, fp, r7
 8001d6e:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	f005 0703 	and.w	r7, r5, #3
 8001d74:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d78:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d80:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8001d84:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d86:	d811      	bhi.n	8001dac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8001d88:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d8a:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8e:	68cf      	ldr	r7, [r1, #12]
 8001d90:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d94:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001d98:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d9a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001da0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001da4:	409f      	lsls	r7, r3
 8001da6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8001daa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001dac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dae:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	688e      	ldr	r6, [r1, #8]
 8001db2:	fa06 f60c 	lsl.w	r6, r6, ip
 8001db6:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001db8:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dba:	00ee      	lsls	r6, r5, #3
 8001dbc:	d551      	bpl.n	8001e62 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001dc2:	f046 0601 	orr.w	r6, r6, #1
 8001dc6:	f8c8 6018 	str.w	r6, [r8, #24]
 8001dca:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001dce:	f023 0703 	bic.w	r7, r3, #3
 8001dd2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001dd6:	f006 0601 	and.w	r6, r6, #1
 8001dda:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001dde:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001de0:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001de6:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001de8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001dec:	f04f 0c0f 	mov.w	ip, #15
 8001df0:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001df4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001df8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dfc:	d033      	beq.n	8001e66 <HAL_GPIO_Init+0x16a>
 8001dfe:	4e1f      	ldr	r6, [pc, #124]	; (8001e7c <HAL_GPIO_Init+0x180>)
 8001e00:	42b0      	cmp	r0, r6
 8001e02:	d032      	beq.n	8001e6a <HAL_GPIO_Init+0x16e>
 8001e04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e08:	42b0      	cmp	r0, r6
 8001e0a:	d030      	beq.n	8001e6e <HAL_GPIO_Init+0x172>
 8001e0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e10:	42b0      	cmp	r0, r6
 8001e12:	d02e      	beq.n	8001e72 <HAL_GPIO_Init+0x176>
 8001e14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e18:	42b0      	cmp	r0, r6
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2604      	moveq	r6, #4
 8001e1e:	2605      	movne	r6, #5
 8001e20:	fa06 f60e 	lsl.w	r6, r6, lr
 8001e24:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e28:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001e2a:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001e32:	bf0c      	ite	eq
 8001e34:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001e36:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8001e38:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001e3a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e3c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001e40:	bf0c      	ite	eq
 8001e42:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001e44:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8001e46:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001e48:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	bf0c      	ite	eq
 8001e50:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001e52:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8001e54:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001e56:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e58:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	bf54      	ite	pl
 8001e5c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001e5e:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8001e60:	60e6      	str	r6, [r4, #12]
    position++;
 8001e62:	3301      	adds	r3, #1
 8001e64:	e752      	b.n	8001d0c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e66:	2600      	movs	r6, #0
 8001e68:	e7da      	b.n	8001e20 <HAL_GPIO_Init+0x124>
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	e7d8      	b.n	8001e20 <HAL_GPIO_Init+0x124>
 8001e6e:	2602      	movs	r6, #2
 8001e70:	e7d6      	b.n	8001e20 <HAL_GPIO_Init+0x124>
 8001e72:	2603      	movs	r6, #3
 8001e74:	e7d4      	b.n	8001e20 <HAL_GPIO_Init+0x124>
 8001e76:	bf00      	nop
 8001e78:	40010400 	.word	0x40010400
 8001e7c:	48000400 	.word	0x48000400
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	b10a      	cbz	r2, 8001e8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e86:	6181      	str	r1, [r0, #24]
 8001e88:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e8a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001e8c:	4770      	bx	lr
 8001e8e:	0000      	movs	r0, r0

08001e90 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e90:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e92:	6881      	ldr	r1, [r0, #8]
 8001e94:	69c3      	ldr	r3, [r0, #28]
{
 8001e96:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e98:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e9a:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e9c:	4329      	orrs	r1, r5
 8001e9e:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ea0:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ea4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ea6:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001eaa:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001eac:	4321      	orrs	r1, r4
 8001eae:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb0:	6851      	ldr	r1, [r2, #4]
 8001eb2:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001eb4:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001eba:	4321      	orrs	r1, r4
 8001ebc:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ebe:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ec0:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ec2:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ec6:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ec8:	4321      	orrs	r1, r4
 8001eca:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ecc:	4962      	ldr	r1, [pc, #392]	; (8002058 <UART_SetConfig+0x1c8>)
 8001ece:	428a      	cmp	r2, r1
 8001ed0:	d116      	bne.n	8001f00 <UART_SetConfig+0x70>
 8001ed2:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8001ed6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001ed8:	f001 0103 	and.w	r1, r1, #3
 8001edc:	3901      	subs	r1, #1
 8001ede:	2902      	cmp	r1, #2
 8001ee0:	f200 80b2 	bhi.w	8002048 <UART_SetConfig+0x1b8>
 8001ee4:	4c5d      	ldr	r4, [pc, #372]	; (800205c <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eea:	5c61      	ldrb	r1, [r4, r1]
 8001eec:	d177      	bne.n	8001fde <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 8001eee:	2908      	cmp	r1, #8
 8001ef0:	d872      	bhi.n	8001fd8 <UART_SetConfig+0x148>
 8001ef2:	e8df f001 	tbb	[pc, r1]
 8001ef6:	acac      	.short	0xacac
 8001ef8:	71ac7124 	.word	0x71ac7124
 8001efc:	7171      	.short	0x7171
 8001efe:	a4          	.byte	0xa4
 8001eff:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f00:	4957      	ldr	r1, [pc, #348]	; (8002060 <UART_SetConfig+0x1d0>)
 8001f02:	428a      	cmp	r2, r1
 8001f04:	d12c      	bne.n	8001f60 <UART_SetConfig+0xd0>
 8001f06:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8001f0a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001f0c:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8001f10:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001f14:	f000 8090 	beq.w	8002038 <UART_SetConfig+0x1a8>
 8001f18:	d80b      	bhi.n	8001f32 <UART_SetConfig+0xa2>
 8001f1a:	2900      	cmp	r1, #0
 8001f1c:	f000 8094 	beq.w	8002048 <UART_SetConfig+0x1b8>
 8001f20:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001f24:	f000 8090 	beq.w	8002048 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f2c:	d054      	beq.n	8001fd8 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001f30:	e015      	b.n	8001f5e <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f32:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8001f36:	d1f7      	bne.n	8001f28 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f3c:	d166      	bne.n	800200c <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f3e:	6841      	ldr	r1, [r0, #4]
 8001f40:	084b      	lsrs	r3, r1, #1
 8001f42:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001f46:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f4e:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f50:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001f52:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f56:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	60d3      	str	r3, [r2, #12]

}
 8001f5e:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f60:	4940      	ldr	r1, [pc, #256]	; (8002064 <UART_SetConfig+0x1d4>)
 8001f62:	428a      	cmp	r2, r1
 8001f64:	d110      	bne.n	8001f88 <UART_SetConfig+0xf8>
 8001f66:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8001f6a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001f6c:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8001f70:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8001f74:	d060      	beq.n	8002038 <UART_SetConfig+0x1a8>
 8001f76:	d804      	bhi.n	8001f82 <UART_SetConfig+0xf2>
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	d065      	beq.n	8002048 <UART_SetConfig+0x1b8>
 8001f7c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8001f80:	e7d0      	b.n	8001f24 <UART_SetConfig+0x94>
 8001f82:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8001f86:	e7d6      	b.n	8001f36 <UART_SetConfig+0xa6>
 8001f88:	4937      	ldr	r1, [pc, #220]	; (8002068 <UART_SetConfig+0x1d8>)
 8001f8a:	428a      	cmp	r2, r1
 8001f8c:	d110      	bne.n	8001fb0 <UART_SetConfig+0x120>
 8001f8e:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8001f92:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001f94:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 8001f98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001f9c:	d04c      	beq.n	8002038 <UART_SetConfig+0x1a8>
 8001f9e:	d804      	bhi.n	8001faa <UART_SetConfig+0x11a>
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	d051      	beq.n	8002048 <UART_SetConfig+0x1b8>
 8001fa4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001fa8:	e7bc      	b.n	8001f24 <UART_SetConfig+0x94>
 8001faa:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8001fae:	e7c2      	b.n	8001f36 <UART_SetConfig+0xa6>
 8001fb0:	492e      	ldr	r1, [pc, #184]	; (800206c <UART_SetConfig+0x1dc>)
 8001fb2:	428a      	cmp	r2, r1
 8001fb4:	d1b8      	bne.n	8001f28 <UART_SetConfig+0x98>
 8001fb6:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 8001fba:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001fbc:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8001fc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001fc4:	d038      	beq.n	8002038 <UART_SetConfig+0x1a8>
 8001fc6:	d804      	bhi.n	8001fd2 <UART_SetConfig+0x142>
 8001fc8:	2900      	cmp	r1, #0
 8001fca:	d03d      	beq.n	8002048 <UART_SetConfig+0x1b8>
 8001fcc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001fd0:	e7a8      	b.n	8001f24 <UART_SetConfig+0x94>
 8001fd2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001fd6:	e7ae      	b.n	8001f36 <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e7b9      	b.n	8001f52 <UART_SetConfig+0xc2>
    switch (clocksource)
 8001fde:	2908      	cmp	r1, #8
 8001fe0:	d8a5      	bhi.n	8001f2e <UART_SetConfig+0x9e>
 8001fe2:	a301      	add	r3, pc, #4	; (adr r3, 8001fe8 <UART_SetConfig+0x158>)
 8001fe4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001fe8:	08002025 	.word	0x08002025
 8001fec:	08002025 	.word	0x08002025
 8001ff0:	0800200d 	.word	0x0800200d
 8001ff4:	08001f2f 	.word	0x08001f2f
 8001ff8:	08002025 	.word	0x08002025
 8001ffc:	08001f2f 	.word	0x08001f2f
 8002000:	08001f2f 	.word	0x08001f2f
 8002004:	08001f2f 	.word	0x08001f2f
 8002008:	0800202f 	.word	0x0800202f
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800200c:	6841      	ldr	r1, [r0, #4]
 800200e:	084b      	lsrs	r3, r1, #1
 8002010:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002014:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002018:	fbb3 f3f1 	udiv	r3, r3, r1
 800201c:	b29b      	uxth	r3, r3
 800201e:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002020:	2000      	movs	r0, #0
        break;
 8002022:	e79c      	b.n	8001f5e <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002024:	6841      	ldr	r1, [r0, #4]
 8002026:	084b      	lsrs	r3, r1, #1
 8002028:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 800202c:	e7f4      	b.n	8002018 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800202e:	6841      	ldr	r1, [r0, #4]
 8002030:	084b      	lsrs	r3, r1, #1
 8002032:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002036:	e7ef      	b.n	8002018 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203c:	d1f7      	bne.n	800202e <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800203e:	6841      	ldr	r1, [r0, #4]
 8002040:	084b      	lsrs	r3, r1, #1
 8002042:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002046:	e780      	b.n	8001f4a <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800204c:	d1ea      	bne.n	8002024 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800204e:	6841      	ldr	r1, [r0, #4]
 8002050:	084b      	lsrs	r3, r1, #1
 8002052:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8002056:	e778      	b.n	8001f4a <UART_SetConfig+0xba>
 8002058:	40013800 	.word	0x40013800
 800205c:	0800242c 	.word	0x0800242c
 8002060:	40004400 	.word	0x40004400
 8002064:	40004800 	.word	0x40004800
 8002068:	40004c00 	.word	0x40004c00
 800206c:	40005000 	.word	0x40005000

08002070 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	9f06      	ldr	r7, [sp, #24]
 8002074:	4604      	mov	r4, r0
 8002076:	4615      	mov	r5, r2
 8002078:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	69d3      	ldr	r3, [r2, #28]
 800207e:	ea31 0303 	bics.w	r3, r1, r3
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	42ab      	cmp	r3, r5
 800208a:	d001      	beq.n	8002090 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800208c:	2000      	movs	r0, #0
 800208e:	e014      	b.n	80020ba <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8002090:	1c7b      	adds	r3, r7, #1
 8002092:	d0f3      	beq.n	800207c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002094:	b997      	cbnz	r7, 80020bc <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800209e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80020a8:	2320      	movs	r3, #32
 80020aa:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80020ae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80020b2:	2300      	movs	r3, #0
 80020b4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80020b8:	2003      	movs	r0, #3
}
 80020ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020bc:	f7ff fb02 	bl	80016c4 <HAL_GetTick>
 80020c0:	1b80      	subs	r0, r0, r6
 80020c2:	42b8      	cmp	r0, r7
 80020c4:	d9d9      	bls.n	800207a <UART_WaitOnFlagUntilTimeout+0xa>
 80020c6:	e7e6      	b.n	8002096 <UART_WaitOnFlagUntilTimeout+0x26>

080020c8 <UART_CheckIdleState>:
{
 80020c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020cc:	2100      	movs	r1, #0
 80020ce:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80020d0:	f7ff faf8 	bl	80016c4 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80020da:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020dc:	d417      	bmi.n	800210e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	075b      	lsls	r3, r3, #29
 80020e4:	d50a      	bpl.n	80020fc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	462b      	mov	r3, r5
 80020f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80020f4:	4620      	mov	r0, r4
 80020f6:	f7ff ffbb 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 80020fa:	b9a0      	cbnz	r0, 8002126 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80020fc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80020fe:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002100:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002104:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002108:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800210c:	e00c      	b.n	8002128 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800210e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	460a      	mov	r2, r1
 8002116:	4603      	mov	r3, r0
 8002118:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800211c:	4620      	mov	r0, r4
 800211e:	f7ff ffa7 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 8002122:	2800      	cmp	r0, #0
 8002124:	d0db      	beq.n	80020de <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002126:	2003      	movs	r0, #3
}
 8002128:	b003      	add	sp, #12
 800212a:	bd30      	pop	{r4, r5, pc}

0800212c <HAL_UART_Init>:
{
 800212c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800212e:	4604      	mov	r4, r0
 8002130:	b328      	cbz	r0, 800217e <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002132:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002136:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800213a:	b90b      	cbnz	r3, 8002140 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800213c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8002140:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002142:	2324      	movs	r3, #36	; 0x24
 8002144:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff fe9d 	bl	8001e90 <UART_SetConfig>
 8002156:	2801      	cmp	r0, #1
 8002158:	d011      	beq.n	800217e <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800216a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8002172:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002174:	601a      	str	r2, [r3, #0]
}
 8002176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 800217a:	f7ff bfa5 	b.w	80020c8 <UART_CheckIdleState>
}
 800217e:	2001      	movs	r0, #1
 8002180:	bd10      	pop	{r4, pc}

08002182 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002184:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002186:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800218a:	2b20      	cmp	r3, #32
{
 800218c:	460d      	mov	r5, r1
 800218e:	4604      	mov	r4, r0
 8002190:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002192:	d14a      	bne.n	800222a <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8002194:	2d00      	cmp	r5, #0
 8002196:	d046      	beq.n	8002226 <HAL_UART_Transmit+0xa4>
 8002198:	2a00      	cmp	r2, #0
 800219a:	d044      	beq.n	8002226 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800219c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d042      	beq.n	800222a <HAL_UART_Transmit+0xa8>
 80021a4:	2301      	movs	r3, #1
 80021a6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ae:	2321      	movs	r3, #33	; 0x21
 80021b0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80021b4:	f7ff fa86 	bl	80016c4 <HAL_GetTick>
 80021b8:	4607      	mov	r7, r0

    huart->TxXferSize = Size;
 80021ba:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80021be:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80021c2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80021c6:	b292      	uxth	r2, r2
 80021c8:	b962      	cbnz	r2, 80021e4 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ca:	9600      	str	r6, [sp, #0]
 80021cc:	463b      	mov	r3, r7
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff ff4d 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 80021d6:	b998      	cbnz	r0, 8002200 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021d8:	2320      	movs	r3, #32
 80021da:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021de:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80021e2:	e00e      	b.n	8002202 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80021e4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e8:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 80021ea:	3a01      	subs	r2, #1
 80021ec:	b292      	uxth	r2, r2
 80021ee:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff ff39 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 80021fe:	b110      	cbz	r0, 8002206 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002200:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002202:	b003      	add	sp, #12
 8002204:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	d107      	bne.n	8002220 <HAL_UART_Transmit+0x9e>
 8002210:	6923      	ldr	r3, [r4, #16]
 8002212:	b92b      	cbnz	r3, 8002220 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002214:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002218:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800221c:	8513      	strh	r3, [r2, #40]	; 0x28
 800221e:	e7d0      	b.n	80021c2 <HAL_UART_Transmit+0x40>
 8002220:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002224:	e7fa      	b.n	800221c <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8002226:	2001      	movs	r0, #1
 8002228:	e7eb      	b.n	8002202 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800222a:	2002      	movs	r0, #2
 800222c:	e7e9      	b.n	8002202 <HAL_UART_Transmit+0x80>

0800222e <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002232:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002234:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002238:	2b20      	cmp	r3, #32
{
 800223a:	460d      	mov	r5, r1
 800223c:	4604      	mov	r4, r0
 800223e:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002240:	d15c      	bne.n	80022fc <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8002242:	2d00      	cmp	r5, #0
 8002244:	d058      	beq.n	80022f8 <HAL_UART_Receive+0xca>
 8002246:	2a00      	cmp	r2, #0
 8002248:	d056      	beq.n	80022f8 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800224a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800224e:	2b01      	cmp	r3, #1
 8002250:	d054      	beq.n	80022fc <HAL_UART_Receive+0xce>
 8002252:	2301      	movs	r3, #1
 8002254:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002258:	6803      	ldr	r3, [r0, #0]
 800225a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800225e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002260:	2300      	movs	r3, #0
 8002262:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002264:	2322      	movs	r3, #34	; 0x22
 8002266:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800226a:	f7ff fa2b 	bl	80016c4 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800226e:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002270:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002278:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800227a:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800227e:	d115      	bne.n	80022ac <HAL_UART_Receive+0x7e>
 8002280:	6923      	ldr	r3, [r4, #16]
 8002282:	b98b      	cbnz	r3, 80022a8 <HAL_UART_Receive+0x7a>
 8002284:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002288:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800228c:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002290:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002294:	b280      	uxth	r0, r0
 8002296:	b980      	cbnz	r0, 80022ba <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002298:	2320      	movs	r3, #32
 800229a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800229e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 80022a2:	b002      	add	sp, #8
 80022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	e7ed      	b.n	8002288 <HAL_UART_Receive+0x5a>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ed      	bne.n	800228c <HAL_UART_Receive+0x5e>
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f8      	beq.n	80022a8 <HAL_UART_Receive+0x7a>
 80022b6:	237f      	movs	r3, #127	; 0x7f
 80022b8:	e7e6      	b.n	8002288 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 80022ba:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 80022c0:	3a01      	subs	r2, #1
 80022c2:	b292      	uxth	r2, r2
 80022c4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022c8:	4643      	mov	r3, r8
 80022ca:	2200      	movs	r2, #0
 80022cc:	2120      	movs	r1, #32
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff fece 	bl	8002070 <UART_WaitOnFlagUntilTimeout>
 80022d4:	b9a0      	cbnz	r0, 8002300 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d6:	68a2      	ldr	r2, [r4, #8]
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80022de:	d106      	bne.n	80022ee <HAL_UART_Receive+0xc0>
 80022e0:	6922      	ldr	r2, [r4, #16]
 80022e2:	b922      	cbnz	r2, 80022ee <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80022e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022e6:	403b      	ands	r3, r7
 80022e8:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80022ec:	e7d0      	b.n	8002290 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80022ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022f0:	403b      	ands	r3, r7
 80022f2:	f805 3b01 	strb.w	r3, [r5], #1
 80022f6:	e7cb      	b.n	8002290 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
 80022fa:	e7d2      	b.n	80022a2 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80022fc:	2002      	movs	r0, #2
 80022fe:	e7d0      	b.n	80022a2 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8002300:	2003      	movs	r0, #3
 8002302:	e7ce      	b.n	80022a2 <HAL_UART_Receive+0x74>

08002304 <Reset_Handler>:
 8002304:	2100      	movs	r1, #0
 8002306:	e003      	b.n	8002310 <LoopCopyDataInit>

08002308 <CopyDataInit>:
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <LoopForever+0x2>)
 800230a:	585b      	ldr	r3, [r3, r1]
 800230c:	5043      	str	r3, [r0, r1]
 800230e:	3104      	adds	r1, #4

08002310 <LoopCopyDataInit>:
 8002310:	480a      	ldr	r0, [pc, #40]	; (800233c <LoopForever+0x6>)
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <LoopForever+0xa>)
 8002314:	1842      	adds	r2, r0, r1
 8002316:	429a      	cmp	r2, r3
 8002318:	d3f6      	bcc.n	8002308 <CopyDataInit>
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <LoopForever+0xe>)
 800231c:	e002      	b.n	8002324 <LoopFillZerobss>

0800231e <FillZerobss>:
 800231e:	2300      	movs	r3, #0
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	3204      	adds	r2, #4

08002324 <LoopFillZerobss>:
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <LoopForever+0x12>)
 8002326:	429a      	cmp	r2, r3
 8002328:	d3f9      	bcc.n	800231e <FillZerobss>
 800232a:	f3af 8000 	nop.w
 800232e:	f7fd ff6f 	bl	8000210 <__libc_init_array>
 8002332:	f7fe ff83 	bl	800123c <main>

08002336 <LoopForever>:
 8002336:	e7fe      	b.n	8002336 <LoopForever>
 8002338:	08002498 	.word	0x08002498
 800233c:	20000000 	.word	0x20000000
 8002340:	20000000 	.word	0x20000000
 8002344:	20000000 	.word	0x20000000
 8002348:	20000218 	.word	0x20000218

0800234c <BusFault_Handler>:
 800234c:	e7fe      	b.n	800234c <BusFault_Handler>
 800234e:	0000      	movs	r0, r0

08002350 <_init>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	bf00      	nop
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr

0800235c <_fini>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr
